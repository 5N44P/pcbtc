ARM GAS  /tmp/ccp9Rqiy.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"system_stm32f0xx.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemInit,"ax",%progbits
  18              		.align	2
  19              		.global	SystemInit
  20              		.code	16
  21              		.thumb_func
  23              	SystemInit:
  24              	.LFB34:
  25              		.file 1 "Src/system_stm32f0xx.c"
   1:Src/system_stm32f0xx.c **** /**
   2:Src/system_stm32f0xx.c ****   ******************************************************************************
   3:Src/system_stm32f0xx.c ****   * @file    system_stm32f0xx.c
   4:Src/system_stm32f0xx.c ****   * @author  MCD Application Team
   5:Src/system_stm32f0xx.c ****   * @brief   CMSIS Cortex-M0 Device Peripheral Access Layer System Source File.
   6:Src/system_stm32f0xx.c ****   *
   7:Src/system_stm32f0xx.c ****   * 1. This file provides two functions and one global variable to be called from
   8:Src/system_stm32f0xx.c ****   *    user application:
   9:Src/system_stm32f0xx.c ****   *      - SystemInit(): This function is called at startup just after reset and
  10:Src/system_stm32f0xx.c ****   *                      before branch to main program. This call is made inside
  11:Src/system_stm32f0xx.c ****   *                      the "startup_stm32f0xx.s" file.
  12:Src/system_stm32f0xx.c ****   *
  13:Src/system_stm32f0xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Src/system_stm32f0xx.c ****   *                                  by the user application to setup the SysTick
  15:Src/system_stm32f0xx.c ****   *                                  timer or configure other parameters.
  16:Src/system_stm32f0xx.c ****   *
  17:Src/system_stm32f0xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Src/system_stm32f0xx.c ****   *                                 be called whenever the core clock is changed
  19:Src/system_stm32f0xx.c ****   *                                 during program execution.
  20:Src/system_stm32f0xx.c ****   *
  21:Src/system_stm32f0xx.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  22:Src/system_stm32f0xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f0xx.s" file, to
  23:Src/system_stm32f0xx.c ****   *    configure the system clock before to branch to main program.
  24:Src/system_stm32f0xx.c ****   *
  25:Src/system_stm32f0xx.c ****   * 3. This file configures the system clock as follows:
  26:Src/system_stm32f0xx.c ****   *=============================================================================
  27:Src/system_stm32f0xx.c ****   *                         Supported STM32F0xx device
  28:Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  29:Src/system_stm32f0xx.c ****   *        System Clock source                    | HSI
  30:Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  31:Src/system_stm32f0xx.c ****   *        SYSCLK(Hz)                             | 8000000
  32:Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  33:Src/system_stm32f0xx.c ****   *        HCLK(Hz)                               | 8000000
ARM GAS  /tmp/ccp9Rqiy.s 			page 2


  34:Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  35:Src/system_stm32f0xx.c ****   *        AHB Prescaler                          | 1
  36:Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  37:Src/system_stm32f0xx.c ****   *        APB1 Prescaler                         | 1
  38:Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  39:Src/system_stm32f0xx.c ****   *=============================================================================
  40:Src/system_stm32f0xx.c ****   ******************************************************************************
  41:Src/system_stm32f0xx.c ****   * @attention
  42:Src/system_stm32f0xx.c ****   *
  43:Src/system_stm32f0xx.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  44:Src/system_stm32f0xx.c ****   *
  45:Src/system_stm32f0xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  46:Src/system_stm32f0xx.c ****   * are permitted provided that the following conditions are met:
  47:Src/system_stm32f0xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  48:Src/system_stm32f0xx.c ****   *      this list of conditions and the following disclaimer.
  49:Src/system_stm32f0xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  50:Src/system_stm32f0xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  51:Src/system_stm32f0xx.c ****   *      and/or other materials provided with the distribution.
  52:Src/system_stm32f0xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  53:Src/system_stm32f0xx.c ****   *      may be used to endorse or promote products derived from this software
  54:Src/system_stm32f0xx.c ****   *      without specific prior written permission.
  55:Src/system_stm32f0xx.c ****   *
  56:Src/system_stm32f0xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  57:Src/system_stm32f0xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  58:Src/system_stm32f0xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  59:Src/system_stm32f0xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  60:Src/system_stm32f0xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  61:Src/system_stm32f0xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  62:Src/system_stm32f0xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  63:Src/system_stm32f0xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  64:Src/system_stm32f0xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  65:Src/system_stm32f0xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  66:Src/system_stm32f0xx.c ****   *
  67:Src/system_stm32f0xx.c ****   ******************************************************************************
  68:Src/system_stm32f0xx.c ****   */
  69:Src/system_stm32f0xx.c **** 
  70:Src/system_stm32f0xx.c **** /** @addtogroup CMSIS
  71:Src/system_stm32f0xx.c ****   * @{
  72:Src/system_stm32f0xx.c ****   */
  73:Src/system_stm32f0xx.c **** 
  74:Src/system_stm32f0xx.c **** /** @addtogroup stm32f0xx_system
  75:Src/system_stm32f0xx.c ****   * @{
  76:Src/system_stm32f0xx.c ****   */
  77:Src/system_stm32f0xx.c **** 
  78:Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Includes
  79:Src/system_stm32f0xx.c ****   * @{
  80:Src/system_stm32f0xx.c ****   */
  81:Src/system_stm32f0xx.c **** 
  82:Src/system_stm32f0xx.c **** #include "stm32f0xx.h"
  83:Src/system_stm32f0xx.c **** 
  84:Src/system_stm32f0xx.c **** /**
  85:Src/system_stm32f0xx.c ****   * @}
  86:Src/system_stm32f0xx.c ****   */
  87:Src/system_stm32f0xx.c **** 
  88:Src/system_stm32f0xx.c **** 
  89:Src/system_stm32f0xx.c **** 
  90:Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_TypesDefinitions
ARM GAS  /tmp/ccp9Rqiy.s 			page 3


  91:Src/system_stm32f0xx.c ****   * @{
  92:Src/system_stm32f0xx.c ****   */
  93:Src/system_stm32f0xx.c **** 
  94:Src/system_stm32f0xx.c **** /**
  95:Src/system_stm32f0xx.c ****   * @}
  96:Src/system_stm32f0xx.c ****   */
  97:Src/system_stm32f0xx.c **** 
  98:Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Defines
  99:Src/system_stm32f0xx.c ****   * @{
 100:Src/system_stm32f0xx.c ****   */
 101:Src/system_stm32f0xx.c **** #if !defined  (HSE_VALUE)
 102:Src/system_stm32f0xx.c ****   #define HSE_VALUE    ((uint32_t)8000000) /*!< Default value of the External oscillator in Hz.
 103:Src/system_stm32f0xx.c ****                                                 This value can be provided and adapted by the user 
 104:Src/system_stm32f0xx.c **** #endif /* HSE_VALUE */
 105:Src/system_stm32f0xx.c **** 
 106:Src/system_stm32f0xx.c **** #if !defined  (HSI_VALUE)
 107:Src/system_stm32f0xx.c ****   #define HSI_VALUE    ((uint32_t)8000000) /*!< Default value of the Internal oscillator in Hz.
 108:Src/system_stm32f0xx.c ****                                                 This value can be provided and adapted by the user 
 109:Src/system_stm32f0xx.c **** #endif /* HSI_VALUE */
 110:Src/system_stm32f0xx.c **** 
 111:Src/system_stm32f0xx.c **** #if !defined (HSI48_VALUE)
 112:Src/system_stm32f0xx.c **** #define HSI48_VALUE    ((uint32_t)48000000) /*!< Default value of the HSI48 Internal oscillator in 
 113:Src/system_stm32f0xx.c ****                                                  This value can be provided and adapted by the user
 114:Src/system_stm32f0xx.c **** #endif /* HSI48_VALUE */
 115:Src/system_stm32f0xx.c **** /**
 116:Src/system_stm32f0xx.c ****   * @}
 117:Src/system_stm32f0xx.c ****   */
 118:Src/system_stm32f0xx.c **** 
 119:Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Macros
 120:Src/system_stm32f0xx.c ****   * @{
 121:Src/system_stm32f0xx.c ****   */
 122:Src/system_stm32f0xx.c **** 
 123:Src/system_stm32f0xx.c **** /**
 124:Src/system_stm32f0xx.c ****   * @}
 125:Src/system_stm32f0xx.c ****   */
 126:Src/system_stm32f0xx.c **** 
 127:Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Variables
 128:Src/system_stm32f0xx.c ****   * @{
 129:Src/system_stm32f0xx.c ****   */
 130:Src/system_stm32f0xx.c ****   /* This variable is updated in three ways:
 131:Src/system_stm32f0xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 132:Src/system_stm32f0xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 133:Src/system_stm32f0xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
 134:Src/system_stm32f0xx.c ****          Note: If you use this function to configure the system clock there is no need to
 135:Src/system_stm32f0xx.c ****                call the 2 first functions listed above, since SystemCoreClock variable is
 136:Src/system_stm32f0xx.c ****                updated automatically.
 137:Src/system_stm32f0xx.c ****   */
 138:Src/system_stm32f0xx.c **** uint32_t SystemCoreClock = 8000000;
 139:Src/system_stm32f0xx.c **** 
 140:Src/system_stm32f0xx.c **** const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 141:Src/system_stm32f0xx.c **** const uint8_t APBPrescTable[8]  = {0, 0, 0, 0, 1, 2, 3, 4};
 142:Src/system_stm32f0xx.c **** 
 143:Src/system_stm32f0xx.c **** /**
 144:Src/system_stm32f0xx.c ****   * @}
 145:Src/system_stm32f0xx.c ****   */
 146:Src/system_stm32f0xx.c **** 
 147:Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_FunctionPrototypes
ARM GAS  /tmp/ccp9Rqiy.s 			page 4


 148:Src/system_stm32f0xx.c ****   * @{
 149:Src/system_stm32f0xx.c ****   */
 150:Src/system_stm32f0xx.c **** 
 151:Src/system_stm32f0xx.c **** /**
 152:Src/system_stm32f0xx.c ****   * @}
 153:Src/system_stm32f0xx.c ****   */
 154:Src/system_stm32f0xx.c **** 
 155:Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Functions
 156:Src/system_stm32f0xx.c ****   * @{
 157:Src/system_stm32f0xx.c ****   */
 158:Src/system_stm32f0xx.c **** 
 159:Src/system_stm32f0xx.c **** /**
 160:Src/system_stm32f0xx.c ****   * @brief  Setup the microcontroller system.
 161:Src/system_stm32f0xx.c ****   *         Initialize the default HSI clock source, vector table location and the PLL configuratio
 162:Src/system_stm32f0xx.c ****   * @param  None
 163:Src/system_stm32f0xx.c ****   * @retval None
 164:Src/system_stm32f0xx.c ****   */
 165:Src/system_stm32f0xx.c ****   void (*SysMemBootJump)(void);
 166:Src/system_stm32f0xx.c **** 
 167:Src/system_stm32f0xx.c ****   /**
 168:Src/system_stm32f0xx.c ****     * @brief  Setup the microcontroller system.
 169:Src/system_stm32f0xx.c ****     *         Initialize the default HSI clock source, vector table location and the PLL configurat
 170:Src/system_stm32f0xx.c ****     * @param  None
 171:Src/system_stm32f0xx.c ****     * @retval None
 172:Src/system_stm32f0xx.c ****     */
 173:Src/system_stm32f0xx.c ****   void SystemInit(void)
 174:Src/system_stm32f0xx.c ****   {
  26              		.loc 1 174 0
  27              		.cfi_startproc
  28 0000 08B5     		push	{r3, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 3, -8
  32              		.cfi_offset 14, -4
 175:Src/system_stm32f0xx.c **** 
 176:Src/system_stm32f0xx.c ****     if ( *((unsigned long *)0x20003FF0) == 0xDEADBEEF ) {
  33              		.loc 1 176 0
  34 0002 1A4B     		ldr	r3, .L4
  35 0004 1A68     		ldr	r2, [r3]
  36 0006 1A4B     		ldr	r3, .L4+4
  37 0008 9A42     		cmp	r2, r3
  38 000a 0BD1     		bne	.L2
 177:Src/system_stm32f0xx.c ****          *((unsigned long *)0x20003FF0) =  0xCAFEFEED; // Reset our trigger
  39              		.loc 1 177 0
  40 000c 194A     		ldr	r2, .L4+8
  41 000e 174B     		ldr	r3, .L4
  42 0010 1A60     		str	r2, [r3]
  43              	.LVL0:
  44              	.LBB4:
  45              	.LBB5:
  46              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
ARM GAS  /tmp/ccp9Rqiy.s 			page 5


   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccp9Rqiy.s 			page 6


  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccp9Rqiy.s 			page 7


 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
ARM GAS  /tmp/ccp9Rqiy.s 			page 8


 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
  47              		.loc 2 190 0
  48 0012 194B     		ldr	r3, .L4+12
  49              	@ 190 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  50 0014 83F30888 		MSR msp, r3
  51              	
  52              	@ 0 "" 2
  53              		.code	16
  54              	.LBE5:
  55              	.LBE4:
 178:Src/system_stm32f0xx.c ****         __set_MSP(0x20002250);
 179:Src/system_stm32f0xx.c ****                                                        // 0x1fffC800 is "System Memory" start addre
 180:Src/system_stm32f0xx.c ****         SysMemBootJump = (void (*)(void)) (*((uint32_t *) 0x1fffC804)); // Point the PC to the Syst
  56              		.loc 1 180 0
  57 0018 184B     		ldr	r3, .L4+16
  58 001a 1B68     		ldr	r3, [r3]
  59 001c 184A     		ldr	r2, .L4+20
  60 001e 1360     		str	r3, [r2]
 181:Src/system_stm32f0xx.c ****         SysMemBootJump();
  61              		.loc 1 181 0
  62 0020 9847     		blx	r3
  63              	.LVL1:
  64              	.L3:
  65 0022 FEE7     		b	.L3
  66              	.LVL2:
  67              	.L2:
 182:Src/system_stm32f0xx.c ****         while (1);
 183:Src/system_stm32f0xx.c ****     }
 184:Src/system_stm32f0xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 185:Src/system_stm32f0xx.c ****   /* Set HSION bit */
 186:Src/system_stm32f0xx.c ****   RCC->CR |= (uint32_t)0x00000001U;
  68              		.loc 1 186 0
  69 0024 174B     		ldr	r3, .L4+24
  70 0026 1968     		ldr	r1, [r3]
  71 0028 0122     		mov	r2, #1
  72 002a 1143     		orr	r1, r2
  73 002c 1960     		str	r1, [r3]
 187:Src/system_stm32f0xx.c **** 
 188:Src/system_stm32f0xx.c **** #if defined (STM32F051x8) || defined (STM32F058x8)
 189:Src/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
 190:Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 191:Src/system_stm32f0xx.c **** #else
 192:Src/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
 193:Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0x08FFB80CU;
  74              		.loc 1 193 0
ARM GAS  /tmp/ccp9Rqiy.s 			page 9


  75 002e 5868     		ldr	r0, [r3, #4]
  76 0030 1549     		ldr	r1, .L4+28
  77 0032 0140     		and	r1, r0
  78 0034 5960     		str	r1, [r3, #4]
 194:Src/system_stm32f0xx.c **** #endif /* STM32F051x8 or STM32F058x8 */
 195:Src/system_stm32f0xx.c **** 
 196:Src/system_stm32f0xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 197:Src/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFFU;
  79              		.loc 1 197 0
  80 0036 1868     		ldr	r0, [r3]
  81 0038 1449     		ldr	r1, .L4+32
  82 003a 0140     		and	r1, r0
  83 003c 1960     		str	r1, [r3]
 198:Src/system_stm32f0xx.c **** 
 199:Src/system_stm32f0xx.c ****   /* Reset HSEBYP bit */
 200:Src/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFFU;
  84              		.loc 1 200 0
  85 003e 1868     		ldr	r0, [r3]
  86 0040 1349     		ldr	r1, .L4+36
  87 0042 0140     		and	r1, r0
  88 0044 1960     		str	r1, [r3]
 201:Src/system_stm32f0xx.c **** 
 202:Src/system_stm32f0xx.c ****   /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 203:Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
  89              		.loc 1 203 0
  90 0046 5868     		ldr	r0, [r3, #4]
  91 0048 1249     		ldr	r1, .L4+40
  92 004a 0140     		and	r1, r0
  93 004c 5960     		str	r1, [r3, #4]
 204:Src/system_stm32f0xx.c **** 
 205:Src/system_stm32f0xx.c ****   /* Reset PREDIV[3:0] bits */
 206:Src/system_stm32f0xx.c ****   RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
  94              		.loc 1 206 0
  95 004e D96A     		ldr	r1, [r3, #44]
  96 0050 0F20     		mov	r0, #15
  97 0052 8143     		bic	r1, r0
  98 0054 D962     		str	r1, [r3, #44]
 207:Src/system_stm32f0xx.c **** 
 208:Src/system_stm32f0xx.c **** #if defined (STM32F072xB) || defined (STM32F078xx)
 209:Src/system_stm32f0xx.c ****   /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
 210:Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
  99              		.loc 1 210 0
 100 0056 186B     		ldr	r0, [r3, #48]
 101 0058 0F49     		ldr	r1, .L4+44
 102 005a 0140     		and	r1, r0
 103 005c 1963     		str	r1, [r3, #48]
 211:Src/system_stm32f0xx.c **** #elif defined (STM32F071xB)
 212:Src/system_stm32f0xx.c ****   /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 213:Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
 214:Src/system_stm32f0xx.c **** #elif defined (STM32F091xC) || defined (STM32F098xx)
 215:Src/system_stm32f0xx.c ****   /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 216:Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 217:Src/system_stm32f0xx.c **** #elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038
 218:Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
 219:Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 220:Src/system_stm32f0xx.c **** #elif defined (STM32F051x8) || defined (STM32F058xx)
 221:Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
ARM GAS  /tmp/ccp9Rqiy.s 			page 10


 222:Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 223:Src/system_stm32f0xx.c **** #elif defined (STM32F042x6) || defined (STM32F048xx)
 224:Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
 225:Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 226:Src/system_stm32f0xx.c **** #elif defined (STM32F070x6) || defined (STM32F070xB)
 227:Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
 228:Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 229:Src/system_stm32f0xx.c ****   /* Set default USB clock to PLLCLK, since there is no HSI48 */
 230:Src/system_stm32f0xx.c ****   RCC->CFGR3 |= (uint32_t)0x00000080U;
 231:Src/system_stm32f0xx.c **** #else
 232:Src/system_stm32f0xx.c ****  #warning "No target selected"
 233:Src/system_stm32f0xx.c **** #endif
 234:Src/system_stm32f0xx.c **** 
 235:Src/system_stm32f0xx.c ****   /* Reset HSI14 bit */
 236:Src/system_stm32f0xx.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 104              		.loc 1 236 0
 105 005e 596B     		ldr	r1, [r3, #52]
 106 0060 9143     		bic	r1, r2
 107 0062 5963     		str	r1, [r3, #52]
 237:Src/system_stm32f0xx.c **** 
 238:Src/system_stm32f0xx.c ****   /* Disable all interrupts */
 239:Src/system_stm32f0xx.c ****   RCC->CIR = 0x00000000U;
 108              		.loc 1 239 0
 109 0064 0022     		mov	r2, #0
 110 0066 9A60     		str	r2, [r3, #8]
 240:Src/system_stm32f0xx.c **** 
 241:Src/system_stm32f0xx.c **** }
 111              		.loc 1 241 0
 112              		@ sp needed
 113 0068 08BD     		pop	{r3, pc}
 114              	.L5:
 115 006a C046     		.align	2
 116              	.L4:
 117 006c F03F0020 		.word	536887280
 118 0070 EFBEADDE 		.word	-559038737
 119 0074 EDFEFECA 		.word	-889258259
 120 0078 50220020 		.word	536879696
 121 007c 04C8FF1F 		.word	536856580
 122 0080 00000000 		.word	SysMemBootJump
 123 0084 00100240 		.word	1073876992
 124 0088 0CB8FF08 		.word	150976524
 125 008c FFFFF6FE 		.word	-17367041
 126 0090 FFFFFBFF 		.word	-262145
 127 0094 FFFFC0FF 		.word	-4128769
 128 0098 2CFEFCFF 		.word	-197076
 129              		.cfi_endproc
 130              	.LFE34:
 132              		.global	__aeabi_uidiv
 133              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 134              		.align	2
 135              		.global	SystemCoreClockUpdate
 136              		.code	16
 137              		.thumb_func
 139              	SystemCoreClockUpdate:
 140              	.LFB35:
 242:Src/system_stm32f0xx.c **** 
 243:Src/system_stm32f0xx.c **** /**
ARM GAS  /tmp/ccp9Rqiy.s 			page 11


 244:Src/system_stm32f0xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 245:Src/system_stm32f0xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 246:Src/system_stm32f0xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 247:Src/system_stm32f0xx.c ****   *         other parameters.
 248:Src/system_stm32f0xx.c ****   *
 249:Src/system_stm32f0xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 250:Src/system_stm32f0xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 251:Src/system_stm32f0xx.c ****   *         based on this variable will be incorrect.
 252:Src/system_stm32f0xx.c ****   *
 253:Src/system_stm32f0xx.c ****   * @note   - The system frequency computed by this function is not the real
 254:Src/system_stm32f0xx.c ****   *           frequency in the chip. It is calculated based on the predefined
 255:Src/system_stm32f0xx.c ****   *           constant and the selected clock source:
 256:Src/system_stm32f0xx.c ****   *
 257:Src/system_stm32f0xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 258:Src/system_stm32f0xx.c ****   *
 259:Src/system_stm32f0xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 260:Src/system_stm32f0xx.c ****   *
 261:Src/system_stm32f0xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
 262:Src/system_stm32f0xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 263:Src/system_stm32f0xx.c ****   *
 264:Src/system_stm32f0xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f0xx_hal.h file (default value
 265:Src/system_stm32f0xx.c ****   *             8 MHz) but the real value may vary depending on the variations
 266:Src/system_stm32f0xx.c ****   *             in voltage and temperature.
 267:Src/system_stm32f0xx.c ****   *
 268:Src/system_stm32f0xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f0xx_hal.h file (default value
 269:Src/system_stm32f0xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 270:Src/system_stm32f0xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 271:Src/system_stm32f0xx.c ****   *              have wrong result.
 272:Src/system_stm32f0xx.c ****   *
 273:Src/system_stm32f0xx.c ****   *         - The result of this function could be not correct when using fractional
 274:Src/system_stm32f0xx.c ****   *           value for HSE crystal.
 275:Src/system_stm32f0xx.c ****   *
 276:Src/system_stm32f0xx.c ****   * @param  None
 277:Src/system_stm32f0xx.c ****   * @retval None
 278:Src/system_stm32f0xx.c ****   */
 279:Src/system_stm32f0xx.c **** void SystemCoreClockUpdate (void)
 280:Src/system_stm32f0xx.c **** {
 141              		.loc 1 280 0
 142              		.cfi_startproc
 143 0000 10B5     		push	{r4, lr}
 144              	.LCFI1:
 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 4, -8
 147              		.cfi_offset 14, -4
 148              	.LVL3:
 281:Src/system_stm32f0xx.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 282:Src/system_stm32f0xx.c **** 
 283:Src/system_stm32f0xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 284:Src/system_stm32f0xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 149              		.loc 1 284 0
 150 0002 254B     		ldr	r3, .L15
 151 0004 5B68     		ldr	r3, [r3, #4]
 152 0006 0C22     		mov	r2, #12
 153 0008 1340     		and	r3, r2
 154              	.LVL4:
 285:Src/system_stm32f0xx.c **** 
 286:Src/system_stm32f0xx.c ****   switch (tmp)
ARM GAS  /tmp/ccp9Rqiy.s 			page 12


 155              		.loc 1 286 0
 156 000a 042B     		cmp	r3, #4
 157 000c 07D0     		beq	.L8
 158 000e 082B     		cmp	r3, #8
 159 0010 09D0     		beq	.L9
 160 0012 002B     		cmp	r3, #0
 161 0014 31D1     		bne	.L14
 287:Src/system_stm32f0xx.c ****   {
 288:Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
 289:Src/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 162              		.loc 1 289 0
 163 0016 214A     		ldr	r2, .L15+4
 164 0018 214B     		ldr	r3, .L15+8
 165              	.LVL5:
 166 001a 1A60     		str	r2, [r3]
 290:Src/system_stm32f0xx.c ****       break;
 167              		.loc 1 290 0
 168 001c 30E0     		b	.L11
 169              	.LVL6:
 170              	.L8:
 291:Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
 292:Src/system_stm32f0xx.c ****       SystemCoreClock = HSE_VALUE;
 171              		.loc 1 292 0
 172 001e 1F4A     		ldr	r2, .L15+4
 173 0020 1F4B     		ldr	r3, .L15+8
 174              	.LVL7:
 175 0022 1A60     		str	r2, [r3]
 293:Src/system_stm32f0xx.c ****       break;
 176              		.loc 1 293 0
 177 0024 2CE0     		b	.L11
 178              	.LVL8:
 179              	.L9:
 294:Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
 295:Src/system_stm32f0xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 296:Src/system_stm32f0xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 180              		.loc 1 296 0
 181 0026 1C4B     		ldr	r3, .L15
 182              	.LVL9:
 183 0028 5868     		ldr	r0, [r3, #4]
 184 002a 8002     		lsl	r0, r0, #10
 185              	.LVL10:
 297:Src/system_stm32f0xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 186              		.loc 1 297 0
 187 002c 5968     		ldr	r1, [r3, #4]
 188 002e C022     		mov	r2, #192
 189 0030 5202     		lsl	r2, r2, #9
 190 0032 0A40     		and	r2, r1
 191              	.LVL11:
 298:Src/system_stm32f0xx.c ****       pllmull = ( pllmull >> 18) + 2;
 192              		.loc 1 298 0
 193 0034 000F     		lsr	r0, r0, #28
 194 0036 841C     		add	r4, r0, #2
 195              	.LVL12:
 299:Src/system_stm32f0xx.c ****       predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 196              		.loc 1 299 0
 197 0038 DB6A     		ldr	r3, [r3, #44]
 198 003a 0F21     		mov	r1, #15
ARM GAS  /tmp/ccp9Rqiy.s 			page 13


 199 003c 1940     		and	r1, r3
 200 003e 0131     		add	r1, r1, #1
 201              	.LVL13:
 300:Src/system_stm32f0xx.c **** 
 301:Src/system_stm32f0xx.c ****       if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 202              		.loc 1 301 0
 203 0040 8023     		mov	r3, #128
 204 0042 5B02     		lsl	r3, r3, #9
 205 0044 9A42     		cmp	r2, r3
 206 0046 06D1     		bne	.L12
 302:Src/system_stm32f0xx.c ****       {
 303:Src/system_stm32f0xx.c ****         /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
 304:Src/system_stm32f0xx.c ****         SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 207              		.loc 1 304 0
 208 0048 1448     		ldr	r0, .L15+4
 209 004a FFF7FEFF 		bl	__aeabi_uidiv
 210              	.LVL14:
 211 004e 4443     		mul	r4, r0
 212              	.LVL15:
 213 0050 134B     		ldr	r3, .L15+8
 214 0052 1C60     		str	r4, [r3]
 215 0054 14E0     		b	.L11
 216              	.LVL16:
 217              	.L12:
 305:Src/system_stm32f0xx.c ****       }
 306:Src/system_stm32f0xx.c **** #if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) ||
 307:Src/system_stm32f0xx.c ****       else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 218              		.loc 1 307 0
 219 0056 C023     		mov	r3, #192
 220 0058 5B02     		lsl	r3, r3, #9
 221 005a 9A42     		cmp	r2, r3
 222 005c 06D1     		bne	.L13
 308:Src/system_stm32f0xx.c ****       {
 309:Src/system_stm32f0xx.c ****         /* HSI48 used as PLL clock source : SystemCoreClock = HSI48/PREDIV * PLLMUL */
 310:Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 223              		.loc 1 310 0
 224 005e 1148     		ldr	r0, .L15+12
 225 0060 FFF7FEFF 		bl	__aeabi_uidiv
 226              	.LVL17:
 227 0064 4443     		mul	r4, r0
 228              	.LVL18:
 229 0066 0E4B     		ldr	r3, .L15+8
 230 0068 1C60     		str	r4, [r3]
 231 006a 09E0     		b	.L11
 232              	.LVL19:
 233              	.L13:
 311:Src/system_stm32f0xx.c ****       }
 312:Src/system_stm32f0xx.c **** #endif /* STM32F042x6 || STM32F048xx || STM32F072xB || STM32F078xx || STM32F091xC || STM32F098xx */
 313:Src/system_stm32f0xx.c ****       else
 314:Src/system_stm32f0xx.c ****       {
 315:Src/system_stm32f0xx.c **** #if defined(STM32F042x6) || defined(STM32F048xx)  || defined(STM32F070x6) \
 316:Src/system_stm32f0xx.c ****  || defined(STM32F078xx) || defined(STM32F071xB)  || defined(STM32F072xB) \
 317:Src/system_stm32f0xx.c ****  || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx)  || defined(STM32F030xC)
 318:Src/system_stm32f0xx.c ****         /* HSI used as PLL clock source : SystemCoreClock = HSI/PREDIV * PLLMUL */
 319:Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 234              		.loc 1 319 0
 235 006c 0B48     		ldr	r0, .L15+4
ARM GAS  /tmp/ccp9Rqiy.s 			page 14


 236 006e FFF7FEFF 		bl	__aeabi_uidiv
 237              	.LVL20:
 238 0072 4443     		mul	r4, r0
 239              	.LVL21:
 240 0074 0A4B     		ldr	r3, .L15+8
 241 0076 1C60     		str	r4, [r3]
 242 0078 02E0     		b	.L11
 243              	.LVL22:
 244              	.L14:
 320:Src/system_stm32f0xx.c **** #else
 321:Src/system_stm32f0xx.c ****         /* HSI used as PLL clock source : SystemCoreClock = HSI/2 * PLLMUL */
 322:Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 323:Src/system_stm32f0xx.c **** #endif /* STM32F042x6 || STM32F048xx || STM32F070x6 ||
 324:Src/system_stm32f0xx.c ****           STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
 325:Src/system_stm32f0xx.c ****           STM32F091xC || STM32F098xx || STM32F030xC */
 326:Src/system_stm32f0xx.c ****       }
 327:Src/system_stm32f0xx.c ****       break;
 328:Src/system_stm32f0xx.c ****     default: /* HSI used as system clock */
 329:Src/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 245              		.loc 1 329 0
 246 007a 084A     		ldr	r2, .L15+4
 247 007c 084B     		ldr	r3, .L15+8
 248              	.LVL23:
 249 007e 1A60     		str	r2, [r3]
 250              	.LVL24:
 251              	.L11:
 330:Src/system_stm32f0xx.c ****       break;
 331:Src/system_stm32f0xx.c ****   }
 332:Src/system_stm32f0xx.c ****   /* Compute HCLK clock frequency ----------------*/
 333:Src/system_stm32f0xx.c ****   /* Get HCLK prescaler */
 334:Src/system_stm32f0xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 252              		.loc 1 334 0
 253 0080 054B     		ldr	r3, .L15
 254 0082 5B68     		ldr	r3, [r3, #4]
 255 0084 1B06     		lsl	r3, r3, #24
 256 0086 1B0F     		lsr	r3, r3, #28
 257 0088 074A     		ldr	r2, .L15+16
 258 008a D25C     		ldrb	r2, [r2, r3]
 259              	.LVL25:
 335:Src/system_stm32f0xx.c ****   /* HCLK clock frequency */
 336:Src/system_stm32f0xx.c ****   SystemCoreClock >>= tmp;
 260              		.loc 1 336 0
 261 008c 044B     		ldr	r3, .L15+8
 262 008e 1968     		ldr	r1, [r3]
 263 0090 D140     		lsr	r1, r1, r2
 264 0092 1960     		str	r1, [r3]
 337:Src/system_stm32f0xx.c **** }
 265              		.loc 1 337 0
 266              		@ sp needed
 267 0094 10BD     		pop	{r4, pc}
 268              	.L16:
 269 0096 C046     		.align	2
 270              	.L15:
 271 0098 00100240 		.word	1073876992
 272 009c 00127A00 		.word	8000000
 273 00a0 00000000 		.word	.LANCHOR0
 274 00a4 006CDC02 		.word	48000000
ARM GAS  /tmp/ccp9Rqiy.s 			page 15


 275 00a8 00000000 		.word	.LANCHOR1
 276              		.cfi_endproc
 277              	.LFE35:
 279              		.comm	SysMemBootJump,4,4
 280              		.global	APBPrescTable
 281              		.global	AHBPrescTable
 282              		.global	SystemCoreClock
 283              		.section	.rodata.AHBPrescTable,"a",%progbits
 284              		.align	2
 285              		.set	.LANCHOR1,. + 0
 288              	AHBPrescTable:
 289 0000 00       		.byte	0
 290 0001 00       		.byte	0
 291 0002 00       		.byte	0
 292 0003 00       		.byte	0
 293 0004 00       		.byte	0
 294 0005 00       		.byte	0
 295 0006 00       		.byte	0
 296 0007 00       		.byte	0
 297 0008 01       		.byte	1
 298 0009 02       		.byte	2
 299 000a 03       		.byte	3
 300 000b 04       		.byte	4
 301 000c 06       		.byte	6
 302 000d 07       		.byte	7
 303 000e 08       		.byte	8
 304 000f 09       		.byte	9
 305              		.section	.rodata.APBPrescTable,"a",%progbits
 306              		.align	2
 309              	APBPrescTable:
 310 0000 00       		.byte	0
 311 0001 00       		.byte	0
 312 0002 00       		.byte	0
 313 0003 00       		.byte	0
 314 0004 01       		.byte	1
 315 0005 02       		.byte	2
 316 0006 03       		.byte	3
 317 0007 04       		.byte	4
 318              		.section	.data.SystemCoreClock,"aw",%progbits
 319              		.align	2
 320              		.set	.LANCHOR0,. + 0
 323              	SystemCoreClock:
 324 0000 00127A00 		.word	8000000
 325              		.text
 326              	.Letext0:
 327              		.file 3 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_defaul
 328              		.file 4 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 329              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
ARM GAS  /tmp/ccp9Rqiy.s 			page 16


DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f0xx.c
     /tmp/ccp9Rqiy.s:18     .text.SystemInit:00000000 $t
     /tmp/ccp9Rqiy.s:23     .text.SystemInit:00000000 SystemInit
     /tmp/ccp9Rqiy.s:117    .text.SystemInit:0000006c $d
                            *COM*:00000004 SysMemBootJump
     /tmp/ccp9Rqiy.s:134    .text.SystemCoreClockUpdate:00000000 $t
     /tmp/ccp9Rqiy.s:139    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
     /tmp/ccp9Rqiy.s:271    .text.SystemCoreClockUpdate:00000098 $d
     /tmp/ccp9Rqiy.s:309    .rodata.APBPrescTable:00000000 APBPrescTable
     /tmp/ccp9Rqiy.s:288    .rodata.AHBPrescTable:00000000 AHBPrescTable
     /tmp/ccp9Rqiy.s:323    .data.SystemCoreClock:00000000 SystemCoreClock
     /tmp/ccp9Rqiy.s:284    .rodata.AHBPrescTable:00000000 $d
     /tmp/ccp9Rqiy.s:306    .rodata.APBPrescTable:00000000 $d
     /tmp/ccp9Rqiy.s:319    .data.SystemCoreClock:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
