ARM GAS  /tmp/ccijM0ES.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	2
  19              		.code	16
  20              		.thumb_func
  22              	MX_GPIO_Init:
  23              	.LFB41:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2018 STMicroelectronics International N.V.
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice,
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under
  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under
  32:Src/main.c    ****   *    this license.
  33:Src/main.c    ****   *
  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS"
ARM GAS  /tmp/ccijM0ES.s 			page 2


  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f0xx_hal.h"
  52:Src/main.c    **** #include "usb_device.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN Includes */
  55:Src/main.c    **** #include "device_conf.h"
  56:Src/main.c    **** #include "curemisc.h"
  57:Src/main.c    **** #include "curebuffer.h"
  58:Src/main.c    **** #include "usbd_midi_if.h"
  59:Src/main.c    **** #include "math.h"
  60:Src/main.c    **** 
  61:Src/main.c    **** /* USER CODE END Includes */
  62:Src/main.c    **** 
  63:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  64:Src/main.c    **** TIM_HandleTypeDef htim14;
  65:Src/main.c    **** TIM_HandleTypeDef htim15;
  66:Src/main.c    **** 
  67:Src/main.c    **** TIM_HandleTypeDef htim2;
  68:Src/main.c    **** 
  69:Src/main.c    **** DAC_HandleTypeDef hdac;
  70:Src/main.c    **** 
  71:Src/main.c    **** 
  72:Src/main.c    **** uint8_t uart_tx_dat;
  73:Src/main.c    **** /* USER CODE END PV */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  76:Src/main.c    **** void SystemClock_Config(void);
  77:Src/main.c    **** static void MX_GPIO_Init(void);
  78:Src/main.c    **** 
  79:Src/main.c    **** static void MX_TIM14_Init(void);
  80:Src/main.c    **** static void MX_TIM15_Init(void);
  81:Src/main.c    **** static void USER_TIM2_Init(void);
  82:Src/main.c    **** 
  83:Src/main.c    **** static void MX_DAC_Init(void);
  84:Src/main.c    **** 
  85:Src/main.c    **** /* USER CODE BEGIN PFP */
  86:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  87:Src/main.c    **** 
  88:Src/main.c    **** /* USER CODE END PFP */
  89:Src/main.c    **** 
  90:Src/main.c    **** /* USER CODE BEGIN 0 */
  91:Src/main.c    **** 
ARM GAS  /tmp/ccijM0ES.s 			page 3


  92:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  93:Src/main.c    **** {
  94:Src/main.c    **** 	if(htim->Instance == TIM14)
  95:Src/main.c    **** 	{
  96:Src/main.c    **** 		//HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
  97:Src/main.c    **** 		TIM2->CR1 = TIM2->CR1 | 1;
  98:Src/main.c    **** 	}
  99:Src/main.c    **** 	if(htim->Instance == TIM15)
 100:Src/main.c    **** 	{
 101:Src/main.c    **** 		//HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 102:Src/main.c    **** 		//TIM2->CR1 = TIM2->CR1 | 1;
 103:Src/main.c    **** 	}
 104:Src/main.c    **** }
 105:Src/main.c    **** 
 106:Src/main.c    **** /**
 107:Src/main.c    ****   * @brief  The application entry point.
 108:Src/main.c    ****   *
 109:Src/main.c    ****   * @retval None
 110:Src/main.c    ****   */
 111:Src/main.c    **** 
 112:Src/main.c    **** 
 113:Src/main.c    **** uint8_t midiBuffer[4];
 114:Src/main.c    **** uint8_t midiState = 0;
 115:Src/main.c    **** 
 116:Src/main.c    **** uint16_t curTone0 = 0;
 117:Src/main.c    **** uint16_t curTone1 = 0;
 118:Src/main.c    **** uint16_t curChannel = 0;
 119:Src/main.c    **** uint16_t lastTone0 = 0;
 120:Src/main.c    **** uint16_t lastTone1 = 0;
 121:Src/main.c    **** uint32_t curPeriode0 = 0;
 122:Src/main.c    **** uint32_t curPeriode1 = 0;
 123:Src/main.c    **** uint32_t noteTimeout = 0;
 124:Src/main.c    **** 
 125:Src/main.c    **** uint16_t freqs[16] = {0};
 126:Src/main.c    **** 
 127:Src/main.c    **** 
 128:Src/main.c    **** int main(void)
 129:Src/main.c    **** {
 130:Src/main.c    ****   /* USER CODE BEGIN 1 */
 131:Src/main.c    **** 
 132:Src/main.c    ****   /* USER CODE END 1 */
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 137:Src/main.c    ****   HAL_Init();
 138:Src/main.c    **** 
 139:Src/main.c    ****   /* USER CODE BEGIN Init */
 140:Src/main.c    **** 
 141:Src/main.c    ****   /* USER CODE END Init */
 142:Src/main.c    **** 
 143:Src/main.c    ****   /* Configure the system clock */
 144:Src/main.c    ****   SystemClock_Config();
 145:Src/main.c    **** 
 146:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 147:Src/main.c    **** 
 148:Src/main.c    ****   /* USER CODE END SysInit */
ARM GAS  /tmp/ccijM0ES.s 			page 4


 149:Src/main.c    **** 
 150:Src/main.c    ****   /* Initialize all configured peripherals */
 151:Src/main.c    ****   MX_GPIO_Init();
 152:Src/main.c    **** 	MX_DAC_Init();
 153:Src/main.c    **** 
 154:Src/main.c    **** 	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 155:Src/main.c    **** 	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 156:Src/main.c    **** 
 157:Src/main.c    **** 	MX_TIM14_Init();
 158:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim14);
 159:Src/main.c    **** 	TIM14->CR1 &= ~(1UL);
 160:Src/main.c    **** 
 161:Src/main.c    **** 	MX_TIM15_Init();
 162:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim15);
 163:Src/main.c    **** 	TIM15->CR1 &= ~(1UL);
 164:Src/main.c    **** 
 165:Src/main.c    **** 	USER_TIM2_Init();
 166:Src/main.c    **** 
 167:Src/main.c    **** 	HAL_TIM_Base_Start(&htim2);
 168:Src/main.c    **** 	HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 169:Src/main.c    **** 
 170:Src/main.c    ****   /* USER CODE BEGIN 2 */
 171:Src/main.c    **** 
 172:Src/main.c    ****   //USB-MIDI Init
 173:Src/main.c    ****   MX_USB_MIDI_INIT();
 174:Src/main.c    **** 
 175:Src/main.c    **** 
 176:Src/main.c    ****   if(FUNC_ERROR == midiInit() ){
 177:Src/main.c    **** 	  while(1){
 178:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 179:Src/main.c    **** 		  HAL_Delay(500);
 180:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 181:Src/main.c    **** 		  HAL_Delay(500);
 182:Src/main.c    **** 	  }
 183:Src/main.c    ****   }
 184:Src/main.c    **** 
 185:Src/main.c    ****   //Wait usb configuration.
 186:Src/main.c    ****   while(1){
 187:Src/main.c    **** 	  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 188:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 189:Src/main.c    **** 		  break;
 190:Src/main.c    **** 	  }else{
 191:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 192:Src/main.c    **** 	  }
 193:Src/main.c    ****   }
 194:Src/main.c    **** 
 195:Src/main.c    ****   while (1)
 196:Src/main.c    ****   {
 197:Src/main.c    ****   //Wait USB configuration when USB connection error has occurred.
 198:Src/main.c    **** 	  while(1){
 199:Src/main.c    **** 		  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 200:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 201:Src/main.c    **** 			  break;
 202:Src/main.c    **** 		  }else{
 203:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 204:Src/main.c    **** 			  HAL_Delay(200);
 205:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
ARM GAS  /tmp/ccijM0ES.s 			page 5


 206:Src/main.c    **** 			  HAL_Delay(200);
 207:Src/main.c    **** 		  }
 208:Src/main.c    **** 	  }
 209:Src/main.c    **** 
 210:Src/main.c    **** 		curTone0 = 0;
 211:Src/main.c    **** 		curTone1 = 0;
 212:Src/main.c    **** 
 213:Src/main.c    **** 	  for( int i = 0; i < 16; i++ ) { // find max pitch from all channels
 214:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 215:Src/main.c    **** 	          curTone1 = curTone0;
 216:Src/main.c    **** 	          curTone0 = freqs[i];
 217:Src/main.c    **** 	      }
 218:Src/main.c    **** 	      else if( freqs[i] > curTone1 ) {
 219:Src/main.c    **** 	          curTone1 = freqs[i];
 220:Src/main.c    **** 	      }
 221:Src/main.c    **** 	  }
 222:Src/main.c    **** 
 223:Src/main.c    **** 		if (curTone0 > 20 && curTone0 != lastTone0) { // play one tone using TIM14
 224:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 225:Src/main.c    **** 			TIM14->CNT = 0;
 226:Src/main.c    **** 			TIM14->ARR = curPeriode0;
 227:Src/main.c    **** 			TIM14->CR1 = TIM14->CR1 | 1;
 228:Src/main.c    **** 			lastTone0 = curTone0;
 229:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 230:Src/main.c    **** 
 231:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, SET);
 232:Src/main.c    **** 		} else if (curTone0 < 20 && curTone0 != lastTone0) {
 233:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 234:Src/main.c    **** 
 235:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, RESET);
 236:Src/main.c    **** 		}
 237:Src/main.c    **** 
 238:Src/main.c    **** 		if (curTone1 > 20 && curTone1 != lastTone1) { // play other polyphonic tone ussing TIM15
 239:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 240:Src/main.c    **** 			TIM15->CNT = 0;
 241:Src/main.c    **** 			TIM15->ARR = curPeriode1;
 242:Src/main.c    **** 			TIM15->CR1 = TIM15->CR1 | 1;
 243:Src/main.c    **** 			lastTone1 = curTone1;
 244:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 245:Src/main.c    **** 		} else if (curTone1 < 20 && curTone1 != lastTone1) {
 246:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 247:Src/main.c    **** 		}
 248:Src/main.c    **** 
 249:Src/main.c    **** 		if ((HAL_GetTick() - noteTimeout) > 1000) {
 250:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 251:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 252:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 253:Src/main.c    **** 				freqs[i] = 0;
 254:Src/main.c    **** 			}
 255:Src/main.c    **** 
 256:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, RESET);
 257:Src/main.c    **** 		}
 258:Src/main.c    **** 
 259:Src/main.c    **** 
 260:Src/main.c    **** 		//[USB-MIDI IN] to [MIDI JACK OUT]
 261:Src/main.c    **** 
 262:Src/main.c    **** 		if( FUNC_SUCCESS == midiGetFromUsbRx(0, &uart_tx_dat)){
ARM GAS  /tmp/ccijM0ES.s 			page 6


 263:Src/main.c    **** 			if (uart_tx_dat >> 7 == 1) {
 264:Src/main.c    **** 				midiBuffer[0] = uart_tx_dat;
 265:Src/main.c    **** 				midiBuffer[1] = 0;
 266:Src/main.c    **** 				midiBuffer[2] = 0;
 267:Src/main.c    **** 				midiState = 1;
 268:Src/main.c    **** 			} else if (midiState == 1) {
 269:Src/main.c    **** 				midiBuffer[1] = uart_tx_dat;
 270:Src/main.c    **** 				midiState = 2;
 271:Src/main.c    **** 			} else if (midiState == 2) {
 272:Src/main.c    **** 				midiBuffer[2] = uart_tx_dat;
 273:Src/main.c    **** 				midiState = 3;
 274:Src/main.c    **** 
 275:Src/main.c    **** 				if ((midiBuffer[0] & 0xF0) == 0x90) { // Note on, 2 data bytes
 276:Src/main.c    **** 					char key = midiBuffer[1];
 277:Src/main.c    **** 					char vel = midiBuffer[2];
 278:Src/main.c    **** 
 279:Src/main.c    **** 					uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 280:Src/main.c    **** 					curChannel = midiBuffer[0] & 0xF;
 281:Src/main.c    **** 					freqs[curChannel] = freq;
 282:Src/main.c    **** 
 283:Src/main.c    **** 
 284:Src/main.c    **** 				} if ((midiBuffer[0] &0xF0) == 0x80) { // Note off, 2 data bytes
 285:Src/main.c    **** 					char key = midiBuffer[1];
 286:Src/main.c    **** 					char vel = midiBuffer[2];
 287:Src/main.c    **** 
 288:Src/main.c    **** 					uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 289:Src/main.c    **** 
 290:Src/main.c    **** 					//if (freqs[midiBuffer[0] & 0xF] == freq) {
 291:Src/main.c    **** 					freqs[midiBuffer[0] & 0xF] = 0;
 292:Src/main.c    **** 					//}
 293:Src/main.c    **** 				}
 294:Src/main.c    **** 			}
 295:Src/main.c    **** 		}
 296:Src/main.c    **** 
 297:Src/main.c    **** 	//[MIDI JACK IN] to [USB-MIDI OUT]
 298:Src/main.c    **** 	//midiProcess();
 299:Src/main.c    **** 
 300:Src/main.c    **** 
 301:Src/main.c    ****   }
 302:Src/main.c    ****   /* USER CODE END 3 */
 303:Src/main.c    **** 
 304:Src/main.c    **** }
 305:Src/main.c    **** 
 306:Src/main.c    **** /** System Clock Configuration
 307:Src/main.c    **** */
 308:Src/main.c    **** void SystemClock_Config(void)
 309:Src/main.c    **** {
 310:Src/main.c    **** 
 311:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 312:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 313:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 314:Src/main.c    **** 
 315:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 316:Src/main.c    ****     */
 317:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 318:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 319:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
ARM GAS  /tmp/ccijM0ES.s 			page 7


 320:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 321:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 322:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 323:Src/main.c    ****   {
 324:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 325:Src/main.c    ****   }
 326:Src/main.c    **** 
 327:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 328:Src/main.c    ****     */
 329:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 330:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 331:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 332:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 333:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 334:Src/main.c    **** 
 335:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 336:Src/main.c    ****   {
 337:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 338:Src/main.c    ****   }
 339:Src/main.c    **** 
 340:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 341:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 342:Src/main.c    **** 
 343:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 344:Src/main.c    ****   {
 345:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 346:Src/main.c    ****   }
 347:Src/main.c    **** 
 348:Src/main.c    ****     /**Configure the Systick interrupt time
 349:Src/main.c    ****     */
 350:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 351:Src/main.c    **** 
 352:Src/main.c    ****     /**Configure the Systick
 353:Src/main.c    ****     */
 354:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 355:Src/main.c    **** 
 356:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 357:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 358:Src/main.c    **** }
 359:Src/main.c    **** 
 360:Src/main.c    **** 
 361:Src/main.c    **** /* TIM14 init function */
 362:Src/main.c    **** static void MX_TIM14_Init(void)
 363:Src/main.c    **** {
 364:Src/main.c    ****   htim14.Instance = TIM14;
 365:Src/main.c    ****   htim14.Init.Prescaler = 11;
 366:Src/main.c    ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 367:Src/main.c    ****   htim14.Init.Period = 1000;
 368:Src/main.c    ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 369:Src/main.c    ****   htim14.Init.RepetitionCounter = 0;
 370:Src/main.c    ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 371:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 372:Src/main.c    ****   {
 373:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 374:Src/main.c    ****   }
 375:Src/main.c    **** }
 376:Src/main.c    **** 
ARM GAS  /tmp/ccijM0ES.s 			page 8


 377:Src/main.c    **** /* TIM15 init function */
 378:Src/main.c    **** static void MX_TIM15_Init(void)
 379:Src/main.c    **** {
 380:Src/main.c    ****   htim15.Instance = TIM15;
 381:Src/main.c    ****   htim15.Init.Prescaler = 11;
 382:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 383:Src/main.c    ****   htim15.Init.Period = 1000;
 384:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 385:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 386:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 387:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 388:Src/main.c    ****   {
 389:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 390:Src/main.c    ****   }
 391:Src/main.c    **** }
 392:Src/main.c    **** 
 393:Src/main.c    **** static void USER_TIM2_Init(void) {
 394:Src/main.c    **** 	__HAL_RCC_TIM2_CLK_ENABLE();
 395:Src/main.c    **** 
 396:Src/main.c    **** 	TIM_ClockConfigTypeDef sClockSourceConfig;
 397:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig;
 398:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC;
 399:Src/main.c    **** 
 400:Src/main.c    **** 	htim2.Instance = TIM2;
 401:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 402:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 403:Src/main.c    **** 	htim2.Init.Period = 2000;
 404:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 405:Src/main.c    **** 	HAL_TIM_Base_Init(&htim2);
 406:Src/main.c    **** 
 407:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 408:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 409:Src/main.c    **** 	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 410:Src/main.c    **** 
 411:Src/main.c    **** 	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 412:Src/main.c    **** 	sConfigOC.Pulse = 1;
 413:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 414:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 415:Src/main.c    **** 	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 416:Src/main.c    **** 
 417:Src/main.c    **** 	HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE);
 418:Src/main.c    **** 	HAL_TIM_MspPostInit(&htim2);
 419:Src/main.c    **** }
 420:Src/main.c    **** 
 421:Src/main.c    **** /* DAC init function */
 422:Src/main.c    **** static void MX_DAC_Init(void)
 423:Src/main.c    **** {
 424:Src/main.c    **** 
 425:Src/main.c    ****   DAC_ChannelConfTypeDef sConfig;
 426:Src/main.c    **** 
 427:Src/main.c    ****     /**DAC Initialization
 428:Src/main.c    ****     */
 429:Src/main.c    ****   hdac.Instance = DAC;
 430:Src/main.c    ****   if (HAL_DAC_Init(&hdac) != HAL_OK)
 431:Src/main.c    ****   {
 432:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 433:Src/main.c    ****   }
ARM GAS  /tmp/ccijM0ES.s 			page 9


 434:Src/main.c    **** 
 435:Src/main.c    ****     /**DAC channel OUT1 config
 436:Src/main.c    ****     */
 437:Src/main.c    ****   sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 438:Src/main.c    ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 439:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 440:Src/main.c    ****   {
 441:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 442:Src/main.c    ****   }
 443:Src/main.c    **** 
 444:Src/main.c    **** }
 445:Src/main.c    **** 
 446:Src/main.c    **** 
 447:Src/main.c    **** 
 448:Src/main.c    **** /**
 449:Src/main.c    ****   * Enable DMA controller clock
 450:Src/main.c    ****   */
 451:Src/main.c    **** 
 452:Src/main.c    **** 
 453:Src/main.c    **** /** Configure pins as
 454:Src/main.c    ****         * Analog
 455:Src/main.c    ****         * Input
 456:Src/main.c    ****         * Output
 457:Src/main.c    ****         * EVENT_OUT
 458:Src/main.c    ****         * EXTI
 459:Src/main.c    **** */
 460:Src/main.c    **** static void MX_GPIO_Init(void)
 461:Src/main.c    **** {
  25              		.loc 1 461 0
  26              		.cfi_startproc
  27 0000 30B5     		push	{r4, r5, lr}
  28              	.LCFI0:
  29              		.cfi_def_cfa_offset 12
  30              		.cfi_offset 4, -12
  31              		.cfi_offset 5, -8
  32              		.cfi_offset 14, -4
  33 0002 89B0     		sub	sp, sp, #36
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 48
  36              	.LBB2:
 462:Src/main.c    **** 
 463:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 464:Src/main.c    **** 
 465:Src/main.c    ****   /* GPIO Ports Clock Enable */
 466:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  37              		.loc 1 466 0
  38 0004 184B     		ldr	r3, .L2
  39 0006 5969     		ldr	r1, [r3, #20]
  40 0008 8022     		mov	r2, #128
  41 000a D203     		lsl	r2, r2, #15
  42 000c 1143     		orr	r1, r2
  43 000e 5961     		str	r1, [r3, #20]
  44 0010 5969     		ldr	r1, [r3, #20]
  45 0012 0A40     		and	r2, r1
  46 0014 0092     		str	r2, [sp]
  47 0016 009A     		ldr	r2, [sp]
  48              	.LBE2:
ARM GAS  /tmp/ccijM0ES.s 			page 10


  49              	.LBB3:
 467:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  50              		.loc 1 467 0
  51 0018 5969     		ldr	r1, [r3, #20]
  52 001a 8022     		mov	r2, #128
  53 001c 9202     		lsl	r2, r2, #10
  54 001e 1143     		orr	r1, r2
  55 0020 5961     		str	r1, [r3, #20]
  56 0022 5969     		ldr	r1, [r3, #20]
  57 0024 0A40     		and	r2, r1
  58 0026 0192     		str	r2, [sp, #4]
  59 0028 019A     		ldr	r2, [sp, #4]
  60              	.LBE3:
  61              	.LBB4:
 468:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  62              		.loc 1 468 0
  63 002a 5969     		ldr	r1, [r3, #20]
  64 002c 8022     		mov	r2, #128
  65 002e D202     		lsl	r2, r2, #11
  66 0030 1143     		orr	r1, r2
  67 0032 5961     		str	r1, [r3, #20]
  68 0034 5B69     		ldr	r3, [r3, #20]
  69 0036 1A40     		and	r2, r3
  70 0038 0292     		str	r2, [sp, #8]
  71 003a 029B     		ldr	r3, [sp, #8]
  72              	.LBE4:
 469:Src/main.c    **** 
 470:Src/main.c    ****   /*Configure GPIO pin Output Level */
 471:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
  73              		.loc 1 471 0
  74 003c 9024     		mov	r4, #144
  75 003e E405     		lsl	r4, r4, #23
  76 0040 8425     		mov	r5, #132
  77 0042 2D02     		lsl	r5, r5, #8
  78 0044 201C     		mov	r0, r4
  79 0046 291C     		mov	r1, r5
  80 0048 0022     		mov	r2, #0
  81 004a FFF7FEFF 		bl	HAL_GPIO_WritePin
  82              	.LVL0:
 472:Src/main.c    **** 
 473:Src/main.c    ****   /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
 474:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
  83              		.loc 1 474 0
  84 004e 0395     		str	r5, [sp, #12]
 475:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  85              		.loc 1 475 0
  86 0050 0123     		mov	r3, #1
  87 0052 0493     		str	r3, [sp, #16]
 476:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  88              		.loc 1 476 0
  89 0054 0023     		mov	r3, #0
  90 0056 0593     		str	r3, [sp, #20]
 477:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  91              		.loc 1 477 0
  92 0058 0693     		str	r3, [sp, #24]
 478:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  93              		.loc 1 478 0
ARM GAS  /tmp/ccijM0ES.s 			page 11


  94 005a 201C     		mov	r0, r4
  95 005c 03A9     		add	r1, sp, #12
  96 005e FFF7FEFF 		bl	HAL_GPIO_Init
  97              	.LVL1:
 479:Src/main.c    **** }
  98              		.loc 1 479 0
  99 0062 09B0     		add	sp, sp, #36
 100              		@ sp needed
 101 0064 30BD     		pop	{r4, r5, pc}
 102              	.L3:
 103 0066 C046     		.align	2
 104              	.L2:
 105 0068 00100240 		.word	1073876992
 106              		.cfi_endproc
 107              	.LFE41:
 109              		.section	.text.USER_TIM2_Init,"ax",%progbits
 110              		.align	2
 111              		.code	16
 112              		.thumb_func
 114              	USER_TIM2_Init:
 115              	.LFB39:
 393:Src/main.c    **** static void USER_TIM2_Init(void) {
 116              		.loc 1 393 0
 117              		.cfi_startproc
 118 0000 70B5     		push	{r4, r5, r6, lr}
 119              	.LCFI2:
 120              		.cfi_def_cfa_offset 16
 121              		.cfi_offset 4, -16
 122              		.cfi_offset 5, -12
 123              		.cfi_offset 6, -8
 124              		.cfi_offset 14, -4
 125 0002 8AB0     		sub	sp, sp, #40
 126              	.LCFI3:
 127              		.cfi_def_cfa_offset 56
 128              	.LBB5:
 394:Src/main.c    **** 	__HAL_RCC_TIM2_CLK_ENABLE();
 129              		.loc 1 394 0
 130 0004 194B     		ldr	r3, .L5
 131 0006 DA69     		ldr	r2, [r3, #28]
 132 0008 0126     		mov	r6, #1
 133 000a 3243     		orr	r2, r6
 134 000c DA61     		str	r2, [r3, #28]
 135 000e DB69     		ldr	r3, [r3, #28]
 136 0010 3340     		and	r3, r6
 137 0012 0093     		str	r3, [sp]
 138 0014 009B     		ldr	r3, [sp]
 139              	.LBE5:
 400:Src/main.c    **** 	htim2.Instance = TIM2;
 140              		.loc 1 400 0
 141 0016 164C     		ldr	r4, .L5+4
 142 0018 8023     		mov	r3, #128
 143 001a DB05     		lsl	r3, r3, #23
 144 001c 2360     		str	r3, [r4]
 401:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 145              		.loc 1 401 0
 146 001e 0025     		mov	r5, #0
 147 0020 6560     		str	r5, [r4, #4]
ARM GAS  /tmp/ccijM0ES.s 			page 12


 402:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 148              		.loc 1 402 0
 149 0022 A560     		str	r5, [r4, #8]
 403:Src/main.c    **** 	htim2.Init.Period = 2000;
 150              		.loc 1 403 0
 151 0024 FA23     		mov	r3, #250
 152 0026 DB00     		lsl	r3, r3, #3
 153 0028 E360     		str	r3, [r4, #12]
 404:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 154              		.loc 1 404 0
 155 002a 8023     		mov	r3, #128
 156 002c 9B00     		lsl	r3, r3, #2
 157 002e 2361     		str	r3, [r4, #16]
 405:Src/main.c    **** 	HAL_TIM_Base_Init(&htim2);
 158              		.loc 1 405 0
 159 0030 201C     		mov	r0, r4
 160 0032 FFF7FEFF 		bl	HAL_TIM_Base_Init
 161              	.LVL2:
 407:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 162              		.loc 1 407 0
 163 0036 0895     		str	r5, [sp, #32]
 408:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 164              		.loc 1 408 0
 165 0038 0995     		str	r5, [sp, #36]
 409:Src/main.c    **** 	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 166              		.loc 1 409 0
 167 003a 201C     		mov	r0, r4
 168 003c 08A9     		add	r1, sp, #32
 169 003e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 170              	.LVL3:
 411:Src/main.c    **** 	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 171              		.loc 1 411 0
 172 0042 6023     		mov	r3, #96
 173 0044 0193     		str	r3, [sp, #4]
 412:Src/main.c    **** 	sConfigOC.Pulse = 1;
 174              		.loc 1 412 0
 175 0046 0296     		str	r6, [sp, #8]
 413:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 176              		.loc 1 413 0
 177 0048 0223     		mov	r3, #2
 178 004a 0393     		str	r3, [sp, #12]
 414:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 179              		.loc 1 414 0
 180 004c 0595     		str	r5, [sp, #20]
 415:Src/main.c    **** 	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 181              		.loc 1 415 0
 182 004e 201C     		mov	r0, r4
 183 0050 01A9     		add	r1, sp, #4
 184 0052 0422     		mov	r2, #4
 185 0054 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 186              	.LVL4:
 417:Src/main.c    **** 	HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE);
 187              		.loc 1 417 0
 188 0058 201C     		mov	r0, r4
 189 005a 0821     		mov	r1, #8
 190 005c FFF7FEFF 		bl	HAL_TIM_OnePulse_Init
 191              	.LVL5:
ARM GAS  /tmp/ccijM0ES.s 			page 13


 418:Src/main.c    **** 	HAL_TIM_MspPostInit(&htim2);
 192              		.loc 1 418 0
 193 0060 201C     		mov	r0, r4
 194 0062 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 195              	.LVL6:
 419:Src/main.c    **** }
 196              		.loc 1 419 0
 197 0066 0AB0     		add	sp, sp, #40
 198              		@ sp needed
 199 0068 70BD     		pop	{r4, r5, r6, pc}
 200              	.L6:
 201 006a C046     		.align	2
 202              	.L5:
 203 006c 00100240 		.word	1073876992
 204 0070 00000000 		.word	htim2
 205              		.cfi_endproc
 206              	.LFE39:
 208              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 209              		.align	2
 210              		.global	HAL_TIM_PeriodElapsedCallback
 211              		.code	16
 212              		.thumb_func
 214              	HAL_TIM_PeriodElapsedCallback:
 215              	.LFB34:
  93:Src/main.c    **** {
 216              		.loc 1 93 0
 217              		.cfi_startproc
 218              	.LVL7:
  94:Src/main.c    **** 	if(htim->Instance == TIM14)
 219              		.loc 1 94 0
 220 0000 0268     		ldr	r2, [r0]
 221 0002 054B     		ldr	r3, .L9
 222 0004 9A42     		cmp	r2, r3
 223 0006 05D1     		bne	.L7
  97:Src/main.c    **** 		TIM2->CR1 = TIM2->CR1 | 1;
 224              		.loc 1 97 0
 225 0008 8023     		mov	r3, #128
 226 000a DB05     		lsl	r3, r3, #23
 227 000c 1968     		ldr	r1, [r3]
 228 000e 0122     		mov	r2, #1
 229 0010 0A43     		orr	r2, r1
 230 0012 1A60     		str	r2, [r3]
 231              	.L7:
 104:Src/main.c    **** }
 232              		.loc 1 104 0
 233              		@ sp needed
 234 0014 7047     		bx	lr
 235              	.L10:
 236 0016 C046     		.align	2
 237              	.L9:
 238 0018 00200040 		.word	1073750016
 239              		.cfi_endproc
 240              	.LFE34:
 242              		.section	.text._Error_Handler,"ax",%progbits
 243              		.align	2
 244              		.global	_Error_Handler
 245              		.code	16
ARM GAS  /tmp/ccijM0ES.s 			page 14


 246              		.thumb_func
 248              	_Error_Handler:
 249              	.LFB42:
 480:Src/main.c    **** 
 481:Src/main.c    **** /* USER CODE BEGIN 4 */
 482:Src/main.c    **** 
 483:Src/main.c    **** /* USER CODE END 4 */
 484:Src/main.c    **** 
 485:Src/main.c    **** /**
 486:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 487:Src/main.c    ****   * @param  file: The file name as string.
 488:Src/main.c    ****   * @param  line: The line in file as a number.
 489:Src/main.c    ****   * @retval None
 490:Src/main.c    ****   */
 491:Src/main.c    **** void _Error_Handler(char *file, int line)
 492:Src/main.c    **** {
 250              		.loc 1 492 0
 251              		.cfi_startproc
 252              	.LVL8:
 253              	.L12:
 254 0000 FEE7     		b	.L12
 255              		.cfi_endproc
 256              	.LFE42:
 258 0002 C046     		.section	.text.MX_DAC_Init,"ax",%progbits
 259              		.align	2
 260              		.code	16
 261              		.thumb_func
 263              	MX_DAC_Init:
 264              	.LFB40:
 423:Src/main.c    **** {
 265              		.loc 1 423 0
 266              		.cfi_startproc
 423:Src/main.c    **** {
 267              		.loc 1 423 0
 268 0000 00B5     		push	{lr}
 269              	.LCFI4:
 270              		.cfi_def_cfa_offset 4
 271              		.cfi_offset 14, -4
 272 0002 83B0     		sub	sp, sp, #12
 273              	.LCFI5:
 274              		.cfi_def_cfa_offset 16
 429:Src/main.c    ****   hdac.Instance = DAC;
 275              		.loc 1 429 0
 276 0004 0E48     		ldr	r0, .L16
 277 0006 0F4B     		ldr	r3, .L16+4
 278 0008 0360     		str	r3, [r0]
 430:Src/main.c    ****   if (HAL_DAC_Init(&hdac) != HAL_OK)
 279              		.loc 1 430 0
 280 000a FFF7FEFF 		bl	HAL_DAC_Init
 281              	.LVL9:
 282 000e 0028     		cmp	r0, #0
 283 0010 04D0     		beq	.L14
 432:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 284              		.loc 1 432 0
 285 0012 0D48     		ldr	r0, .L16+8
 286 0014 D821     		mov	r1, #216
 287 0016 4900     		lsl	r1, r1, #1
ARM GAS  /tmp/ccijM0ES.s 			page 15


 288 0018 FFF7FEFF 		bl	_Error_Handler
 289              	.LVL10:
 290              	.L14:
 437:Src/main.c    ****   sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 291              		.loc 1 437 0
 292 001c 0023     		mov	r3, #0
 293 001e 0093     		str	r3, [sp]
 438:Src/main.c    ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 294              		.loc 1 438 0
 295 0020 0193     		str	r3, [sp, #4]
 439:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 296              		.loc 1 439 0
 297 0022 0748     		ldr	r0, .L16
 298 0024 6946     		mov	r1, sp
 299 0026 0022     		mov	r2, #0
 300 0028 FFF7FEFF 		bl	HAL_DAC_ConfigChannel
 301              	.LVL11:
 302 002c 0028     		cmp	r0, #0
 303 002e 04D0     		beq	.L13
 441:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 304              		.loc 1 441 0
 305 0030 0548     		ldr	r0, .L16+8
 306 0032 BA21     		mov	r1, #186
 307 0034 FF31     		add	r1, r1, #255
 308 0036 FFF7FEFF 		bl	_Error_Handler
 309              	.LVL12:
 310              	.L13:
 444:Src/main.c    **** }
 311              		.loc 1 444 0
 312 003a 03B0     		add	sp, sp, #12
 313              		@ sp needed
 314 003c 00BD     		pop	{pc}
 315              	.L17:
 316 003e C046     		.align	2
 317              	.L16:
 318 0040 00000000 		.word	hdac
 319 0044 00740040 		.word	1073771520
 320 0048 00000000 		.word	.LC2
 321              		.cfi_endproc
 322              	.LFE40:
 324              		.section	.text.MX_TIM14_Init,"ax",%progbits
 325              		.align	2
 326              		.code	16
 327              		.thumb_func
 329              	MX_TIM14_Init:
 330              	.LFB37:
 363:Src/main.c    **** {
 331              		.loc 1 363 0
 332              		.cfi_startproc
 333 0000 08B5     		push	{r3, lr}
 334              	.LCFI6:
 335              		.cfi_def_cfa_offset 8
 336              		.cfi_offset 3, -8
 337              		.cfi_offset 14, -4
 364:Src/main.c    ****   htim14.Instance = TIM14;
 338              		.loc 1 364 0
 339 0002 0C48     		ldr	r0, .L20
ARM GAS  /tmp/ccijM0ES.s 			page 16


 340 0004 0C4B     		ldr	r3, .L20+4
 341 0006 0360     		str	r3, [r0]
 365:Src/main.c    ****   htim14.Init.Prescaler = 11;
 342              		.loc 1 365 0
 343 0008 0B23     		mov	r3, #11
 344 000a 4360     		str	r3, [r0, #4]
 366:Src/main.c    ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 345              		.loc 1 366 0
 346 000c 0023     		mov	r3, #0
 347 000e 8360     		str	r3, [r0, #8]
 367:Src/main.c    ****   htim14.Init.Period = 1000;
 348              		.loc 1 367 0
 349 0010 FA22     		mov	r2, #250
 350 0012 9200     		lsl	r2, r2, #2
 351 0014 C260     		str	r2, [r0, #12]
 368:Src/main.c    ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 352              		.loc 1 368 0
 353 0016 8022     		mov	r2, #128
 354 0018 9200     		lsl	r2, r2, #2
 355 001a 0261     		str	r2, [r0, #16]
 369:Src/main.c    ****   htim14.Init.RepetitionCounter = 0;
 356              		.loc 1 369 0
 357 001c 4361     		str	r3, [r0, #20]
 370:Src/main.c    ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 358              		.loc 1 370 0
 359 001e 8361     		str	r3, [r0, #24]
 371:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 360              		.loc 1 371 0
 361 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 362              	.LVL13:
 363 0024 0028     		cmp	r0, #0
 364 0026 04D0     		beq	.L18
 373:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 365              		.loc 1 373 0
 366 0028 0448     		ldr	r0, .L20+8
 367 002a 7621     		mov	r1, #118
 368 002c FF31     		add	r1, r1, #255
 369 002e FFF7FEFF 		bl	_Error_Handler
 370              	.LVL14:
 371              	.L18:
 375:Src/main.c    **** }
 372              		.loc 1 375 0
 373              		@ sp needed
 374 0032 08BD     		pop	{r3, pc}
 375              	.L21:
 376              		.align	2
 377              	.L20:
 378 0034 00000000 		.word	htim14
 379 0038 00200040 		.word	1073750016
 380 003c 00000000 		.word	.LC2
 381              		.cfi_endproc
 382              	.LFE37:
 384              		.section	.text.MX_TIM15_Init,"ax",%progbits
 385              		.align	2
 386              		.code	16
 387              		.thumb_func
 389              	MX_TIM15_Init:
ARM GAS  /tmp/ccijM0ES.s 			page 17


 390              	.LFB38:
 379:Src/main.c    **** {
 391              		.loc 1 379 0
 392              		.cfi_startproc
 393 0000 08B5     		push	{r3, lr}
 394              	.LCFI7:
 395              		.cfi_def_cfa_offset 8
 396              		.cfi_offset 3, -8
 397              		.cfi_offset 14, -4
 380:Src/main.c    ****   htim15.Instance = TIM15;
 398              		.loc 1 380 0
 399 0002 0C48     		ldr	r0, .L24
 400 0004 0C4B     		ldr	r3, .L24+4
 401 0006 0360     		str	r3, [r0]
 381:Src/main.c    ****   htim15.Init.Prescaler = 11;
 402              		.loc 1 381 0
 403 0008 0B23     		mov	r3, #11
 404 000a 4360     		str	r3, [r0, #4]
 382:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 405              		.loc 1 382 0
 406 000c 0023     		mov	r3, #0
 407 000e 8360     		str	r3, [r0, #8]
 383:Src/main.c    ****   htim15.Init.Period = 1000;
 408              		.loc 1 383 0
 409 0010 FA22     		mov	r2, #250
 410 0012 9200     		lsl	r2, r2, #2
 411 0014 C260     		str	r2, [r0, #12]
 384:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 412              		.loc 1 384 0
 413 0016 8022     		mov	r2, #128
 414 0018 9200     		lsl	r2, r2, #2
 415 001a 0261     		str	r2, [r0, #16]
 385:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 416              		.loc 1 385 0
 417 001c 4361     		str	r3, [r0, #20]
 386:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 418              		.loc 1 386 0
 419 001e 8361     		str	r3, [r0, #24]
 387:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 420              		.loc 1 387 0
 421 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 422              	.LVL15:
 423 0024 0028     		cmp	r0, #0
 424 0026 04D0     		beq	.L22
 389:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 425              		.loc 1 389 0
 426 0028 0448     		ldr	r0, .L24+8
 427 002a 8621     		mov	r1, #134
 428 002c FF31     		add	r1, r1, #255
 429 002e FFF7FEFF 		bl	_Error_Handler
 430              	.LVL16:
 431              	.L22:
 391:Src/main.c    **** }
 432              		.loc 1 391 0
 433              		@ sp needed
 434 0032 08BD     		pop	{r3, pc}
 435              	.L25:
ARM GAS  /tmp/ccijM0ES.s 			page 18


 436              		.align	2
 437              	.L24:
 438 0034 00000000 		.word	htim15
 439 0038 00400140 		.word	1073823744
 440 003c 00000000 		.word	.LC2
 441              		.cfi_endproc
 442              	.LFE38:
 444              		.global	__aeabi_uidiv
 445              		.section	.text.SystemClock_Config,"ax",%progbits
 446              		.align	2
 447              		.global	SystemClock_Config
 448              		.code	16
 449              		.thumb_func
 451              	SystemClock_Config:
 452              	.LFB36:
 309:Src/main.c    **** {
 453              		.loc 1 309 0
 454              		.cfi_startproc
 455 0000 00B5     		push	{lr}
 456              	.LCFI8:
 457              		.cfi_def_cfa_offset 4
 458              		.cfi_offset 14, -4
 459 0002 99B0     		sub	sp, sp, #100
 460              	.LCFI9:
 461              		.cfi_def_cfa_offset 104
 317:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 462              		.loc 1 317 0
 463 0004 3023     		mov	r3, #48
 464 0006 0B93     		str	r3, [sp, #44]
 318:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 465              		.loc 1 318 0
 466 0008 0123     		mov	r3, #1
 467 000a 1393     		str	r3, [sp, #76]
 319:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 468              		.loc 1 319 0
 469 000c 1093     		str	r3, [sp, #64]
 320:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 470              		.loc 1 320 0
 471 000e 1023     		mov	r3, #16
 472 0010 1193     		str	r3, [sp, #68]
 321:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 473              		.loc 1 321 0
 474 0012 0023     		mov	r3, #0
 475 0014 1493     		str	r3, [sp, #80]
 322:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 476              		.loc 1 322 0
 477 0016 0BA8     		add	r0, sp, #44
 478 0018 FFF7FEFF 		bl	HAL_RCC_OscConfig
 479              	.LVL17:
 480 001c 0028     		cmp	r0, #0
 481 001e 04D0     		beq	.L27
 324:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 482              		.loc 1 324 0
 483 0020 1C48     		ldr	r0, .L30
 484 0022 A221     		mov	r1, #162
 485 0024 4900     		lsl	r1, r1, #1
 486 0026 FFF7FEFF 		bl	_Error_Handler
ARM GAS  /tmp/ccijM0ES.s 			page 19


 487              	.LVL18:
 488              	.L27:
 329:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 489              		.loc 1 329 0
 490 002a 0723     		mov	r3, #7
 491 002c 0793     		str	r3, [sp, #28]
 331:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 492              		.loc 1 331 0
 493 002e 0323     		mov	r3, #3
 494 0030 0893     		str	r3, [sp, #32]
 332:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 495              		.loc 1 332 0
 496 0032 0023     		mov	r3, #0
 497 0034 0993     		str	r3, [sp, #36]
 333:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 498              		.loc 1 333 0
 499 0036 0A93     		str	r3, [sp, #40]
 335:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 500              		.loc 1 335 0
 501 0038 07A8     		add	r0, sp, #28
 502 003a 0121     		mov	r1, #1
 503 003c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 504              	.LVL19:
 505 0040 0028     		cmp	r0, #0
 506 0042 04D0     		beq	.L28
 337:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 507              		.loc 1 337 0
 508 0044 1348     		ldr	r0, .L30
 509 0046 5221     		mov	r1, #82
 510 0048 FF31     		add	r1, r1, #255
 511 004a FFF7FEFF 		bl	_Error_Handler
 512              	.LVL20:
 513              	.L28:
 340:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 514              		.loc 1 340 0
 515 004e 8023     		mov	r3, #128
 516 0050 9B02     		lsl	r3, r3, #10
 517 0052 0093     		str	r3, [sp]
 341:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 518              		.loc 1 341 0
 519 0054 0023     		mov	r3, #0
 520 0056 0693     		str	r3, [sp, #24]
 343:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 521              		.loc 1 343 0
 522 0058 6846     		mov	r0, sp
 523 005a FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 524              	.LVL21:
 525 005e 0028     		cmp	r0, #0
 526 0060 04D0     		beq	.L29
 345:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 527              		.loc 1 345 0
 528 0062 0C48     		ldr	r0, .L30
 529 0064 5A21     		mov	r1, #90
 530 0066 FF31     		add	r1, r1, #255
 531 0068 FFF7FEFF 		bl	_Error_Handler
 532              	.LVL22:
 533              	.L29:
ARM GAS  /tmp/ccijM0ES.s 			page 20


 350:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 534              		.loc 1 350 0
 535 006c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 536              	.LVL23:
 537 0070 FA21     		mov	r1, #250
 538 0072 8900     		lsl	r1, r1, #2
 539 0074 FFF7FEFF 		bl	__aeabi_uidiv
 540              	.LVL24:
 541 0078 FFF7FEFF 		bl	HAL_SYSTICK_Config
 542              	.LVL25:
 354:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 543              		.loc 1 354 0
 544 007c 0420     		mov	r0, #4
 545 007e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 546              	.LVL26:
 357:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 547              		.loc 1 357 0
 548 0082 0120     		mov	r0, #1
 549 0084 4042     		neg	r0, r0
 550 0086 0021     		mov	r1, #0
 551 0088 0022     		mov	r2, #0
 552 008a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 553              	.LVL27:
 358:Src/main.c    **** }
 554              		.loc 1 358 0
 555 008e 19B0     		add	sp, sp, #100
 556              		@ sp needed
 557 0090 00BD     		pop	{pc}
 558              	.L31:
 559 0092 C046     		.align	2
 560              	.L30:
 561 0094 00000000 		.word	.LC2
 562              		.cfi_endproc
 563              	.LFE36:
 565              		.global	__aeabi_i2d
 566              		.global	__aeabi_ddiv
 567              		.global	__aeabi_dmul
 568              		.global	__aeabi_d2uiz
 569              		.section	.text.main,"ax",%progbits
 570              		.align	2
 571              		.global	main
 572              		.code	16
 573              		.thumb_func
 575              	main:
 576              	.LFB35:
 129:Src/main.c    **** {
 577              		.loc 1 129 0
 578              		.cfi_startproc
 579 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 580              	.LCFI10:
 581              		.cfi_def_cfa_offset 20
 582              		.cfi_offset 4, -20
 583              		.cfi_offset 5, -16
 584              		.cfi_offset 6, -12
 585              		.cfi_offset 7, -8
 586              		.cfi_offset 14, -4
 587 0002 4746     		mov	r7, r8
ARM GAS  /tmp/ccijM0ES.s 			page 21


 588 0004 80B4     		push	{r7}
 589              	.LCFI11:
 590              		.cfi_def_cfa_offset 24
 591              		.cfi_offset 8, -24
 137:Src/main.c    ****   HAL_Init();
 592              		.loc 1 137 0
 593 0006 FFF7FEFF 		bl	HAL_Init
 594              	.LVL28:
 144:Src/main.c    ****   SystemClock_Config();
 595              		.loc 1 144 0
 596 000a FFF7FEFF 		bl	SystemClock_Config
 597              	.LVL29:
 151:Src/main.c    ****   MX_GPIO_Init();
 598              		.loc 1 151 0
 599 000e FFF7FEFF 		bl	MX_GPIO_Init
 600              	.LVL30:
 152:Src/main.c    **** 	MX_DAC_Init();
 601              		.loc 1 152 0
 602 0012 FFF7FEFF 		bl	MX_DAC_Init
 603              	.LVL31:
 154:Src/main.c    **** 	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 604              		.loc 1 154 0
 605 0016 C84C     		ldr	r4, .L56+24
 606 0018 201C     		mov	r0, r4
 607 001a 0021     		mov	r1, #0
 608 001c FFF7FEFF 		bl	HAL_DAC_Start
 609              	.LVL32:
 155:Src/main.c    **** 	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 610              		.loc 1 155 0
 611 0020 201C     		mov	r0, r4
 612 0022 0021     		mov	r1, #0
 613 0024 0022     		mov	r2, #0
 614 0026 8023     		mov	r3, #128
 615 0028 1B01     		lsl	r3, r3, #4
 616 002a FFF7FEFF 		bl	HAL_DAC_SetValue
 617              	.LVL33:
 157:Src/main.c    **** 	MX_TIM14_Init();
 618              		.loc 1 157 0
 619 002e FFF7FEFF 		bl	MX_TIM14_Init
 620              	.LVL34:
 158:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim14);
 621              		.loc 1 158 0
 622 0032 C248     		ldr	r0, .L56+28
 623 0034 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 624              	.LVL35:
 159:Src/main.c    **** 	TIM14->CR1 &= ~(1UL);
 625              		.loc 1 159 0
 626 0038 C14B     		ldr	r3, .L56+32
 627 003a 1A68     		ldr	r2, [r3]
 628 003c 0124     		mov	r4, #1
 629 003e A243     		bic	r2, r4
 630 0040 1A60     		str	r2, [r3]
 161:Src/main.c    **** 	MX_TIM15_Init();
 631              		.loc 1 161 0
 632 0042 FFF7FEFF 		bl	MX_TIM15_Init
 633              	.LVL36:
 162:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim15);
ARM GAS  /tmp/ccijM0ES.s 			page 22


 634              		.loc 1 162 0
 635 0046 BF48     		ldr	r0, .L56+36
 636 0048 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 637              	.LVL37:
 163:Src/main.c    **** 	TIM15->CR1 &= ~(1UL);
 638              		.loc 1 163 0
 639 004c BE4B     		ldr	r3, .L56+40
 640 004e 1A68     		ldr	r2, [r3]
 641 0050 A243     		bic	r2, r4
 642 0052 1A60     		str	r2, [r3]
 165:Src/main.c    **** 	USER_TIM2_Init();
 643              		.loc 1 165 0
 644 0054 FFF7FEFF 		bl	USER_TIM2_Init
 645              	.LVL38:
 167:Src/main.c    **** 	HAL_TIM_Base_Start(&htim2);
 646              		.loc 1 167 0
 647 0058 BC4C     		ldr	r4, .L56+44
 648 005a 201C     		mov	r0, r4
 649 005c FFF7FEFF 		bl	HAL_TIM_Base_Start
 650              	.LVL39:
 168:Src/main.c    **** 	HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 651              		.loc 1 168 0
 652 0060 201C     		mov	r0, r4
 653 0062 0421     		mov	r1, #4
 654 0064 FFF7FEFF 		bl	HAL_TIM_OnePulse_Start
 655              	.LVL40:
 173:Src/main.c    ****   MX_USB_MIDI_INIT();
 656              		.loc 1 173 0
 657 0068 FFF7FEFF 		bl	MX_USB_MIDI_INIT
 658              	.LVL41:
 176:Src/main.c    ****   if(FUNC_ERROR == midiInit() ){
 659              		.loc 1 176 0
 660 006c FFF7FEFF 		bl	midiInit
 661              	.LVL42:
 662 0070 0028     		cmp	r0, #0
 663 0072 16D1     		bne	.L33
 178:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 664              		.loc 1 178 0 discriminator 1
 665 0074 9026     		mov	r6, #144
 666 0076 F605     		lsl	r6, r6, #23
 667 0078 8025     		mov	r5, #128
 668 007a 2D02     		lsl	r5, r5, #8
 179:Src/main.c    **** 		  HAL_Delay(500);
 669              		.loc 1 179 0 discriminator 1
 670 007c FA24     		mov	r4, #250
 671 007e 6400     		lsl	r4, r4, #1
 672              	.L54:
 178:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 673              		.loc 1 178 0 discriminator 1
 674 0080 301C     		mov	r0, r6
 675 0082 291C     		mov	r1, r5
 676 0084 0122     		mov	r2, #1
 677 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 678              	.LVL43:
 179:Src/main.c    **** 		  HAL_Delay(500);
 679              		.loc 1 179 0 discriminator 1
 680 008a 201C     		mov	r0, r4
ARM GAS  /tmp/ccijM0ES.s 			page 23


 681 008c FFF7FEFF 		bl	HAL_Delay
 682              	.LVL44:
 180:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 683              		.loc 1 180 0 discriminator 1
 684 0090 301C     		mov	r0, r6
 685 0092 291C     		mov	r1, r5
 686 0094 0022     		mov	r2, #0
 687 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 688              	.LVL45:
 181:Src/main.c    **** 		  HAL_Delay(500);
 689              		.loc 1 181 0 discriminator 1
 690 009a 201C     		mov	r0, r4
 691 009c FFF7FEFF 		bl	HAL_Delay
 692              	.LVL46:
 693 00a0 EEE7     		b	.L54
 694              	.L33:
 187:Src/main.c    **** 	  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 695              		.loc 1 187 0
 696 00a2 AB4E     		ldr	r6, .L56+48
 697 00a4 FE25     		mov	r5, #254
 698 00a6 6D00     		lsl	r5, r5, #1
 191:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 699              		.loc 1 191 0
 700 00a8 9024     		mov	r4, #144
 701 00aa E405     		lsl	r4, r4, #23
 702              	.L55:
 187:Src/main.c    **** 	  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 703              		.loc 1 187 0
 704 00ac 735D     		ldrb	r3, [r6, r5]
 705 00ae 032B     		cmp	r3, #3
 706 00b0 09D1     		bne	.L35
 188:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 707              		.loc 1 188 0
 708 00b2 9020     		mov	r0, #144
 709 00b4 C005     		lsl	r0, r0, #23
 710 00b6 8021     		mov	r1, #128
 711 00b8 0902     		lsl	r1, r1, #8
 712 00ba 0122     		mov	r2, #1
 713 00bc FFF7FEFF 		bl	HAL_GPIO_WritePin
 714              	.LVL47:
 239:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 715              		.loc 1 239 0
 716 00c0 A449     		ldr	r1, .L56+52
 717 00c2 8846     		mov	r8, r1
 189:Src/main.c    **** 		  break;
 718              		.loc 1 189 0
 719 00c4 06E0     		b	.L53
 720              	.L35:
 191:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 721              		.loc 1 191 0
 722 00c6 201C     		mov	r0, r4
 723 00c8 8021     		mov	r1, #128
 724 00ca 0902     		lsl	r1, r1, #8
 725 00cc 0022     		mov	r2, #0
 726 00ce FFF7FEFF 		bl	HAL_GPIO_WritePin
 727              	.LVL48:
 193:Src/main.c    ****   }
ARM GAS  /tmp/ccijM0ES.s 			page 24


 728              		.loc 1 193 0
 729 00d2 EBE7     		b	.L55
 730              	.L53:
 199:Src/main.c    **** 		  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 731              		.loc 1 199 0
 732 00d4 FE23     		mov	r3, #254
 733 00d6 5B00     		lsl	r3, r3, #1
 734 00d8 9D4A     		ldr	r2, .L56+48
 735 00da D35C     		ldrb	r3, [r2, r3]
 736 00dc 032B     		cmp	r3, #3
 737 00de 11D1     		bne	.L37
 200:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 738              		.loc 1 200 0
 739 00e0 9020     		mov	r0, #144
 740 00e2 C005     		lsl	r0, r0, #23
 741 00e4 8021     		mov	r1, #128
 742 00e6 0902     		lsl	r1, r1, #8
 743 00e8 0122     		mov	r2, #1
 744 00ea FFF7FEFF 		bl	HAL_GPIO_WritePin
 745              	.LVL49:
 210:Src/main.c    **** 		curTone0 = 0;
 746              		.loc 1 210 0
 747 00ee 0023     		mov	r3, #0
 748 00f0 994A     		ldr	r2, .L56+56
 749 00f2 1380     		strh	r3, [r2]
 211:Src/main.c    **** 		curTone1 = 0;
 750              		.loc 1 211 0
 751 00f4 994A     		ldr	r2, .L56+60
 752 00f6 1380     		strh	r3, [r2]
 753              	.LVL50:
 754              	.LBB6:
 214:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 755              		.loc 1 214 0
 756 00f8 994C     		ldr	r4, .L56+64
 757 00fa 9748     		ldr	r0, .L56+56
 218:Src/main.c    **** 	      else if( freqs[i] > curTone1 ) {
 758              		.loc 1 218 0
 759 00fc 151C     		mov	r5, r2
 215:Src/main.c    **** 	          curTone1 = curTone0;
 760              		.loc 1 215 0
 761 00fe 171C     		mov	r7, r2
 216:Src/main.c    **** 	          curTone0 = freqs[i];
 762              		.loc 1 216 0
 763 0100 061C     		mov	r6, r0
 213:Src/main.c    **** 	  for( int i = 0; i < 16; i++ ) { // find max pitch from all channels
 764              		.loc 1 213 0
 765 0102 22E0     		b	.L38
 766              	.LVL51:
 767              	.L37:
 768              	.LBE6:
 203:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 769              		.loc 1 203 0
 770 0104 9025     		mov	r5, #144
 771 0106 ED05     		lsl	r5, r5, #23
 772 0108 8024     		mov	r4, #128
 773 010a 2402     		lsl	r4, r4, #8
 774 010c 281C     		mov	r0, r5
ARM GAS  /tmp/ccijM0ES.s 			page 25


 775 010e 211C     		mov	r1, r4
 776 0110 0122     		mov	r2, #1
 777 0112 FFF7FEFF 		bl	HAL_GPIO_WritePin
 778              	.LVL52:
 204:Src/main.c    **** 			  HAL_Delay(200);
 779              		.loc 1 204 0
 780 0116 C820     		mov	r0, #200
 781 0118 FFF7FEFF 		bl	HAL_Delay
 782              	.LVL53:
 205:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 783              		.loc 1 205 0
 784 011c 281C     		mov	r0, r5
 785 011e 211C     		mov	r1, r4
 786 0120 0022     		mov	r2, #0
 787 0122 FFF7FEFF 		bl	HAL_GPIO_WritePin
 788              	.LVL54:
 206:Src/main.c    **** 			  HAL_Delay(200);
 789              		.loc 1 206 0
 790 0126 C820     		mov	r0, #200
 791 0128 FFF7FEFF 		bl	HAL_Delay
 792              	.LVL55:
 208:Src/main.c    **** 	  }
 793              		.loc 1 208 0
 794 012c D2E7     		b	.L53
 795              	.LVL56:
 796              	.L42:
 797              	.LBB7:
 214:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 798              		.loc 1 214 0
 799 012e 5A00     		lsl	r2, r3, #1
 800 0130 125B     		ldrh	r2, [r2, r4]
 801 0132 0188     		ldrh	r1, [r0]
 802 0134 8A42     		cmp	r2, r1
 803 0136 02D9     		bls	.L40
 215:Src/main.c    **** 	          curTone1 = curTone0;
 804              		.loc 1 215 0
 805 0138 3980     		strh	r1, [r7]
 216:Src/main.c    **** 	          curTone0 = freqs[i];
 806              		.loc 1 216 0
 807 013a 3280     		strh	r2, [r6]
 808 013c 04E0     		b	.L41
 809              	.L40:
 218:Src/main.c    **** 	      else if( freqs[i] > curTone1 ) {
 810              		.loc 1 218 0
 811 013e 2988     		ldrh	r1, [r5]
 812 0140 8A42     		cmp	r2, r1
 813 0142 01D9     		bls	.L41
 219:Src/main.c    **** 	          curTone1 = freqs[i];
 814              		.loc 1 219 0
 815 0144 8549     		ldr	r1, .L56+60
 816 0146 0A80     		strh	r2, [r1]
 817              	.L41:
 213:Src/main.c    **** 	  for( int i = 0; i < 16; i++ ) { // find max pitch from all channels
 818              		.loc 1 213 0
 819 0148 0133     		add	r3, r3, #1
 820              	.LVL57:
 821              	.L38:
ARM GAS  /tmp/ccijM0ES.s 			page 26


 213:Src/main.c    **** 	  for( int i = 0; i < 16; i++ ) { // find max pitch from all channels
 822              		.loc 1 213 0 is_stmt 0 discriminator 1
 823 014a 0F2B     		cmp	r3, #15
 824 014c EFDD     		ble	.L42
 825              	.LBE7:
 223:Src/main.c    **** 		if (curTone0 > 20 && curTone0 != lastTone0) { // play one tone using TIM14
 826              		.loc 1 223 0 is_stmt 1
 827 014e 824B     		ldr	r3, .L56+56
 828              	.LVL58:
 829 0150 1988     		ldrh	r1, [r3]
 830 0152 1429     		cmp	r1, #20
 831 0154 20D9     		bls	.L43
 223:Src/main.c    **** 		if (curTone0 > 20 && curTone0 != lastTone0) { // play one tone using TIM14
 832              		.loc 1 223 0 is_stmt 0 discriminator 1
 833 0156 834B     		ldr	r3, .L56+68
 834 0158 1B88     		ldrh	r3, [r3]
 835 015a 9942     		cmp	r1, r3
 836 015c 1CD0     		beq	.L43
 224:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 837              		.loc 1 224 0 is_stmt 1
 838 015e 4046     		mov	r0, r8
 839 0160 FFF7FEFF 		bl	__aeabi_uidiv
 840              	.LVL59:
 841 0164 804B     		ldr	r3, .L56+72
 842 0166 1860     		str	r0, [r3]
 225:Src/main.c    **** 			TIM14->CNT = 0;
 843              		.loc 1 225 0
 844 0168 754B     		ldr	r3, .L56+32
 845 016a 0022     		mov	r2, #0
 846 016c 5A62     		str	r2, [r3, #36]
 226:Src/main.c    **** 			TIM14->ARR = curPeriode0;
 847              		.loc 1 226 0
 848 016e D862     		str	r0, [r3, #44]
 227:Src/main.c    **** 			TIM14->CR1 = TIM14->CR1 | 1;
 849              		.loc 1 227 0
 850 0170 1968     		ldr	r1, [r3]
 851 0172 0122     		mov	r2, #1
 852 0174 0A43     		orr	r2, r1
 853 0176 1A60     		str	r2, [r3]
 228:Src/main.c    **** 			lastTone0 = curTone0;
 854              		.loc 1 228 0
 855 0178 774B     		ldr	r3, .L56+56
 856 017a 1A88     		ldrh	r2, [r3]
 857 017c 794B     		ldr	r3, .L56+68
 858 017e 1A80     		strh	r2, [r3]
 229:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 859              		.loc 1 229 0
 860 0180 FFF7FEFF 		bl	HAL_GetTick
 861              	.LVL60:
 862 0184 794B     		ldr	r3, .L56+76
 863 0186 1860     		str	r0, [r3]
 231:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, SET);
 864              		.loc 1 231 0
 865 0188 9020     		mov	r0, #144
 866 018a C005     		lsl	r0, r0, #23
 867 018c 8021     		mov	r1, #128
 868 018e C900     		lsl	r1, r1, #3
ARM GAS  /tmp/ccijM0ES.s 			page 27


 869 0190 0122     		mov	r2, #1
 870 0192 FFF7FEFF 		bl	HAL_GPIO_WritePin
 871              	.LVL61:
 872 0196 11E0     		b	.L44
 873              	.L43:
 232:Src/main.c    **** 		} else if (curTone0 < 20 && curTone0 != lastTone0) {
 874              		.loc 1 232 0
 875 0198 1329     		cmp	r1, #19
 876 019a 0FD8     		bhi	.L44
 232:Src/main.c    **** 		} else if (curTone0 < 20 && curTone0 != lastTone0) {
 877              		.loc 1 232 0 is_stmt 0 discriminator 1
 878 019c 714B     		ldr	r3, .L56+68
 879 019e 1B88     		ldrh	r3, [r3]
 880 01a0 9942     		cmp	r1, r3
 881 01a2 0BD0     		beq	.L44
 233:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 882              		.loc 1 233 0 is_stmt 1
 883 01a4 664B     		ldr	r3, .L56+32
 884 01a6 1A68     		ldr	r2, [r3]
 885 01a8 0121     		mov	r1, #1
 886 01aa 8A43     		bic	r2, r1
 887 01ac 1A60     		str	r2, [r3]
 235:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, RESET);
 888              		.loc 1 235 0
 889 01ae 9020     		mov	r0, #144
 890 01b0 C005     		lsl	r0, r0, #23
 891 01b2 8021     		mov	r1, #128
 892 01b4 C900     		lsl	r1, r1, #3
 893 01b6 0022     		mov	r2, #0
 894 01b8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 895              	.LVL62:
 896              	.L44:
 238:Src/main.c    **** 		if (curTone1 > 20 && curTone1 != lastTone1) { // play other polyphonic tone ussing TIM15
 897              		.loc 1 238 0
 898 01bc 674B     		ldr	r3, .L56+60
 899 01be 1988     		ldrh	r1, [r3]
 900 01c0 1429     		cmp	r1, #20
 901 01c2 19D9     		bls	.L45
 238:Src/main.c    **** 		if (curTone1 > 20 && curTone1 != lastTone1) { // play other polyphonic tone ussing TIM15
 902              		.loc 1 238 0 is_stmt 0 discriminator 1
 903 01c4 6A4B     		ldr	r3, .L56+80
 904 01c6 1B88     		ldrh	r3, [r3]
 905 01c8 9942     		cmp	r1, r3
 906 01ca 15D0     		beq	.L45
 239:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 907              		.loc 1 239 0 is_stmt 1
 908 01cc 4046     		mov	r0, r8
 909 01ce FFF7FEFF 		bl	__aeabi_uidiv
 910              	.LVL63:
 911 01d2 684B     		ldr	r3, .L56+84
 912 01d4 1860     		str	r0, [r3]
 240:Src/main.c    **** 			TIM15->CNT = 0;
 913              		.loc 1 240 0
 914 01d6 5C4B     		ldr	r3, .L56+40
 915 01d8 0022     		mov	r2, #0
 916 01da 5A62     		str	r2, [r3, #36]
 241:Src/main.c    **** 			TIM15->ARR = curPeriode1;
ARM GAS  /tmp/ccijM0ES.s 			page 28


 917              		.loc 1 241 0
 918 01dc D862     		str	r0, [r3, #44]
 242:Src/main.c    **** 			TIM15->CR1 = TIM15->CR1 | 1;
 919              		.loc 1 242 0
 920 01de 1968     		ldr	r1, [r3]
 921 01e0 0122     		mov	r2, #1
 922 01e2 0A43     		orr	r2, r1
 923 01e4 1A60     		str	r2, [r3]
 243:Src/main.c    **** 			lastTone1 = curTone1;
 924              		.loc 1 243 0
 925 01e6 5D4B     		ldr	r3, .L56+60
 926 01e8 1A88     		ldrh	r2, [r3]
 927 01ea 614B     		ldr	r3, .L56+80
 928 01ec 1A80     		strh	r2, [r3]
 244:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 929              		.loc 1 244 0
 930 01ee FFF7FEFF 		bl	HAL_GetTick
 931              	.LVL64:
 932 01f2 5E4B     		ldr	r3, .L56+76
 933 01f4 1860     		str	r0, [r3]
 934 01f6 0AE0     		b	.L46
 935              	.L45:
 245:Src/main.c    **** 		} else if (curTone1 < 20 && curTone1 != lastTone1) {
 936              		.loc 1 245 0
 937 01f8 1329     		cmp	r1, #19
 938 01fa 08D8     		bhi	.L46
 245:Src/main.c    **** 		} else if (curTone1 < 20 && curTone1 != lastTone1) {
 939              		.loc 1 245 0 is_stmt 0 discriminator 1
 940 01fc 5C4B     		ldr	r3, .L56+80
 941 01fe 1B88     		ldrh	r3, [r3]
 942 0200 9942     		cmp	r1, r3
 943 0202 04D0     		beq	.L46
 246:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 944              		.loc 1 246 0 is_stmt 1
 945 0204 504B     		ldr	r3, .L56+40
 946 0206 1A68     		ldr	r2, [r3]
 947 0208 0121     		mov	r1, #1
 948 020a 8A43     		bic	r2, r1
 949 020c 1A60     		str	r2, [r3]
 950              	.L46:
 249:Src/main.c    **** 		if ((HAL_GetTick() - noteTimeout) > 1000) {
 951              		.loc 1 249 0
 952 020e FFF7FEFF 		bl	HAL_GetTick
 953              	.LVL65:
 954 0212 564B     		ldr	r3, .L56+76
 955 0214 1B68     		ldr	r3, [r3]
 956 0216 C01A     		sub	r0, r0, r3
 957 0218 FA23     		mov	r3, #250
 958 021a 9B00     		lsl	r3, r3, #2
 959 021c 9842     		cmp	r0, r3
 960 021e 18D9     		bls	.L47
 250:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 961              		.loc 1 250 0
 962 0220 474B     		ldr	r3, .L56+32
 963 0222 1968     		ldr	r1, [r3]
 964 0224 0122     		mov	r2, #1
 965 0226 9143     		bic	r1, r2
ARM GAS  /tmp/ccijM0ES.s 			page 29


 966 0228 1960     		str	r1, [r3]
 251:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 967              		.loc 1 251 0
 968 022a 474B     		ldr	r3, .L56+40
 969 022c 1968     		ldr	r1, [r3]
 970 022e 9143     		bic	r1, r2
 971 0230 1960     		str	r1, [r3]
 972              	.LVL66:
 973              	.LBB8:
 252:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 974              		.loc 1 252 0
 975 0232 0023     		mov	r3, #0
 253:Src/main.c    **** 				freqs[i] = 0;
 976              		.loc 1 253 0
 977 0234 4A48     		ldr	r0, .L56+64
 978 0236 0021     		mov	r1, #0
 252:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 979              		.loc 1 252 0
 980 0238 02E0     		b	.L48
 981              	.LVL67:
 982              	.L49:
 253:Src/main.c    **** 				freqs[i] = 0;
 983              		.loc 1 253 0 discriminator 2
 984 023a 5A00     		lsl	r2, r3, #1
 985 023c 1152     		strh	r1, [r2, r0]
 252:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 986              		.loc 1 252 0 discriminator 2
 987 023e 0133     		add	r3, r3, #1
 988              	.LVL68:
 989              	.L48:
 252:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 990              		.loc 1 252 0 is_stmt 0 discriminator 1
 991 0240 0F2B     		cmp	r3, #15
 992 0242 FADD     		ble	.L49
 993              	.LBE8:
 256:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, RESET);
 994              		.loc 1 256 0 is_stmt 1
 995 0244 9020     		mov	r0, #144
 996 0246 C005     		lsl	r0, r0, #23
 997 0248 8021     		mov	r1, #128
 998 024a C900     		lsl	r1, r1, #3
 999 024c 0022     		mov	r2, #0
 1000 024e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1001              	.LVL69:
 1002              	.L47:
 262:Src/main.c    **** 		if( FUNC_SUCCESS == midiGetFromUsbRx(0, &uart_tx_dat)){
 1003              		.loc 1 262 0
 1004 0252 0020     		mov	r0, #0
 1005 0254 4849     		ldr	r1, .L56+88
 1006 0256 FFF7FEFF 		bl	midiGetFromUsbRx
 1007              	.LVL70:
 1008 025a 0128     		cmp	r0, #1
 1009 025c 00D0     		beq	.LCB854
 1010 025e 39E7     		b	.L53	@long jump
 1011              	.LCB854:
 263:Src/main.c    **** 			if (uart_tx_dat >> 7 == 1) {
 1012              		.loc 1 263 0
ARM GAS  /tmp/ccijM0ES.s 			page 30


 1013 0260 454B     		ldr	r3, .L56+88
 1014 0262 1B78     		ldrb	r3, [r3]
 1015 0264 DA09     		lsr	r2, r3, #7
 1016 0266 012A     		cmp	r2, #1
 1017 0268 08D1     		bne	.L50
 264:Src/main.c    **** 				midiBuffer[0] = uart_tx_dat;
 1018              		.loc 1 264 0
 1019 026a 444A     		ldr	r2, .L56+92
 1020 026c 1370     		strb	r3, [r2]
 265:Src/main.c    **** 				midiBuffer[1] = 0;
 1021              		.loc 1 265 0
 1022 026e 0023     		mov	r3, #0
 1023 0270 5370     		strb	r3, [r2, #1]
 266:Src/main.c    **** 				midiBuffer[2] = 0;
 1024              		.loc 1 266 0
 1025 0272 9370     		strb	r3, [r2, #2]
 267:Src/main.c    **** 				midiState = 1;
 1026              		.loc 1 267 0
 1027 0274 0122     		mov	r2, #1
 1028 0276 424B     		ldr	r3, .L56+96
 1029 0278 1A70     		strb	r2, [r3]
 1030 027a 2BE7     		b	.L53
 1031              	.L50:
 268:Src/main.c    **** 			} else if (midiState == 1) {
 1032              		.loc 1 268 0
 1033 027c 404A     		ldr	r2, .L56+96
 1034 027e 1278     		ldrb	r2, [r2]
 1035 0280 012A     		cmp	r2, #1
 1036 0282 05D1     		bne	.L51
 269:Src/main.c    **** 				midiBuffer[1] = uart_tx_dat;
 1037              		.loc 1 269 0
 1038 0284 3D4A     		ldr	r2, .L56+92
 1039 0286 5370     		strb	r3, [r2, #1]
 270:Src/main.c    **** 				midiState = 2;
 1040              		.loc 1 270 0
 1041 0288 0222     		mov	r2, #2
 1042 028a 3D4B     		ldr	r3, .L56+96
 1043 028c 1A70     		strb	r2, [r3]
 1044 028e 21E7     		b	.L53
 1045              	.L51:
 271:Src/main.c    **** 			} else if (midiState == 2) {
 1046              		.loc 1 271 0
 1047 0290 022A     		cmp	r2, #2
 1048 0292 00D0     		beq	.LCB887
 1049 0294 1EE7     		b	.L53	@long jump
 1050              	.LCB887:
 272:Src/main.c    **** 				midiBuffer[2] = uart_tx_dat;
 1051              		.loc 1 272 0
 1052 0296 394A     		ldr	r2, .L56+92
 1053 0298 9370     		strb	r3, [r2, #2]
 273:Src/main.c    **** 				midiState = 3;
 1054              		.loc 1 273 0
 1055 029a 0321     		mov	r1, #3
 1056 029c 384B     		ldr	r3, .L56+96
 1057 029e 1970     		strb	r1, [r3]
 275:Src/main.c    **** 				if ((midiBuffer[0] & 0xF0) == 0x90) { // Note on, 2 data bytes
 1058              		.loc 1 275 0
ARM GAS  /tmp/ccijM0ES.s 			page 31


 1059 02a0 1378     		ldrb	r3, [r2]
 1060 02a2 0F22     		mov	r2, #15
 1061 02a4 9343     		bic	r3, r2
 1062 02a6 902B     		cmp	r3, #144
 1063 02a8 1CD1     		bne	.L52
 1064              	.LBB9:
 276:Src/main.c    **** 					char key = midiBuffer[1];
 1065              		.loc 1 276 0
 1066 02aa 344C     		ldr	r4, .L56+92
 1067 02ac 6078     		ldrb	r0, [r4, #1]
 1068              	.LVL71:
 279:Src/main.c    **** 					uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 1069              		.loc 1 279 0
 1070 02ae 4538     		sub	r0, r0, #69
 1071 02b0 FFF7FEFF 		bl	__aeabi_i2d
 1072              	.LVL72:
 1073 02b4 1B4B     		ldr	r3, .L56+4
 1074 02b6 1A4A     		ldr	r2, .L56
 1075 02b8 FFF7FEFF 		bl	__aeabi_ddiv
 1076              	.LVL73:
 1077 02bc 021C     		mov	r2, r0
 1078 02be 0B1C     		mov	r3, r1
 1079 02c0 1948     		ldr	r0, .L56+8
 1080 02c2 1A49     		ldr	r1, .L56+12
 1081 02c4 FFF7FEFF 		bl	pow
 1082              	.LVL74:
 1083 02c8 194A     		ldr	r2, .L56+16
 1084 02ca 1A4B     		ldr	r3, .L56+20
 1085 02cc FFF7FEFF 		bl	__aeabi_dmul
 1086              	.LVL75:
 1087 02d0 FFF7FEFF 		bl	__aeabi_d2uiz
 1088              	.LVL76:
 280:Src/main.c    **** 					curChannel = midiBuffer[0] & 0xF;
 1089              		.loc 1 280 0
 1090 02d4 2378     		ldrb	r3, [r4]
 1091 02d6 0F22     		mov	r2, #15
 1092 02d8 1340     		and	r3, r2
 1093 02da 2A4A     		ldr	r2, .L56+100
 1094 02dc 1380     		strh	r3, [r2]
 281:Src/main.c    **** 					freqs[curChannel] = freq;
 1095              		.loc 1 281 0
 1096 02de 5B00     		lsl	r3, r3, #1
 1097 02e0 1F4A     		ldr	r2, .L56+64
 1098 02e2 D052     		strh	r0, [r2, r3]
 1099              	.LVL77:
 1100              	.L52:
 1101              	.LBE9:
 284:Src/main.c    **** 				} if ((midiBuffer[0] &0xF0) == 0x80) { // Note off, 2 data bytes
 1102              		.loc 1 284 0
 1103 02e4 254B     		ldr	r3, .L56+92
 1104 02e6 1B78     		ldrb	r3, [r3]
 1105 02e8 0F22     		mov	r2, #15
 1106 02ea 9343     		bic	r3, r2
 1107 02ec 802B     		cmp	r3, #128
 1108 02ee 00D0     		beq	.LCB946
 1109 02f0 F0E6     		b	.L53	@long jump
 1110              	.LCB946:
ARM GAS  /tmp/ccijM0ES.s 			page 32


 1111              	.LBB10:
 285:Src/main.c    **** 					char key = midiBuffer[1];
 1112              		.loc 1 285 0
 1113 02f2 224C     		ldr	r4, .L56+92
 1114 02f4 6078     		ldrb	r0, [r4, #1]
 1115              	.LVL78:
 288:Src/main.c    **** 					uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 1116              		.loc 1 288 0
 1117 02f6 4538     		sub	r0, r0, #69
 1118 02f8 FFF7FEFF 		bl	__aeabi_i2d
 1119              	.LVL79:
 1120 02fc 094B     		ldr	r3, .L56+4
 1121 02fe 084A     		ldr	r2, .L56
 1122 0300 FFF7FEFF 		bl	__aeabi_ddiv
 1123              	.LVL80:
 1124 0304 021C     		mov	r2, r0
 1125 0306 0B1C     		mov	r3, r1
 1126 0308 0748     		ldr	r0, .L56+8
 1127 030a 0849     		ldr	r1, .L56+12
 1128 030c FFF7FEFF 		bl	pow
 1129              	.LVL81:
 291:Src/main.c    **** 					freqs[midiBuffer[0] & 0xF] = 0;
 1130              		.loc 1 291 0
 1131 0310 2378     		ldrb	r3, [r4]
 1132 0312 0F22     		mov	r2, #15
 1133 0314 1A40     		and	r2, r3
 1134 0316 5200     		lsl	r2, r2, #1
 1135 0318 0021     		mov	r1, #0
 1136 031a 114B     		ldr	r3, .L56+64
 1137 031c D152     		strh	r1, [r2, r3]
 1138 031e D9E6     		b	.L53
 1139              	.L57:
 1140              		.align	3
 1141              	.L56:
 1142 0320 00000000 		.word	0
 1143 0324 00002840 		.word	1076363264
 1144 0328 00000000 		.word	0
 1145 032c 00000040 		.word	1073741824
 1146 0330 00000000 		.word	0
 1147 0334 00807B40 		.word	1081835520
 1148 0338 00000000 		.word	hdac
 1149 033c 00000000 		.word	htim14
 1150 0340 00200040 		.word	1073750016
 1151 0344 00000000 		.word	htim15
 1152 0348 00400140 		.word	1073823744
 1153 034c 00000000 		.word	htim2
 1154 0350 00000000 		.word	hUsbDeviceFS
 1155 0354 40420F00 		.word	1000000
 1156 0358 00000000 		.word	.LANCHOR0
 1157 035c 00000000 		.word	.LANCHOR1
 1158 0360 00000000 		.word	.LANCHOR2
 1159 0364 00000000 		.word	.LANCHOR3
 1160 0368 00000000 		.word	.LANCHOR4
 1161 036c 00000000 		.word	.LANCHOR5
 1162 0370 00000000 		.word	.LANCHOR6
 1163 0374 00000000 		.word	.LANCHOR7
 1164 0378 00000000 		.word	uart_tx_dat
ARM GAS  /tmp/ccijM0ES.s 			page 33


 1165 037c 00000000 		.word	midiBuffer
 1166 0380 00000000 		.word	.LANCHOR8
 1167 0384 00000000 		.word	.LANCHOR9
 1168              	.LBE10:
 1169              		.cfi_endproc
 1170              	.LFE35:
 1172              		.global	freqs
 1173              		.global	noteTimeout
 1174              		.global	curPeriode1
 1175              		.global	curPeriode0
 1176              		.global	lastTone1
 1177              		.global	lastTone0
 1178              		.global	curChannel
 1179              		.global	curTone1
 1180              		.global	curTone0
 1181              		.global	midiState
 1182              		.comm	midiBuffer,4,4
 1183              		.comm	uart_tx_dat,1,1
 1184              		.comm	hdac,20,4
 1185              		.comm	htim2,64,4
 1186              		.comm	htim15,64,4
 1187              		.comm	htim14,64,4
 1188              		.section	.bss.lastTone0,"aw",%nobits
 1189              		.align	1
 1190              		.set	.LANCHOR3,. + 0
 1193              	lastTone0:
 1194 0000 0000     		.space	2
 1195              		.section	.bss.lastTone1,"aw",%nobits
 1196              		.align	1
 1197              		.set	.LANCHOR6,. + 0
 1200              	lastTone1:
 1201 0000 0000     		.space	2
 1202              		.section	.bss.curTone0,"aw",%nobits
 1203              		.align	1
 1204              		.set	.LANCHOR0,. + 0
 1207              	curTone0:
 1208 0000 0000     		.space	2
 1209              		.section	.bss.curTone1,"aw",%nobits
 1210              		.align	1
 1211              		.set	.LANCHOR1,. + 0
 1214              	curTone1:
 1215 0000 0000     		.space	2
 1216              		.section	.bss.curPeriode0,"aw",%nobits
 1217              		.align	2
 1218              		.set	.LANCHOR4,. + 0
 1221              	curPeriode0:
 1222 0000 00000000 		.space	4
 1223              		.section	.bss.curPeriode1,"aw",%nobits
 1224              		.align	2
 1225              		.set	.LANCHOR7,. + 0
 1228              	curPeriode1:
 1229 0000 00000000 		.space	4
 1230              		.section	.bss.noteTimeout,"aw",%nobits
 1231              		.align	2
 1232              		.set	.LANCHOR5,. + 0
 1235              	noteTimeout:
 1236 0000 00000000 		.space	4
ARM GAS  /tmp/ccijM0ES.s 			page 34


 1237              		.section	.bss.freqs,"aw",%nobits
 1238              		.align	2
 1239              		.set	.LANCHOR2,. + 0
 1242              	freqs:
 1243 0000 00000000 		.space	32
 1243      00000000 
 1243      00000000 
 1243      00000000 
 1243      00000000 
 1244              		.section	.rodata.str1.4,"aMS",%progbits,1
 1245              		.align	2
 1246              	.LC2:
 1247 0000 5372632F 		.ascii	"Src/main.c\000"
 1247      6D61696E 
 1247      2E6300
 1248 000b 00       		.section	.bss.curChannel,"aw",%nobits
 1249              		.align	1
 1250              		.set	.LANCHOR9,. + 0
 1253              	curChannel:
 1254 0000 0000     		.space	2
 1255              		.section	.bss.midiState,"aw",%nobits
 1256              		.set	.LANCHOR8,. + 0
 1259              	midiState:
 1260 0000 00       		.space	1
 1261              		.text
 1262              	.Letext0:
 1263              		.file 2 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1264              		.file 3 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_defaul
 1265              		.file 4 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 1266              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 1267              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1268              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1269              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 1270              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1271              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1272              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dac.h"
 1273              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 1274              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 1275              		.file 14 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 1276              		.file 15 "Inc/curelib_inc/curemisc.h"
 1277              		.file 16 "Inc/usb_device.h"
 1278              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 1279              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1280              		.file 19 "Inc/usbd_midi_if.h"
 1281              		.file 20 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/math.h"
ARM GAS  /tmp/ccijM0ES.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccijM0ES.s:18     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccijM0ES.s:22     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccijM0ES.s:105    .text.MX_GPIO_Init:00000068 $d
     /tmp/ccijM0ES.s:110    .text.USER_TIM2_Init:00000000 $t
     /tmp/ccijM0ES.s:114    .text.USER_TIM2_Init:00000000 USER_TIM2_Init
     /tmp/ccijM0ES.s:203    .text.USER_TIM2_Init:0000006c $d
                            *COM*:00000040 htim2
     /tmp/ccijM0ES.s:209    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/ccijM0ES.s:214    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccijM0ES.s:238    .text.HAL_TIM_PeriodElapsedCallback:00000018 $d
     /tmp/ccijM0ES.s:243    .text._Error_Handler:00000000 $t
     /tmp/ccijM0ES.s:248    .text._Error_Handler:00000000 _Error_Handler
     /tmp/ccijM0ES.s:259    .text.MX_DAC_Init:00000000 $t
     /tmp/ccijM0ES.s:263    .text.MX_DAC_Init:00000000 MX_DAC_Init
     /tmp/ccijM0ES.s:318    .text.MX_DAC_Init:00000040 $d
                            *COM*:00000014 hdac
     /tmp/ccijM0ES.s:325    .text.MX_TIM14_Init:00000000 $t
     /tmp/ccijM0ES.s:329    .text.MX_TIM14_Init:00000000 MX_TIM14_Init
     /tmp/ccijM0ES.s:378    .text.MX_TIM14_Init:00000034 $d
                            *COM*:00000040 htim14
     /tmp/ccijM0ES.s:385    .text.MX_TIM15_Init:00000000 $t
     /tmp/ccijM0ES.s:389    .text.MX_TIM15_Init:00000000 MX_TIM15_Init
     /tmp/ccijM0ES.s:438    .text.MX_TIM15_Init:00000034 $d
                            *COM*:00000040 htim15
     /tmp/ccijM0ES.s:446    .text.SystemClock_Config:00000000 $t
     /tmp/ccijM0ES.s:451    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccijM0ES.s:561    .text.SystemClock_Config:00000094 $d
     /tmp/ccijM0ES.s:570    .text.main:00000000 $t
     /tmp/ccijM0ES.s:575    .text.main:00000000 main
     /tmp/ccijM0ES.s:1142   .text.main:00000320 $d
                            *COM*:00000001 uart_tx_dat
                            *COM*:00000004 midiBuffer
     /tmp/ccijM0ES.s:1242   .bss.freqs:00000000 freqs
     /tmp/ccijM0ES.s:1235   .bss.noteTimeout:00000000 noteTimeout
     /tmp/ccijM0ES.s:1228   .bss.curPeriode1:00000000 curPeriode1
     /tmp/ccijM0ES.s:1221   .bss.curPeriode0:00000000 curPeriode0
     /tmp/ccijM0ES.s:1200   .bss.lastTone1:00000000 lastTone1
     /tmp/ccijM0ES.s:1193   .bss.lastTone0:00000000 lastTone0
     /tmp/ccijM0ES.s:1253   .bss.curChannel:00000000 curChannel
     /tmp/ccijM0ES.s:1214   .bss.curTone1:00000000 curTone1
     /tmp/ccijM0ES.s:1207   .bss.curTone0:00000000 curTone0
     /tmp/ccijM0ES.s:1259   .bss.midiState:00000000 midiState
     /tmp/ccijM0ES.s:1189   .bss.lastTone0:00000000 $d
     /tmp/ccijM0ES.s:1196   .bss.lastTone1:00000000 $d
     /tmp/ccijM0ES.s:1203   .bss.curTone0:00000000 $d
     /tmp/ccijM0ES.s:1210   .bss.curTone1:00000000 $d
     /tmp/ccijM0ES.s:1217   .bss.curPeriode0:00000000 $d
     /tmp/ccijM0ES.s:1224   .bss.curPeriode1:00000000 $d
     /tmp/ccijM0ES.s:1231   .bss.noteTimeout:00000000 $d
     /tmp/ccijM0ES.s:1238   .bss.freqs:00000000 $d
     /tmp/ccijM0ES.s:1245   .rodata.str1.4:00000000 $d
     /tmp/ccijM0ES.s:1249   .bss.curChannel:00000000 $d
     /tmp/ccijM0ES.s:1260   .bss.midiState:00000000 $d
                     .debug_frame:00000010 $d

ARM GAS  /tmp/ccijM0ES.s 			page 36


UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_OnePulse_Init
HAL_TIM_MspPostInit
HAL_DAC_Init
HAL_DAC_ConfigChannel
__aeabi_uidiv
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
__aeabi_i2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2uiz
HAL_Init
HAL_DAC_Start
HAL_DAC_SetValue
HAL_TIM_Base_Start_IT
HAL_TIM_Base_Start
HAL_TIM_OnePulse_Start
MX_USB_MIDI_INIT
midiInit
HAL_Delay
HAL_GetTick
midiGetFromUsbRx
pow
hUsbDeviceFS
