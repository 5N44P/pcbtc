ARM GAS  /tmp/ccyc2a9R.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	2
  19              		.code	16
  20              		.thumb_func
  22              	MX_GPIO_Init:
  23              	.LFB42:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2018 STMicroelectronics International N.V.
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice,
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under
  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under
  32:Src/main.c    ****   *    this license.
  33:Src/main.c    ****   *
  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS"
ARM GAS  /tmp/ccyc2a9R.s 			page 2


  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f0xx_hal.h"
  52:Src/main.c    **** #include "usb_device.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN Includes */
  55:Src/main.c    **** #include "device_conf.h"
  56:Src/main.c    **** #include "curemisc.h"
  57:Src/main.c    **** #include "curebuffer.h"
  58:Src/main.c    **** #include "usbd_midi_if.h"
  59:Src/main.c    **** #include "math.h"
  60:Src/main.c    **** 
  61:Src/main.c    **** /* USER CODE END Includes */
  62:Src/main.c    **** 
  63:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  64:Src/main.c    **** TIM_HandleTypeDef htim14;
  65:Src/main.c    **** TIM_HandleTypeDef htim15;
  66:Src/main.c    **** 
  67:Src/main.c    **** TIM_HandleTypeDef htim2;
  68:Src/main.c    **** 
  69:Src/main.c    **** DAC_HandleTypeDef hdac;
  70:Src/main.c    **** 
  71:Src/main.c    **** 
  72:Src/main.c    **** uint8_t uart_tx_dat;
  73:Src/main.c    **** /* USER CODE END PV */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  76:Src/main.c    **** void SystemClock_Config(void);
  77:Src/main.c    **** static void MX_GPIO_Init(void);
  78:Src/main.c    **** 
  79:Src/main.c    **** static void MX_TIM14_Init(void);
  80:Src/main.c    **** static void MX_TIM15_Init(void);
  81:Src/main.c    **** static void USER_TIM2_Init(void);
  82:Src/main.c    **** 
  83:Src/main.c    **** static void MX_DAC_Init(void);
  84:Src/main.c    **** 
  85:Src/main.c    **** /* USER CODE BEGIN PFP */
  86:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  87:Src/main.c    **** void dfu_otter_bootloader(void)
  88:Src/main.c    **** {
  89:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
  90:Src/main.c    ****   NVIC_SystemReset();
  91:Src/main.c    **** }
ARM GAS  /tmp/ccyc2a9R.s 			page 3


  92:Src/main.c    **** /* USER CODE END PFP */
  93:Src/main.c    **** 
  94:Src/main.c    **** /* USER CODE BEGIN 0 */
  95:Src/main.c    **** 
  96:Src/main.c    **** uint32_t curPeriode0 = 0;
  97:Src/main.c    **** uint32_t curPeriode1 = 0;
  98:Src/main.c    **** 
  99:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 100:Src/main.c    **** {
 101:Src/main.c    **** 	if(htim->Instance == TIM14)
 102:Src/main.c    **** 	{
 103:Src/main.c    **** 		//HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 104:Src/main.c    ****     if (TIM2->CNT == 0) {
 105:Src/main.c    ****       TIM2->ARR = (uint32_t)(curPeriode0 / 5);
 106:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 107:Src/main.c    ****     }
 108:Src/main.c    **** 	}
 109:Src/main.c    **** 	if(htim->Instance == TIM15)
 110:Src/main.c    **** 	{
 111:Src/main.c    **** 		//HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 112:Src/main.c    ****     if (TIM2->CNT == 0) {
 113:Src/main.c    ****     	TIM2->ARR = (uint32_t)(curPeriode1 / 10);
 114:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 115:Src/main.c    ****     }
 116:Src/main.c    **** 	}
 117:Src/main.c    **** }
 118:Src/main.c    **** 
 119:Src/main.c    **** /**
 120:Src/main.c    ****   * @brief  The application entry point.
 121:Src/main.c    ****   *
 122:Src/main.c    ****   * @retval None
 123:Src/main.c    ****   */
 124:Src/main.c    **** 
 125:Src/main.c    **** 
 126:Src/main.c    **** uint8_t midiBuffer[4];
 127:Src/main.c    **** uint8_t midiState = 0;
 128:Src/main.c    **** 
 129:Src/main.c    **** uint16_t curTone0 = 0;
 130:Src/main.c    **** uint16_t curTone1 = 0;
 131:Src/main.c    **** uint16_t curChannel = 0;
 132:Src/main.c    **** uint16_t lastTone0 = 0;
 133:Src/main.c    **** uint16_t lastTone1 = 0;
 134:Src/main.c    **** uint32_t noteTimeout = 0;
 135:Src/main.c    **** 
 136:Src/main.c    **** uint16_t freqs[16] = {0};
 137:Src/main.c    **** 
 138:Src/main.c    **** 
 139:Src/main.c    **** int main(void)
 140:Src/main.c    **** {
 141:Src/main.c    ****   /* USER CODE BEGIN 1 */
 142:Src/main.c    **** 
 143:Src/main.c    ****   /* USER CODE END 1 */
 144:Src/main.c    **** 
 145:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 146:Src/main.c    **** 
 147:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 148:Src/main.c    ****   HAL_Init();
ARM GAS  /tmp/ccyc2a9R.s 			page 4


 149:Src/main.c    **** 
 150:Src/main.c    ****   /* USER CODE BEGIN Init */
 151:Src/main.c    **** 
 152:Src/main.c    ****   /* USER CODE END Init */
 153:Src/main.c    **** 
 154:Src/main.c    ****   /* Configure the system clock */
 155:Src/main.c    ****   SystemClock_Config();
 156:Src/main.c    **** 
 157:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 158:Src/main.c    **** 
 159:Src/main.c    ****   /* USER CODE END SysInit */
 160:Src/main.c    **** 
 161:Src/main.c    ****   /* Initialize all configured peripherals */
 162:Src/main.c    ****   MX_GPIO_Init();
 163:Src/main.c    **** 	MX_DAC_Init();
 164:Src/main.c    **** 
 165:Src/main.c    **** 	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 166:Src/main.c    **** 	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 167:Src/main.c    **** 
 168:Src/main.c    **** 	MX_TIM14_Init();
 169:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim14);
 170:Src/main.c    **** 	TIM14->CR1 &= ~(1UL);
 171:Src/main.c    **** 
 172:Src/main.c    **** 	MX_TIM15_Init();
 173:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim15);
 174:Src/main.c    **** 	TIM15->CR1 &= ~(1UL);
 175:Src/main.c    **** 
 176:Src/main.c    **** 	USER_TIM2_Init();
 177:Src/main.c    **** 
 178:Src/main.c    **** 	HAL_TIM_Base_Start(&htim2);
 179:Src/main.c    **** 	HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 180:Src/main.c    **** 
 181:Src/main.c    ****   /* USER CODE BEGIN 2 */
 182:Src/main.c    **** 
 183:Src/main.c    ****   //USB-MIDI Init
 184:Src/main.c    ****   MX_USB_MIDI_INIT();
 185:Src/main.c    **** 
 186:Src/main.c    **** 
 187:Src/main.c    ****   if(FUNC_ERROR == midiInit() ){
 188:Src/main.c    **** 	  while(1){
 189:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 190:Src/main.c    **** 		  HAL_Delay(500);
 191:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 192:Src/main.c    **** 		  HAL_Delay(500);
 193:Src/main.c    **** 	  }
 194:Src/main.c    ****   }
 195:Src/main.c    **** 
 196:Src/main.c    ****   //Wait usb configuration.
 197:Src/main.c    ****   while(1){
 198:Src/main.c    **** 	  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 199:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 200:Src/main.c    **** 		  break;
 201:Src/main.c    **** 	  }else{
 202:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 203:Src/main.c    **** 	  }
 204:Src/main.c    ****   }
 205:Src/main.c    **** 
ARM GAS  /tmp/ccyc2a9R.s 			page 5


 206:Src/main.c    ****   while (1)
 207:Src/main.c    ****   {
 208:Src/main.c    ****   //Wait USB configuration when USB connection error has occurred.
 209:Src/main.c    **** 	  while(1){
 210:Src/main.c    **** 			if (HAL_GPIO_ReadPin(BUTTON_GPIO, BUTTON_PIN)) {
 211:Src/main.c    **** 				dfu_otter_bootloader();
 212:Src/main.c    **** 			}
 213:Src/main.c    **** 				//HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 214:Src/main.c    **** 			if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 215:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 216:Src/main.c    **** 			  break;
 217:Src/main.c    **** 		  }else{
 218:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 219:Src/main.c    **** 			  HAL_Delay(200);
 220:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 221:Src/main.c    **** 			  HAL_Delay(200);
 222:Src/main.c    **** 		  }
 223:Src/main.c    **** 	  }
 224:Src/main.c    **** 
 225:Src/main.c    **** 		curTone0 = 0;
 226:Src/main.c    **** 		curTone1 = 0;
 227:Src/main.c    **** 
 228:Src/main.c    **** 	  for( int i = 0; i < 16; i++ ) { // find max pitch from all channels
 229:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 230:Src/main.c    **** 	          curTone1 = curTone0;
 231:Src/main.c    **** 	          curTone0 = freqs[i];
 232:Src/main.c    **** 	      }
 233:Src/main.c    **** 	      else if( freqs[i] > curTone1 ) {
 234:Src/main.c    **** 	          curTone1 = freqs[i];
 235:Src/main.c    **** 	      }
 236:Src/main.c    **** 	  }
 237:Src/main.c    **** 
 238:Src/main.c    **** 		if (curTone0 > 20 && curTone0 != lastTone0) { // play one tone using TIM14
 239:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 240:Src/main.c    **** 			TIM14->CNT = 0;
 241:Src/main.c    **** 			TIM14->ARR = curPeriode0;
 242:Src/main.c    **** 			TIM14->CR1 = TIM14->CR1 | 1;
 243:Src/main.c    **** 			lastTone0 = curTone0;
 244:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 245:Src/main.c    **** 
 246:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, SET);
 247:Src/main.c    **** 		} else if (curTone0 < 20 && curTone0 != lastTone0) {
 248:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 249:Src/main.c    ****       curPeriode0 = 0;
 250:Src/main.c    **** 
 251:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, RESET);
 252:Src/main.c    **** 		}
 253:Src/main.c    **** 
 254:Src/main.c    **** 		if (curTone1 > 20 && curTone1 != lastTone1) { // play other polyphonic tone ussing TIM15
 255:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 256:Src/main.c    **** 			TIM15->CNT = 0;
 257:Src/main.c    **** 			TIM15->ARR = curPeriode1;
 258:Src/main.c    **** 			TIM15->CR1 = TIM15->CR1 | 1;
 259:Src/main.c    **** 			lastTone1 = curTone1;
 260:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 261:Src/main.c    **** 		} else if (curTone1 < 20 && curTone1 != lastTone1) {
 262:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
ARM GAS  /tmp/ccyc2a9R.s 			page 6


 263:Src/main.c    ****       curPeriode1 = 0;
 264:Src/main.c    **** 		}
 265:Src/main.c    **** 
 266:Src/main.c    **** 		if ((HAL_GetTick() - noteTimeout) > 1000) {
 267:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 268:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 269:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 270:Src/main.c    **** 				freqs[i] = 0;
 271:Src/main.c    **** 			}
 272:Src/main.c    **** 
 273:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, RESET);
 274:Src/main.c    **** 		}
 275:Src/main.c    **** 
 276:Src/main.c    **** 
 277:Src/main.c    **** 		//[USB-MIDI IN] to [MIDI JACK OUT]
 278:Src/main.c    **** 
 279:Src/main.c    **** 		if( FUNC_SUCCESS == midiGetFromUsbRx(0, &uart_tx_dat)){
 280:Src/main.c    **** 			if (uart_tx_dat >> 7 == 1) {
 281:Src/main.c    **** 				midiBuffer[0] = uart_tx_dat;
 282:Src/main.c    **** 				midiBuffer[1] = 0;
 283:Src/main.c    **** 				midiBuffer[2] = 0;
 284:Src/main.c    **** 				midiState = 1;
 285:Src/main.c    **** 			} else if (midiState == 1) {
 286:Src/main.c    **** 				midiBuffer[1] = uart_tx_dat;
 287:Src/main.c    **** 				midiState = 2;
 288:Src/main.c    **** 			} else if (midiState == 2) {
 289:Src/main.c    **** 				midiBuffer[2] = uart_tx_dat;
 290:Src/main.c    **** 				midiState = 3;
 291:Src/main.c    **** 
 292:Src/main.c    **** 				if ((midiBuffer[0] & 0xF0) == 0x90) { // Note on, 2 data bytes
 293:Src/main.c    **** 					char key = midiBuffer[1];
 294:Src/main.c    **** 					char vel = midiBuffer[2];
 295:Src/main.c    **** 
 296:Src/main.c    **** 					uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 297:Src/main.c    **** 					curChannel = midiBuffer[0] & 0xF;
 298:Src/main.c    **** 					freqs[curChannel] = freq;
 299:Src/main.c    **** 
 300:Src/main.c    **** 
 301:Src/main.c    **** 				} if ((midiBuffer[0] &0xF0) == 0x80) { // Note off, 2 data bytes
 302:Src/main.c    **** 					char key = midiBuffer[1];
 303:Src/main.c    **** 					char vel = midiBuffer[2];
 304:Src/main.c    **** 
 305:Src/main.c    **** 					uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 306:Src/main.c    **** 
 307:Src/main.c    **** 					//if (freqs[midiBuffer[0] & 0xF] == freq) {
 308:Src/main.c    **** 					freqs[midiBuffer[0] & 0xF] = 0;
 309:Src/main.c    **** 					//}
 310:Src/main.c    **** 				}
 311:Src/main.c    **** 			}
 312:Src/main.c    **** 		}
 313:Src/main.c    **** 
 314:Src/main.c    **** 	//[MIDI JACK IN] to [USB-MIDI OUT]
 315:Src/main.c    **** 	//midiProcess();
 316:Src/main.c    **** 
 317:Src/main.c    **** 
 318:Src/main.c    ****   }
 319:Src/main.c    ****   /* USER CODE END 3 */
ARM GAS  /tmp/ccyc2a9R.s 			page 7


 320:Src/main.c    **** 
 321:Src/main.c    **** }
 322:Src/main.c    **** 
 323:Src/main.c    **** /** System Clock Configuration
 324:Src/main.c    **** */
 325:Src/main.c    **** void SystemClock_Config(void)
 326:Src/main.c    **** {
 327:Src/main.c    **** 
 328:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 329:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 330:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 331:Src/main.c    **** 
 332:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 333:Src/main.c    ****     */
 334:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 335:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 336:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 337:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 338:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 339:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 340:Src/main.c    ****   {
 341:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 342:Src/main.c    ****   }
 343:Src/main.c    **** 
 344:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 345:Src/main.c    ****     */
 346:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 347:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 348:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 349:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 350:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 351:Src/main.c    **** 
 352:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 353:Src/main.c    ****   {
 354:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 355:Src/main.c    ****   }
 356:Src/main.c    **** 
 357:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 358:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 359:Src/main.c    **** 
 360:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 361:Src/main.c    ****   {
 362:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 363:Src/main.c    ****   }
 364:Src/main.c    **** 
 365:Src/main.c    ****     /**Configure the Systick interrupt time
 366:Src/main.c    ****     */
 367:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 368:Src/main.c    **** 
 369:Src/main.c    ****     /**Configure the Systick
 370:Src/main.c    ****     */
 371:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 372:Src/main.c    **** 
 373:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 374:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 375:Src/main.c    **** }
 376:Src/main.c    **** 
ARM GAS  /tmp/ccyc2a9R.s 			page 8


 377:Src/main.c    **** 
 378:Src/main.c    **** /* TIM14 init function */
 379:Src/main.c    **** static void MX_TIM14_Init(void)
 380:Src/main.c    **** {
 381:Src/main.c    ****   htim14.Instance = TIM14;
 382:Src/main.c    ****   htim14.Init.Prescaler = 11;
 383:Src/main.c    ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 384:Src/main.c    ****   htim14.Init.Period = 1000;
 385:Src/main.c    ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 386:Src/main.c    ****   htim14.Init.RepetitionCounter = 0;
 387:Src/main.c    ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 388:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 389:Src/main.c    ****   {
 390:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 391:Src/main.c    ****   }
 392:Src/main.c    **** }
 393:Src/main.c    **** 
 394:Src/main.c    **** /* TIM15 init function */
 395:Src/main.c    **** static void MX_TIM15_Init(void)
 396:Src/main.c    **** {
 397:Src/main.c    ****   htim15.Instance = TIM15;
 398:Src/main.c    ****   htim15.Init.Prescaler = 11;
 399:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 400:Src/main.c    ****   htim15.Init.Period = 1000;
 401:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 402:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 403:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 404:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 405:Src/main.c    ****   {
 406:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 407:Src/main.c    ****   }
 408:Src/main.c    **** }
 409:Src/main.c    **** 
 410:Src/main.c    **** static void USER_TIM2_Init(void) {
 411:Src/main.c    **** 	__HAL_RCC_TIM2_CLK_ENABLE();
 412:Src/main.c    **** 
 413:Src/main.c    **** 	TIM_ClockConfigTypeDef sClockSourceConfig;
 414:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig;
 415:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC;
 416:Src/main.c    **** 
 417:Src/main.c    **** 	htim2.Instance = TIM2;
 418:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 419:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 420:Src/main.c    **** 	htim2.Init.Period = 3200;
 421:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 422:Src/main.c    **** 	HAL_TIM_Base_Init(&htim2);
 423:Src/main.c    **** 
 424:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 425:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 426:Src/main.c    **** 	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 427:Src/main.c    **** 
 428:Src/main.c    **** 	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 429:Src/main.c    **** 	sConfigOC.Pulse = 1;
 430:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 431:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 432:Src/main.c    **** 	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 433:Src/main.c    **** 
ARM GAS  /tmp/ccyc2a9R.s 			page 9


 434:Src/main.c    **** 	HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE);
 435:Src/main.c    **** 	HAL_TIM_MspPostInit(&htim2);
 436:Src/main.c    **** }
 437:Src/main.c    **** 
 438:Src/main.c    **** /* DAC init function */
 439:Src/main.c    **** static void MX_DAC_Init(void)
 440:Src/main.c    **** {
 441:Src/main.c    **** 
 442:Src/main.c    ****   DAC_ChannelConfTypeDef sConfig;
 443:Src/main.c    **** 
 444:Src/main.c    ****     /**DAC Initialization
 445:Src/main.c    ****     */
 446:Src/main.c    ****   hdac.Instance = DAC;
 447:Src/main.c    ****   if (HAL_DAC_Init(&hdac) != HAL_OK)
 448:Src/main.c    ****   {
 449:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 450:Src/main.c    ****   }
 451:Src/main.c    **** 
 452:Src/main.c    ****     /**DAC channel OUT1 config
 453:Src/main.c    ****     */
 454:Src/main.c    ****   sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 455:Src/main.c    ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 456:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 457:Src/main.c    ****   {
 458:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 459:Src/main.c    ****   }
 460:Src/main.c    **** 
 461:Src/main.c    **** }
 462:Src/main.c    **** 
 463:Src/main.c    **** 
 464:Src/main.c    **** 
 465:Src/main.c    **** /**
 466:Src/main.c    ****   * Enable DMA controller clock
 467:Src/main.c    ****   */
 468:Src/main.c    **** 
 469:Src/main.c    **** 
 470:Src/main.c    **** /** Configure pins as
 471:Src/main.c    ****         * Analog
 472:Src/main.c    ****         * Input
 473:Src/main.c    ****         * Output
 474:Src/main.c    ****         * EVENT_OUT
 475:Src/main.c    ****         * EXTI
 476:Src/main.c    **** */
 477:Src/main.c    **** static void MX_GPIO_Init(void)
 478:Src/main.c    **** {
  25              		.loc 1 478 0
  26              		.cfi_startproc
  27 0000 30B5     		push	{r4, r5, lr}
  28              	.LCFI0:
  29              		.cfi_def_cfa_offset 12
  30              		.cfi_offset 4, -12
  31              		.cfi_offset 5, -8
  32              		.cfi_offset 14, -4
  33 0002 89B0     		sub	sp, sp, #36
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 48
  36              	.LBB8:
ARM GAS  /tmp/ccyc2a9R.s 			page 10


 479:Src/main.c    **** 
 480:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 481:Src/main.c    **** 
 482:Src/main.c    ****   /* GPIO Ports Clock Enable */
 483:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  37              		.loc 1 483 0
  38 0004 184B     		ldr	r3, .L2
  39 0006 5969     		ldr	r1, [r3, #20]
  40 0008 8022     		mov	r2, #128
  41 000a D203     		lsl	r2, r2, #15
  42 000c 1143     		orr	r1, r2
  43 000e 5961     		str	r1, [r3, #20]
  44 0010 5969     		ldr	r1, [r3, #20]
  45 0012 0A40     		and	r2, r1
  46 0014 0092     		str	r2, [sp]
  47 0016 009A     		ldr	r2, [sp]
  48              	.LBE8:
  49              	.LBB9:
 484:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  50              		.loc 1 484 0
  51 0018 5969     		ldr	r1, [r3, #20]
  52 001a 8022     		mov	r2, #128
  53 001c 9202     		lsl	r2, r2, #10
  54 001e 1143     		orr	r1, r2
  55 0020 5961     		str	r1, [r3, #20]
  56 0022 5969     		ldr	r1, [r3, #20]
  57 0024 0A40     		and	r2, r1
  58 0026 0192     		str	r2, [sp, #4]
  59 0028 019A     		ldr	r2, [sp, #4]
  60              	.LBE9:
  61              	.LBB10:
 485:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  62              		.loc 1 485 0
  63 002a 5969     		ldr	r1, [r3, #20]
  64 002c 8022     		mov	r2, #128
  65 002e D202     		lsl	r2, r2, #11
  66 0030 1143     		orr	r1, r2
  67 0032 5961     		str	r1, [r3, #20]
  68 0034 5B69     		ldr	r3, [r3, #20]
  69 0036 1A40     		and	r2, r3
  70 0038 0292     		str	r2, [sp, #8]
  71 003a 029B     		ldr	r3, [sp, #8]
  72              	.LBE10:
 486:Src/main.c    **** 
 487:Src/main.c    ****   /*Configure GPIO pin Output Level */
 488:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
  73              		.loc 1 488 0
  74 003c 9024     		mov	r4, #144
  75 003e E405     		lsl	r4, r4, #23
  76 0040 8425     		mov	r5, #132
  77 0042 2D02     		lsl	r5, r5, #8
  78 0044 201C     		mov	r0, r4
  79 0046 291C     		mov	r1, r5
  80 0048 0022     		mov	r2, #0
  81 004a FFF7FEFF 		bl	HAL_GPIO_WritePin
  82              	.LVL0:
 489:Src/main.c    **** 
ARM GAS  /tmp/ccyc2a9R.s 			page 11


 490:Src/main.c    ****   /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
 491:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
  83              		.loc 1 491 0
  84 004e 0395     		str	r5, [sp, #12]
 492:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  85              		.loc 1 492 0
  86 0050 0123     		mov	r3, #1
  87 0052 0493     		str	r3, [sp, #16]
 493:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  88              		.loc 1 493 0
  89 0054 0023     		mov	r3, #0
  90 0056 0593     		str	r3, [sp, #20]
 494:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  91              		.loc 1 494 0
  92 0058 0693     		str	r3, [sp, #24]
 495:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  93              		.loc 1 495 0
  94 005a 201C     		mov	r0, r4
  95 005c 03A9     		add	r1, sp, #12
  96 005e FFF7FEFF 		bl	HAL_GPIO_Init
  97              	.LVL1:
 496:Src/main.c    **** }
  98              		.loc 1 496 0
  99 0062 09B0     		add	sp, sp, #36
 100              		@ sp needed
 101 0064 30BD     		pop	{r4, r5, pc}
 102              	.L3:
 103 0066 C046     		.align	2
 104              	.L2:
 105 0068 00100240 		.word	1073876992
 106              		.cfi_endproc
 107              	.LFE42:
 109              		.section	.text.USER_TIM2_Init,"ax",%progbits
 110              		.align	2
 111              		.code	16
 112              		.thumb_func
 114              	USER_TIM2_Init:
 115              	.LFB40:
 410:Src/main.c    **** static void USER_TIM2_Init(void) {
 116              		.loc 1 410 0
 117              		.cfi_startproc
 118 0000 70B5     		push	{r4, r5, r6, lr}
 119              	.LCFI2:
 120              		.cfi_def_cfa_offset 16
 121              		.cfi_offset 4, -16
 122              		.cfi_offset 5, -12
 123              		.cfi_offset 6, -8
 124              		.cfi_offset 14, -4
 125 0002 8AB0     		sub	sp, sp, #40
 126              	.LCFI3:
 127              		.cfi_def_cfa_offset 56
 128              	.LBB11:
 411:Src/main.c    **** 	__HAL_RCC_TIM2_CLK_ENABLE();
 129              		.loc 1 411 0
 130 0004 194B     		ldr	r3, .L5
 131 0006 DA69     		ldr	r2, [r3, #28]
 132 0008 0126     		mov	r6, #1
ARM GAS  /tmp/ccyc2a9R.s 			page 12


 133 000a 3243     		orr	r2, r6
 134 000c DA61     		str	r2, [r3, #28]
 135 000e DB69     		ldr	r3, [r3, #28]
 136 0010 3340     		and	r3, r6
 137 0012 0093     		str	r3, [sp]
 138 0014 009B     		ldr	r3, [sp]
 139              	.LBE11:
 417:Src/main.c    **** 	htim2.Instance = TIM2;
 140              		.loc 1 417 0
 141 0016 164C     		ldr	r4, .L5+4
 142 0018 8023     		mov	r3, #128
 143 001a DB05     		lsl	r3, r3, #23
 144 001c 2360     		str	r3, [r4]
 418:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 145              		.loc 1 418 0
 146 001e 0025     		mov	r5, #0
 147 0020 6560     		str	r5, [r4, #4]
 419:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 148              		.loc 1 419 0
 149 0022 A560     		str	r5, [r4, #8]
 420:Src/main.c    **** 	htim2.Init.Period = 3200;
 150              		.loc 1 420 0
 151 0024 C823     		mov	r3, #200
 152 0026 1B01     		lsl	r3, r3, #4
 153 0028 E360     		str	r3, [r4, #12]
 421:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 154              		.loc 1 421 0
 155 002a 8023     		mov	r3, #128
 156 002c 9B00     		lsl	r3, r3, #2
 157 002e 2361     		str	r3, [r4, #16]
 422:Src/main.c    **** 	HAL_TIM_Base_Init(&htim2);
 158              		.loc 1 422 0
 159 0030 201C     		mov	r0, r4
 160 0032 FFF7FEFF 		bl	HAL_TIM_Base_Init
 161              	.LVL2:
 424:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 162              		.loc 1 424 0
 163 0036 0895     		str	r5, [sp, #32]
 425:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 164              		.loc 1 425 0
 165 0038 0995     		str	r5, [sp, #36]
 426:Src/main.c    **** 	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 166              		.loc 1 426 0
 167 003a 201C     		mov	r0, r4
 168 003c 08A9     		add	r1, sp, #32
 169 003e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 170              	.LVL3:
 428:Src/main.c    **** 	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 171              		.loc 1 428 0
 172 0042 6023     		mov	r3, #96
 173 0044 0193     		str	r3, [sp, #4]
 429:Src/main.c    **** 	sConfigOC.Pulse = 1;
 174              		.loc 1 429 0
 175 0046 0296     		str	r6, [sp, #8]
 430:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 176              		.loc 1 430 0
 177 0048 0223     		mov	r3, #2
ARM GAS  /tmp/ccyc2a9R.s 			page 13


 178 004a 0393     		str	r3, [sp, #12]
 431:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 179              		.loc 1 431 0
 180 004c 0595     		str	r5, [sp, #20]
 432:Src/main.c    **** 	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 181              		.loc 1 432 0
 182 004e 201C     		mov	r0, r4
 183 0050 01A9     		add	r1, sp, #4
 184 0052 0422     		mov	r2, #4
 185 0054 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 186              	.LVL4:
 434:Src/main.c    **** 	HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE);
 187              		.loc 1 434 0
 188 0058 201C     		mov	r0, r4
 189 005a 0821     		mov	r1, #8
 190 005c FFF7FEFF 		bl	HAL_TIM_OnePulse_Init
 191              	.LVL5:
 435:Src/main.c    **** 	HAL_TIM_MspPostInit(&htim2);
 192              		.loc 1 435 0
 193 0060 201C     		mov	r0, r4
 194 0062 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 195              	.LVL6:
 436:Src/main.c    **** }
 196              		.loc 1 436 0
 197 0066 0AB0     		add	sp, sp, #40
 198              		@ sp needed
 199 0068 70BD     		pop	{r4, r5, r6, pc}
 200              	.L6:
 201 006a C046     		.align	2
 202              	.L5:
 203 006c 00100240 		.word	1073876992
 204 0070 00000000 		.word	htim2
 205              		.cfi_endproc
 206              	.LFE40:
 208              		.section	.text.dfu_otter_bootloader,"ax",%progbits
 209              		.align	2
 210              		.global	dfu_otter_bootloader
 211              		.code	16
 212              		.thumb_func
 214              	dfu_otter_bootloader:
 215              	.LFB34:
  88:Src/main.c    **** {
 216              		.loc 1 88 0
 217              		.cfi_startproc
  89:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 218              		.loc 1 89 0
 219 0000 054A     		ldr	r2, .L9
 220 0002 064B     		ldr	r3, .L9+4
 221 0004 1A60     		str	r2, [r3]
 222              	.LBB20:
 223              	.LBB21:
 224              	.LBB22:
 225              	.LBB23:
 226              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
ARM GAS  /tmp/ccyc2a9R.s 			page 14


   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
ARM GAS  /tmp/ccyc2a9R.s 			page 15


  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
ARM GAS  /tmp/ccyc2a9R.s 			page 16


 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccyc2a9R.s 			page 17


 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccyc2a9R.s 			page 18


 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccyc2a9R.s 			page 19


 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
ARM GAS  /tmp/ccyc2a9R.s 			page 20


 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
ARM GAS  /tmp/ccyc2a9R.s 			page 21


 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 227              		.loc 2 429 0
 228              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 229 0006 BFF34F8F 		dsb 0xF
 230              	@ 0 "" 2
 231              		.code	16
 232              	.LBE23:
 233              	.LBE22:
 234              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
ARM GAS  /tmp/ccyc2a9R.s 			page 22


  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
ARM GAS  /tmp/ccyc2a9R.s 			page 23


  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0.h **** 
 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
ARM GAS  /tmp/ccyc2a9R.s 			page 24


 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0.h **** 
 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0.h **** 
 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
ARM GAS  /tmp/ccyc2a9R.s 			page 25


 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:Drivers/CMSIS/Include/core_cm0.h **** 
 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
ARM GAS  /tmp/ccyc2a9R.s 			page 26


 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
ARM GAS  /tmp/ccyc2a9R.s 			page 27


 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
 358:Drivers/CMSIS/Include/core_cm0.h **** 
 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
ARM GAS  /tmp/ccyc2a9R.s 			page 28


 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:Drivers/CMSIS/Include/core_cm0.h **** 
 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccyc2a9R.s 			page 29


 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccyc2a9R.s 			page 30


 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0.h **** 
 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:Drivers/CMSIS/Include/core_cm0.h **** 
 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
ARM GAS  /tmp/ccyc2a9R.s 			page 31


 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:Drivers/CMSIS/Include/core_cm0.h **** 
 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
ARM GAS  /tmp/ccyc2a9R.s 			page 32


 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:Drivers/CMSIS/Include/core_cm0.h **** /**
 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:Drivers/CMSIS/Include/core_cm0.h **** }
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:Drivers/CMSIS/Include/core_cm0.h **** }
 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
ARM GAS  /tmp/ccyc2a9R.s 			page 33


 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:Drivers/CMSIS/Include/core_cm0.h **** {
 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 656:Drivers/CMSIS/Include/core_cm0.h **** }
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:Drivers/CMSIS/Include/core_cm0.h ****   }
 700:Drivers/CMSIS/Include/core_cm0.h **** }
 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
ARM GAS  /tmp/ccyc2a9R.s 			page 34


 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
 723:Drivers/CMSIS/Include/core_cm0.h **** }
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 235              		.loc 3 734 0
 236 000a 054A     		ldr	r2, .L9+8
 237 000c 054B     		ldr	r3, .L9+12
 238 000e DA60     		str	r2, [r3, #12]
 239              	.LBB24:
 240              	.LBB25:
 241              		.loc 2 429 0
 242              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 243 0010 BFF34F8F 		dsb 0xF
 244              	@ 0 "" 2
 245              		.code	16
 246              	.L8:
 247              	.LBE25:
 248              	.LBE24:
 249              	.LBB26:
 250              	.LBB27:
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 251              		.loc 2 375 0
 252              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 253 0014 C046     		nop
 254              	@ 0 "" 2
 255              		.code	16
 256 0016 FDE7     		b	.L8
 257              	.L10:
 258              		.align	2
 259              	.L9:
 260 0018 EFBEADDE 		.word	-559038737
 261 001c F03F0020 		.word	536887280
 262 0020 0400FA05 		.word	100270084
ARM GAS  /tmp/ccyc2a9R.s 			page 35


 263 0024 00ED00E0 		.word	-536810240
 264              	.LBE27:
 265              	.LBE26:
 266              	.LBE21:
 267              	.LBE20:
 268              		.cfi_endproc
 269              	.LFE34:
 271              		.global	__aeabi_uidiv
 272              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 273              		.align	2
 274              		.global	HAL_TIM_PeriodElapsedCallback
 275              		.code	16
 276              		.thumb_func
 278              	HAL_TIM_PeriodElapsedCallback:
 279              	.LFB35:
 100:Src/main.c    **** {
 280              		.loc 1 100 0
 281              		.cfi_startproc
 282              	.LVL7:
 283 0000 10B5     		push	{r4, lr}
 284              	.LCFI4:
 285              		.cfi_def_cfa_offset 8
 286              		.cfi_offset 4, -8
 287              		.cfi_offset 14, -4
 288 0002 041C     		mov	r4, r0
 101:Src/main.c    **** 	if(htim->Instance == TIM14)
 289              		.loc 1 101 0
 290 0004 154B     		ldr	r3, .L14
 291 0006 0268     		ldr	r2, [r0]
 292 0008 9A42     		cmp	r2, r3
 293 000a 10D1     		bne	.L12
 104:Src/main.c    ****     if (TIM2->CNT == 0) {
 294              		.loc 1 104 0
 295 000c 8023     		mov	r3, #128
 296 000e DB05     		lsl	r3, r3, #23
 297 0010 5B6A     		ldr	r3, [r3, #36]
 298 0012 002B     		cmp	r3, #0
 299 0014 0BD1     		bne	.L12
 105:Src/main.c    ****       TIM2->ARR = (uint32_t)(curPeriode0 / 5);
 300              		.loc 1 105 0
 301 0016 124B     		ldr	r3, .L14+4
 302 0018 1868     		ldr	r0, [r3]
 303              	.LVL8:
 304 001a 0521     		mov	r1, #5
 305 001c FFF7FEFF 		bl	__aeabi_uidiv
 306              	.LVL9:
 307 0020 8023     		mov	r3, #128
 308 0022 DB05     		lsl	r3, r3, #23
 309 0024 D862     		str	r0, [r3, #44]
 106:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 310              		.loc 1 106 0
 311 0026 1968     		ldr	r1, [r3]
 312 0028 0122     		mov	r2, #1
 313 002a 0A43     		orr	r2, r1
 314 002c 1A60     		str	r2, [r3]
 315              	.L12:
 109:Src/main.c    **** 	if(htim->Instance == TIM15)
ARM GAS  /tmp/ccyc2a9R.s 			page 36


 316              		.loc 1 109 0
 317 002e 2268     		ldr	r2, [r4]
 318 0030 0C4B     		ldr	r3, .L14+8
 319 0032 9A42     		cmp	r2, r3
 320 0034 10D1     		bne	.L11
 112:Src/main.c    ****     if (TIM2->CNT == 0) {
 321              		.loc 1 112 0
 322 0036 8023     		mov	r3, #128
 323 0038 DB05     		lsl	r3, r3, #23
 324 003a 5B6A     		ldr	r3, [r3, #36]
 325 003c 002B     		cmp	r3, #0
 326 003e 0BD1     		bne	.L11
 113:Src/main.c    ****     	TIM2->ARR = (uint32_t)(curPeriode1 / 10);
 327              		.loc 1 113 0
 328 0040 094B     		ldr	r3, .L14+12
 329 0042 1868     		ldr	r0, [r3]
 330 0044 0A21     		mov	r1, #10
 331 0046 FFF7FEFF 		bl	__aeabi_uidiv
 332              	.LVL10:
 333 004a 8023     		mov	r3, #128
 334 004c DB05     		lsl	r3, r3, #23
 335 004e D862     		str	r0, [r3, #44]
 114:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 336              		.loc 1 114 0
 337 0050 1968     		ldr	r1, [r3]
 338 0052 0122     		mov	r2, #1
 339 0054 0A43     		orr	r2, r1
 340 0056 1A60     		str	r2, [r3]
 341              	.L11:
 117:Src/main.c    **** }
 342              		.loc 1 117 0
 343              		@ sp needed
 344              	.LVL11:
 345 0058 10BD     		pop	{r4, pc}
 346              	.L15:
 347 005a C046     		.align	2
 348              	.L14:
 349 005c 00200040 		.word	1073750016
 350 0060 00000000 		.word	.LANCHOR0
 351 0064 00400140 		.word	1073823744
 352 0068 00000000 		.word	.LANCHOR1
 353              		.cfi_endproc
 354              	.LFE35:
 356              		.section	.text._Error_Handler,"ax",%progbits
 357              		.align	2
 358              		.global	_Error_Handler
 359              		.code	16
 360              		.thumb_func
 362              	_Error_Handler:
 363              	.LFB43:
 497:Src/main.c    **** 
 498:Src/main.c    **** /* USER CODE BEGIN 4 */
 499:Src/main.c    **** 
 500:Src/main.c    **** /* USER CODE END 4 */
 501:Src/main.c    **** 
 502:Src/main.c    **** /**
 503:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
ARM GAS  /tmp/ccyc2a9R.s 			page 37


 504:Src/main.c    ****   * @param  file: The file name as string.
 505:Src/main.c    ****   * @param  line: The line in file as a number.
 506:Src/main.c    ****   * @retval None
 507:Src/main.c    ****   */
 508:Src/main.c    **** void _Error_Handler(char *file, int line)
 509:Src/main.c    **** {
 364              		.loc 1 509 0
 365              		.cfi_startproc
 366              	.LVL12:
 367              	.L17:
 368 0000 FEE7     		b	.L17
 369              		.cfi_endproc
 370              	.LFE43:
 372 0002 C046     		.section	.text.MX_DAC_Init,"ax",%progbits
 373              		.align	2
 374              		.code	16
 375              		.thumb_func
 377              	MX_DAC_Init:
 378              	.LFB41:
 440:Src/main.c    **** {
 379              		.loc 1 440 0
 380              		.cfi_startproc
 440:Src/main.c    **** {
 381              		.loc 1 440 0
 382 0000 00B5     		push	{lr}
 383              	.LCFI5:
 384              		.cfi_def_cfa_offset 4
 385              		.cfi_offset 14, -4
 386 0002 83B0     		sub	sp, sp, #12
 387              	.LCFI6:
 388              		.cfi_def_cfa_offset 16
 446:Src/main.c    ****   hdac.Instance = DAC;
 389              		.loc 1 446 0
 390 0004 0E48     		ldr	r0, .L21
 391 0006 0F4B     		ldr	r3, .L21+4
 392 0008 0360     		str	r3, [r0]
 447:Src/main.c    ****   if (HAL_DAC_Init(&hdac) != HAL_OK)
 393              		.loc 1 447 0
 394 000a FFF7FEFF 		bl	HAL_DAC_Init
 395              	.LVL13:
 396 000e 0028     		cmp	r0, #0
 397 0010 04D0     		beq	.L19
 449:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 398              		.loc 1 449 0
 399 0012 0D48     		ldr	r0, .L21+8
 400 0014 C221     		mov	r1, #194
 401 0016 FF31     		add	r1, r1, #255
 402 0018 FFF7FEFF 		bl	_Error_Handler
 403              	.LVL14:
 404              	.L19:
 454:Src/main.c    ****   sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 405              		.loc 1 454 0
 406 001c 0023     		mov	r3, #0
 407 001e 0093     		str	r3, [sp]
 455:Src/main.c    ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 408              		.loc 1 455 0
 409 0020 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccyc2a9R.s 			page 38


 456:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 410              		.loc 1 456 0
 411 0022 0748     		ldr	r0, .L21
 412 0024 6946     		mov	r1, sp
 413 0026 0022     		mov	r2, #0
 414 0028 FFF7FEFF 		bl	HAL_DAC_ConfigChannel
 415              	.LVL15:
 416 002c 0028     		cmp	r0, #0
 417 002e 04D0     		beq	.L18
 458:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 418              		.loc 1 458 0
 419 0030 0548     		ldr	r0, .L21+8
 420 0032 E521     		mov	r1, #229
 421 0034 4900     		lsl	r1, r1, #1
 422 0036 FFF7FEFF 		bl	_Error_Handler
 423              	.LVL16:
 424              	.L18:
 461:Src/main.c    **** }
 425              		.loc 1 461 0
 426 003a 03B0     		add	sp, sp, #12
 427              		@ sp needed
 428 003c 00BD     		pop	{pc}
 429              	.L22:
 430 003e C046     		.align	2
 431              	.L21:
 432 0040 00000000 		.word	hdac
 433 0044 00740040 		.word	1073771520
 434 0048 00000000 		.word	.LC4
 435              		.cfi_endproc
 436              	.LFE41:
 438              		.section	.text.MX_TIM14_Init,"ax",%progbits
 439              		.align	2
 440              		.code	16
 441              		.thumb_func
 443              	MX_TIM14_Init:
 444              	.LFB38:
 380:Src/main.c    **** {
 445              		.loc 1 380 0
 446              		.cfi_startproc
 447 0000 08B5     		push	{r3, lr}
 448              	.LCFI7:
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 3, -8
 451              		.cfi_offset 14, -4
 381:Src/main.c    ****   htim14.Instance = TIM14;
 452              		.loc 1 381 0
 453 0002 0C48     		ldr	r0, .L25
 454 0004 0C4B     		ldr	r3, .L25+4
 455 0006 0360     		str	r3, [r0]
 382:Src/main.c    ****   htim14.Init.Prescaler = 11;
 456              		.loc 1 382 0
 457 0008 0B23     		mov	r3, #11
 458 000a 4360     		str	r3, [r0, #4]
 383:Src/main.c    ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 459              		.loc 1 383 0
 460 000c 0023     		mov	r3, #0
 461 000e 8360     		str	r3, [r0, #8]
ARM GAS  /tmp/ccyc2a9R.s 			page 39


 384:Src/main.c    ****   htim14.Init.Period = 1000;
 462              		.loc 1 384 0
 463 0010 FA22     		mov	r2, #250
 464 0012 9200     		lsl	r2, r2, #2
 465 0014 C260     		str	r2, [r0, #12]
 385:Src/main.c    ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 466              		.loc 1 385 0
 467 0016 8022     		mov	r2, #128
 468 0018 9200     		lsl	r2, r2, #2
 469 001a 0261     		str	r2, [r0, #16]
 386:Src/main.c    ****   htim14.Init.RepetitionCounter = 0;
 470              		.loc 1 386 0
 471 001c 4361     		str	r3, [r0, #20]
 387:Src/main.c    ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 472              		.loc 1 387 0
 473 001e 8361     		str	r3, [r0, #24]
 388:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 474              		.loc 1 388 0
 475 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 476              	.LVL17:
 477 0024 0028     		cmp	r0, #0
 478 0026 04D0     		beq	.L23
 390:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 479              		.loc 1 390 0
 480 0028 0448     		ldr	r0, .L25+8
 481 002a C321     		mov	r1, #195
 482 002c 4900     		lsl	r1, r1, #1
 483 002e FFF7FEFF 		bl	_Error_Handler
 484              	.LVL18:
 485              	.L23:
 392:Src/main.c    **** }
 486              		.loc 1 392 0
 487              		@ sp needed
 488 0032 08BD     		pop	{r3, pc}
 489              	.L26:
 490              		.align	2
 491              	.L25:
 492 0034 00000000 		.word	htim14
 493 0038 00200040 		.word	1073750016
 494 003c 00000000 		.word	.LC4
 495              		.cfi_endproc
 496              	.LFE38:
 498              		.section	.text.MX_TIM15_Init,"ax",%progbits
 499              		.align	2
 500              		.code	16
 501              		.thumb_func
 503              	MX_TIM15_Init:
 504              	.LFB39:
 396:Src/main.c    **** {
 505              		.loc 1 396 0
 506              		.cfi_startproc
 507 0000 08B5     		push	{r3, lr}
 508              	.LCFI8:
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 3, -8
 511              		.cfi_offset 14, -4
 397:Src/main.c    ****   htim15.Instance = TIM15;
ARM GAS  /tmp/ccyc2a9R.s 			page 40


 512              		.loc 1 397 0
 513 0002 0C48     		ldr	r0, .L29
 514 0004 0C4B     		ldr	r3, .L29+4
 515 0006 0360     		str	r3, [r0]
 398:Src/main.c    ****   htim15.Init.Prescaler = 11;
 516              		.loc 1 398 0
 517 0008 0B23     		mov	r3, #11
 518 000a 4360     		str	r3, [r0, #4]
 399:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 519              		.loc 1 399 0
 520 000c 0023     		mov	r3, #0
 521 000e 8360     		str	r3, [r0, #8]
 400:Src/main.c    ****   htim15.Init.Period = 1000;
 522              		.loc 1 400 0
 523 0010 FA22     		mov	r2, #250
 524 0012 9200     		lsl	r2, r2, #2
 525 0014 C260     		str	r2, [r0, #12]
 401:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 526              		.loc 1 401 0
 527 0016 8022     		mov	r2, #128
 528 0018 9200     		lsl	r2, r2, #2
 529 001a 0261     		str	r2, [r0, #16]
 402:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 530              		.loc 1 402 0
 531 001c 4361     		str	r3, [r0, #20]
 403:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 532              		.loc 1 403 0
 533 001e 8361     		str	r3, [r0, #24]
 404:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 534              		.loc 1 404 0
 535 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 536              	.LVL19:
 537 0024 0028     		cmp	r0, #0
 538 0026 04D0     		beq	.L27
 406:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 539              		.loc 1 406 0
 540 0028 0448     		ldr	r0, .L29+8
 541 002a CB21     		mov	r1, #203
 542 002c 4900     		lsl	r1, r1, #1
 543 002e FFF7FEFF 		bl	_Error_Handler
 544              	.LVL20:
 545              	.L27:
 408:Src/main.c    **** }
 546              		.loc 1 408 0
 547              		@ sp needed
 548 0032 08BD     		pop	{r3, pc}
 549              	.L30:
 550              		.align	2
 551              	.L29:
 552 0034 00000000 		.word	htim15
 553 0038 00400140 		.word	1073823744
 554 003c 00000000 		.word	.LC4
 555              		.cfi_endproc
 556              	.LFE39:
 558              		.section	.text.SystemClock_Config,"ax",%progbits
 559              		.align	2
 560              		.global	SystemClock_Config
ARM GAS  /tmp/ccyc2a9R.s 			page 41


 561              		.code	16
 562              		.thumb_func
 564              	SystemClock_Config:
 565              	.LFB37:
 326:Src/main.c    **** {
 566              		.loc 1 326 0
 567              		.cfi_startproc
 568 0000 00B5     		push	{lr}
 569              	.LCFI9:
 570              		.cfi_def_cfa_offset 4
 571              		.cfi_offset 14, -4
 572 0002 99B0     		sub	sp, sp, #100
 573              	.LCFI10:
 574              		.cfi_def_cfa_offset 104
 334:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 575              		.loc 1 334 0
 576 0004 3023     		mov	r3, #48
 577 0006 0B93     		str	r3, [sp, #44]
 335:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 578              		.loc 1 335 0
 579 0008 0123     		mov	r3, #1
 580 000a 1393     		str	r3, [sp, #76]
 336:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 581              		.loc 1 336 0
 582 000c 1093     		str	r3, [sp, #64]
 337:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 583              		.loc 1 337 0
 584 000e 1023     		mov	r3, #16
 585 0010 1193     		str	r3, [sp, #68]
 338:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 586              		.loc 1 338 0
 587 0012 0023     		mov	r3, #0
 588 0014 1493     		str	r3, [sp, #80]
 339:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 589              		.loc 1 339 0
 590 0016 0BA8     		add	r0, sp, #44
 591 0018 FFF7FEFF 		bl	HAL_RCC_OscConfig
 592              	.LVL21:
 593 001c 0028     		cmp	r0, #0
 594 001e 04D0     		beq	.L32
 341:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 595              		.loc 1 341 0
 596 0020 1C48     		ldr	r0, .L35
 597 0022 5621     		mov	r1, #86
 598 0024 FF31     		add	r1, r1, #255
 599 0026 FFF7FEFF 		bl	_Error_Handler
 600              	.LVL22:
 601              	.L32:
 346:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 602              		.loc 1 346 0
 603 002a 0723     		mov	r3, #7
 604 002c 0793     		str	r3, [sp, #28]
 348:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 605              		.loc 1 348 0
 606 002e 0323     		mov	r3, #3
 607 0030 0893     		str	r3, [sp, #32]
 349:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /tmp/ccyc2a9R.s 			page 42


 608              		.loc 1 349 0
 609 0032 0023     		mov	r3, #0
 610 0034 0993     		str	r3, [sp, #36]
 350:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 611              		.loc 1 350 0
 612 0036 0A93     		str	r3, [sp, #40]
 352:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 613              		.loc 1 352 0
 614 0038 07A8     		add	r0, sp, #28
 615 003a 0121     		mov	r1, #1
 616 003c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 617              	.LVL23:
 618 0040 0028     		cmp	r0, #0
 619 0042 04D0     		beq	.L33
 354:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 620              		.loc 1 354 0
 621 0044 1348     		ldr	r0, .L35
 622 0046 B121     		mov	r1, #177
 623 0048 4900     		lsl	r1, r1, #1
 624 004a FFF7FEFF 		bl	_Error_Handler
 625              	.LVL24:
 626              	.L33:
 357:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 627              		.loc 1 357 0
 628 004e 8023     		mov	r3, #128
 629 0050 9B02     		lsl	r3, r3, #10
 630 0052 0093     		str	r3, [sp]
 358:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 631              		.loc 1 358 0
 632 0054 0023     		mov	r3, #0
 633 0056 0693     		str	r3, [sp, #24]
 360:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 634              		.loc 1 360 0
 635 0058 6846     		mov	r0, sp
 636 005a FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 637              	.LVL25:
 638 005e 0028     		cmp	r0, #0
 639 0060 04D0     		beq	.L34
 362:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 640              		.loc 1 362 0
 641 0062 0C48     		ldr	r0, .L35
 642 0064 B521     		mov	r1, #181
 643 0066 4900     		lsl	r1, r1, #1
 644 0068 FFF7FEFF 		bl	_Error_Handler
 645              	.LVL26:
 646              	.L34:
 367:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 647              		.loc 1 367 0
 648 006c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 649              	.LVL27:
 650 0070 FA21     		mov	r1, #250
 651 0072 8900     		lsl	r1, r1, #2
 652 0074 FFF7FEFF 		bl	__aeabi_uidiv
 653              	.LVL28:
 654 0078 FFF7FEFF 		bl	HAL_SYSTICK_Config
 655              	.LVL29:
 371:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
ARM GAS  /tmp/ccyc2a9R.s 			page 43


 656              		.loc 1 371 0
 657 007c 0420     		mov	r0, #4
 658 007e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 659              	.LVL30:
 374:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 660              		.loc 1 374 0
 661 0082 0120     		mov	r0, #1
 662 0084 4042     		neg	r0, r0
 663 0086 0021     		mov	r1, #0
 664 0088 0022     		mov	r2, #0
 665 008a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 666              	.LVL31:
 375:Src/main.c    **** }
 667              		.loc 1 375 0
 668 008e 19B0     		add	sp, sp, #100
 669              		@ sp needed
 670 0090 00BD     		pop	{pc}
 671              	.L36:
 672 0092 C046     		.align	2
 673              	.L35:
 674 0094 00000000 		.word	.LC4
 675              		.cfi_endproc
 676              	.LFE37:
 678              		.global	__aeabi_i2d
 679              		.global	__aeabi_ddiv
 680              		.global	__aeabi_dmul
 681              		.global	__aeabi_d2uiz
 682              		.section	.text.main,"ax",%progbits
 683              		.align	2
 684              		.global	main
 685              		.code	16
 686              		.thumb_func
 688              	main:
 689              	.LFB36:
 140:Src/main.c    **** {
 690              		.loc 1 140 0
 691              		.cfi_startproc
 692 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 693              	.LCFI11:
 694              		.cfi_def_cfa_offset 20
 695              		.cfi_offset 4, -20
 696              		.cfi_offset 5, -16
 697              		.cfi_offset 6, -12
 698              		.cfi_offset 7, -8
 699              		.cfi_offset 14, -4
 700 0002 5746     		mov	r7, r10
 701 0004 4E46     		mov	r6, r9
 702 0006 4546     		mov	r5, r8
 703 0008 E0B4     		push	{r5, r6, r7}
 704              	.LCFI12:
 705              		.cfi_def_cfa_offset 32
 706              		.cfi_offset 8, -32
 707              		.cfi_offset 9, -28
 708              		.cfi_offset 10, -24
 148:Src/main.c    ****   HAL_Init();
 709              		.loc 1 148 0
 710 000a FFF7FEFF 		bl	HAL_Init
ARM GAS  /tmp/ccyc2a9R.s 			page 44


 711              	.LVL32:
 155:Src/main.c    ****   SystemClock_Config();
 712              		.loc 1 155 0
 713 000e FFF7FEFF 		bl	SystemClock_Config
 714              	.LVL33:
 162:Src/main.c    ****   MX_GPIO_Init();
 715              		.loc 1 162 0
 716 0012 FFF7FEFF 		bl	MX_GPIO_Init
 717              	.LVL34:
 163:Src/main.c    **** 	MX_DAC_Init();
 718              		.loc 1 163 0
 719 0016 FFF7FEFF 		bl	MX_DAC_Init
 720              	.LVL35:
 165:Src/main.c    **** 	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 721              		.loc 1 165 0
 722 001a D54C     		ldr	r4, .L62+24
 723 001c 201C     		mov	r0, r4
 724 001e 0021     		mov	r1, #0
 725 0020 FFF7FEFF 		bl	HAL_DAC_Start
 726              	.LVL36:
 166:Src/main.c    **** 	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 727              		.loc 1 166 0
 728 0024 201C     		mov	r0, r4
 729 0026 0021     		mov	r1, #0
 730 0028 0022     		mov	r2, #0
 731 002a 8023     		mov	r3, #128
 732 002c 1B01     		lsl	r3, r3, #4
 733 002e FFF7FEFF 		bl	HAL_DAC_SetValue
 734              	.LVL37:
 168:Src/main.c    **** 	MX_TIM14_Init();
 735              		.loc 1 168 0
 736 0032 FFF7FEFF 		bl	MX_TIM14_Init
 737              	.LVL38:
 169:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim14);
 738              		.loc 1 169 0
 739 0036 CF48     		ldr	r0, .L62+28
 740 0038 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 741              	.LVL39:
 170:Src/main.c    **** 	TIM14->CR1 &= ~(1UL);
 742              		.loc 1 170 0
 743 003c CE4B     		ldr	r3, .L62+32
 744 003e 1A68     		ldr	r2, [r3]
 745 0040 0124     		mov	r4, #1
 746 0042 A243     		bic	r2, r4
 747 0044 1A60     		str	r2, [r3]
 172:Src/main.c    **** 	MX_TIM15_Init();
 748              		.loc 1 172 0
 749 0046 FFF7FEFF 		bl	MX_TIM15_Init
 750              	.LVL40:
 173:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim15);
 751              		.loc 1 173 0
 752 004a CC48     		ldr	r0, .L62+36
 753 004c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 754              	.LVL41:
 174:Src/main.c    **** 	TIM15->CR1 &= ~(1UL);
 755              		.loc 1 174 0
 756 0050 CB4B     		ldr	r3, .L62+40
ARM GAS  /tmp/ccyc2a9R.s 			page 45


 757 0052 1A68     		ldr	r2, [r3]
 758 0054 A243     		bic	r2, r4
 759 0056 1A60     		str	r2, [r3]
 176:Src/main.c    **** 	USER_TIM2_Init();
 760              		.loc 1 176 0
 761 0058 FFF7FEFF 		bl	USER_TIM2_Init
 762              	.LVL42:
 178:Src/main.c    **** 	HAL_TIM_Base_Start(&htim2);
 763              		.loc 1 178 0
 764 005c C94C     		ldr	r4, .L62+44
 765 005e 201C     		mov	r0, r4
 766 0060 FFF7FEFF 		bl	HAL_TIM_Base_Start
 767              	.LVL43:
 179:Src/main.c    **** 	HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 768              		.loc 1 179 0
 769 0064 201C     		mov	r0, r4
 770 0066 0421     		mov	r1, #4
 771 0068 FFF7FEFF 		bl	HAL_TIM_OnePulse_Start
 772              	.LVL44:
 184:Src/main.c    ****   MX_USB_MIDI_INIT();
 773              		.loc 1 184 0
 774 006c FFF7FEFF 		bl	MX_USB_MIDI_INIT
 775              	.LVL45:
 187:Src/main.c    ****   if(FUNC_ERROR == midiInit() ){
 776              		.loc 1 187 0
 777 0070 FFF7FEFF 		bl	midiInit
 778              	.LVL46:
 779 0074 0028     		cmp	r0, #0
 780 0076 16D1     		bne	.L38
 189:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 781              		.loc 1 189 0 discriminator 1
 782 0078 9026     		mov	r6, #144
 783 007a F605     		lsl	r6, r6, #23
 784 007c 8025     		mov	r5, #128
 785 007e 2D02     		lsl	r5, r5, #8
 190:Src/main.c    **** 		  HAL_Delay(500);
 786              		.loc 1 190 0 discriminator 1
 787 0080 FA24     		mov	r4, #250
 788 0082 6400     		lsl	r4, r4, #1
 789              	.L60:
 189:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 790              		.loc 1 189 0 discriminator 1
 791 0084 301C     		mov	r0, r6
 792 0086 291C     		mov	r1, r5
 793 0088 0122     		mov	r2, #1
 794 008a FFF7FEFF 		bl	HAL_GPIO_WritePin
 795              	.LVL47:
 190:Src/main.c    **** 		  HAL_Delay(500);
 796              		.loc 1 190 0 discriminator 1
 797 008e 201C     		mov	r0, r4
 798 0090 FFF7FEFF 		bl	HAL_Delay
 799              	.LVL48:
 191:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 800              		.loc 1 191 0 discriminator 1
 801 0094 301C     		mov	r0, r6
 802 0096 291C     		mov	r1, r5
 803 0098 0022     		mov	r2, #0
ARM GAS  /tmp/ccyc2a9R.s 			page 46


 804 009a FFF7FEFF 		bl	HAL_GPIO_WritePin
 805              	.LVL49:
 192:Src/main.c    **** 		  HAL_Delay(500);
 806              		.loc 1 192 0 discriminator 1
 807 009e 201C     		mov	r0, r4
 808 00a0 FFF7FEFF 		bl	HAL_Delay
 809              	.LVL50:
 810 00a4 EEE7     		b	.L60
 811              	.L38:
 198:Src/main.c    **** 	  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 812              		.loc 1 198 0
 813 00a6 B84E     		ldr	r6, .L62+48
 814 00a8 FE25     		mov	r5, #254
 815 00aa 6D00     		lsl	r5, r5, #1
 202:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 816              		.loc 1 202 0
 817 00ac 9024     		mov	r4, #144
 818 00ae E405     		lsl	r4, r4, #23
 819              	.L61:
 198:Src/main.c    **** 	  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 820              		.loc 1 198 0
 821 00b0 735D     		ldrb	r3, [r6, r5]
 822 00b2 032B     		cmp	r3, #3
 823 00b4 0DD1     		bne	.L40
 199:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 824              		.loc 1 199 0
 825 00b6 9020     		mov	r0, #144
 826 00b8 C005     		lsl	r0, r0, #23
 827 00ba 8021     		mov	r1, #128
 828 00bc 0902     		lsl	r1, r1, #8
 829 00be 0122     		mov	r2, #1
 830 00c0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 831              	.LVL51:
 832              	.LBB28:
 305:Src/main.c    **** 					uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 833              		.loc 1 305 0
 834 00c4 A54D     		ldr	r5, .L62+4
 835 00c6 A44C     		ldr	r4, .L62
 836              	.LBE28:
 837              	.LBB29:
 296:Src/main.c    **** 					uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 838              		.loc 1 296 0
 839 00c8 A54E     		ldr	r6, .L62+8
 840 00ca A64F     		ldr	r7, .L62+12
 841              	.LBE29:
 255:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 842              		.loc 1 255 0
 843 00cc AF4A     		ldr	r2, .L62+52
 844 00ce 9046     		mov	r8, r2
 200:Src/main.c    **** 		  break;
 845              		.loc 1 200 0
 846 00d0 06E0     		b	.L59
 847              	.L40:
 202:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 848              		.loc 1 202 0
 849 00d2 201C     		mov	r0, r4
 850 00d4 8021     		mov	r1, #128
ARM GAS  /tmp/ccyc2a9R.s 			page 47


 851 00d6 0902     		lsl	r1, r1, #8
 852 00d8 0022     		mov	r2, #0
 853 00da FFF7FEFF 		bl	HAL_GPIO_WritePin
 854              	.LVL52:
 204:Src/main.c    ****   }
 855              		.loc 1 204 0
 856 00de E7E7     		b	.L61
 857              	.L59:
 210:Src/main.c    **** 			if (HAL_GPIO_ReadPin(BUTTON_GPIO, BUTTON_PIN)) {
 858              		.loc 1 210 0
 859 00e0 9020     		mov	r0, #144
 860 00e2 C005     		lsl	r0, r0, #23
 861 00e4 8021     		mov	r1, #128
 862 00e6 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 863              	.LVL53:
 864 00ea 0028     		cmp	r0, #0
 865 00ec 01D0     		beq	.L42
 211:Src/main.c    **** 				dfu_otter_bootloader();
 866              		.loc 1 211 0
 867 00ee FFF7FEFF 		bl	dfu_otter_bootloader
 868              	.LVL54:
 869              	.L42:
 214:Src/main.c    **** 			if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 870              		.loc 1 214 0
 871 00f2 FE23     		mov	r3, #254
 872 00f4 5B00     		lsl	r3, r3, #1
 873 00f6 A44A     		ldr	r2, .L62+48
 874 00f8 D35C     		ldrb	r3, [r2, r3]
 875 00fa 032B     		cmp	r3, #3
 876 00fc 0DD1     		bne	.L43
 215:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 877              		.loc 1 215 0
 878 00fe 9020     		mov	r0, #144
 879 0100 C005     		lsl	r0, r0, #23
 880 0102 8021     		mov	r1, #128
 881 0104 0902     		lsl	r1, r1, #8
 882 0106 0122     		mov	r2, #1
 883 0108 FFF7FEFF 		bl	HAL_GPIO_WritePin
 884              	.LVL55:
 225:Src/main.c    **** 		curTone0 = 0;
 885              		.loc 1 225 0
 886 010c 0023     		mov	r3, #0
 887 010e A04A     		ldr	r2, .L62+56
 888 0110 1380     		strh	r3, [r2]
 226:Src/main.c    **** 		curTone1 = 0;
 889              		.loc 1 226 0
 890 0112 A04A     		ldr	r2, .L62+60
 891 0114 1380     		strh	r3, [r2]
 892              	.LVL56:
 893              	.LBB30:
 228:Src/main.c    **** 	  for( int i = 0; i < 16; i++ ) { // find max pitch from all channels
 894              		.loc 1 228 0
 895 0116 0021     		mov	r1, #0
 896 0118 29E0     		b	.L44
 897              	.LVL57:
 898              	.L43:
 899              	.LBE30:
ARM GAS  /tmp/ccyc2a9R.s 			page 48


 218:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 900              		.loc 1 218 0
 901 011a 9023     		mov	r3, #144
 902 011c DB05     		lsl	r3, r3, #23
 903 011e 9A46     		mov	r10, r3
 904 0120 8023     		mov	r3, #128
 905 0122 1B02     		lsl	r3, r3, #8
 906 0124 9946     		mov	r9, r3
 907 0126 5046     		mov	r0, r10
 908 0128 191C     		mov	r1, r3
 909 012a 0122     		mov	r2, #1
 910 012c FFF7FEFF 		bl	HAL_GPIO_WritePin
 911              	.LVL58:
 219:Src/main.c    **** 			  HAL_Delay(200);
 912              		.loc 1 219 0
 913 0130 C820     		mov	r0, #200
 914 0132 FFF7FEFF 		bl	HAL_Delay
 915              	.LVL59:
 220:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 916              		.loc 1 220 0
 917 0136 5046     		mov	r0, r10
 918 0138 4946     		mov	r1, r9
 919 013a 0022     		mov	r2, #0
 920 013c FFF7FEFF 		bl	HAL_GPIO_WritePin
 921              	.LVL60:
 221:Src/main.c    **** 			  HAL_Delay(200);
 922              		.loc 1 221 0
 923 0140 C820     		mov	r0, #200
 924 0142 FFF7FEFF 		bl	HAL_Delay
 925              	.LVL61:
 223:Src/main.c    **** 	  }
 926              		.loc 1 223 0
 927 0146 CBE7     		b	.L59
 928              	.LVL62:
 929              	.L48:
 930              	.LBB31:
 229:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 931              		.loc 1 229 0
 932 0148 4B00     		lsl	r3, r1, #1
 933 014a 934A     		ldr	r2, .L62+64
 934 014c 985A     		ldrh	r0, [r3, r2]
 935 014e 904A     		ldr	r2, .L62+56
 936 0150 1388     		ldrh	r3, [r2]
 937 0152 9842     		cmp	r0, r3
 938 0154 04D9     		bls	.L46
 230:Src/main.c    **** 	          curTone1 = curTone0;
 939              		.loc 1 230 0
 940 0156 8F4A     		ldr	r2, .L62+60
 941 0158 1380     		strh	r3, [r2]
 231:Src/main.c    **** 	          curTone0 = freqs[i];
 942              		.loc 1 231 0
 943 015a 8D4B     		ldr	r3, .L62+56
 944 015c 1880     		strh	r0, [r3]
 945 015e 05E0     		b	.L47
 946              	.L46:
 233:Src/main.c    **** 	      else if( freqs[i] > curTone1 ) {
 947              		.loc 1 233 0
ARM GAS  /tmp/ccyc2a9R.s 			page 49


 948 0160 8C4A     		ldr	r2, .L62+60
 949 0162 1288     		ldrh	r2, [r2]
 950 0164 9042     		cmp	r0, r2
 951 0166 01D9     		bls	.L47
 234:Src/main.c    **** 	          curTone1 = freqs[i];
 952              		.loc 1 234 0
 953 0168 8A4B     		ldr	r3, .L62+60
 954 016a 1880     		strh	r0, [r3]
 955              	.L47:
 228:Src/main.c    **** 	  for( int i = 0; i < 16; i++ ) { // find max pitch from all channels
 956              		.loc 1 228 0
 957 016c 0131     		add	r1, r1, #1
 958              	.LVL63:
 959              	.L44:
 228:Src/main.c    **** 	  for( int i = 0; i < 16; i++ ) { // find max pitch from all channels
 960              		.loc 1 228 0 is_stmt 0 discriminator 1
 961 016e 0F29     		cmp	r1, #15
 962 0170 EADD     		ble	.L48
 963              	.LBE31:
 238:Src/main.c    **** 		if (curTone0 > 20 && curTone0 != lastTone0) { // play one tone using TIM14
 964              		.loc 1 238 0 is_stmt 1
 965 0172 874B     		ldr	r3, .L62+56
 966 0174 1988     		ldrh	r1, [r3]
 967              	.LVL64:
 968 0176 1429     		cmp	r1, #20
 969 0178 20D9     		bls	.L49
 238:Src/main.c    **** 		if (curTone0 > 20 && curTone0 != lastTone0) { // play one tone using TIM14
 970              		.loc 1 238 0 is_stmt 0 discriminator 1
 971 017a 884B     		ldr	r3, .L62+68
 972 017c 1B88     		ldrh	r3, [r3]
 973 017e 9942     		cmp	r1, r3
 974 0180 1CD0     		beq	.L49
 239:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 975              		.loc 1 239 0 is_stmt 1
 976 0182 4046     		mov	r0, r8
 977 0184 FFF7FEFF 		bl	__aeabi_uidiv
 978              	.LVL65:
 979 0188 854B     		ldr	r3, .L62+72
 980 018a 1860     		str	r0, [r3]
 240:Src/main.c    **** 			TIM14->CNT = 0;
 981              		.loc 1 240 0
 982 018c 7A4B     		ldr	r3, .L62+32
 983 018e 0022     		mov	r2, #0
 984 0190 5A62     		str	r2, [r3, #36]
 241:Src/main.c    **** 			TIM14->ARR = curPeriode0;
 985              		.loc 1 241 0
 986 0192 D862     		str	r0, [r3, #44]
 242:Src/main.c    **** 			TIM14->CR1 = TIM14->CR1 | 1;
 987              		.loc 1 242 0
 988 0194 1968     		ldr	r1, [r3]
 989 0196 0122     		mov	r2, #1
 990 0198 0A43     		orr	r2, r1
 991 019a 1A60     		str	r2, [r3]
 243:Src/main.c    **** 			lastTone0 = curTone0;
 992              		.loc 1 243 0
 993 019c 7C4B     		ldr	r3, .L62+56
 994 019e 1A88     		ldrh	r2, [r3]
ARM GAS  /tmp/ccyc2a9R.s 			page 50


 995 01a0 7E4B     		ldr	r3, .L62+68
 996 01a2 1A80     		strh	r2, [r3]
 244:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 997              		.loc 1 244 0
 998 01a4 FFF7FEFF 		bl	HAL_GetTick
 999              	.LVL66:
 1000 01a8 7E4B     		ldr	r3, .L62+76
 1001 01aa 1860     		str	r0, [r3]
 246:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, SET);
 1002              		.loc 1 246 0
 1003 01ac 9020     		mov	r0, #144
 1004 01ae C005     		lsl	r0, r0, #23
 1005 01b0 8021     		mov	r1, #128
 1006 01b2 C900     		lsl	r1, r1, #3
 1007 01b4 0122     		mov	r2, #1
 1008 01b6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1009              	.LVL67:
 1010 01ba 13E0     		b	.L50
 1011              	.L49:
 247:Src/main.c    **** 		} else if (curTone0 < 20 && curTone0 != lastTone0) {
 1012              		.loc 1 247 0
 1013 01bc 1329     		cmp	r1, #19
 1014 01be 11D8     		bhi	.L50
 247:Src/main.c    **** 		} else if (curTone0 < 20 && curTone0 != lastTone0) {
 1015              		.loc 1 247 0 is_stmt 0 discriminator 1
 1016 01c0 764B     		ldr	r3, .L62+68
 1017 01c2 1B88     		ldrh	r3, [r3]
 1018 01c4 9942     		cmp	r1, r3
 1019 01c6 0DD0     		beq	.L50
 248:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1020              		.loc 1 248 0 is_stmt 1
 1021 01c8 6B4B     		ldr	r3, .L62+32
 1022 01ca 1A68     		ldr	r2, [r3]
 1023 01cc 0121     		mov	r1, #1
 1024 01ce 8A43     		bic	r2, r1
 1025 01d0 1A60     		str	r2, [r3]
 249:Src/main.c    ****       curPeriode0 = 0;
 1026              		.loc 1 249 0
 1027 01d2 0022     		mov	r2, #0
 1028 01d4 724B     		ldr	r3, .L62+72
 1029 01d6 1A60     		str	r2, [r3]
 251:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, RESET);
 1030              		.loc 1 251 0
 1031 01d8 9020     		mov	r0, #144
 1032 01da C005     		lsl	r0, r0, #23
 1033 01dc 8021     		mov	r1, #128
 1034 01de C900     		lsl	r1, r1, #3
 1035 01e0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1036              	.LVL68:
 1037              	.L50:
 254:Src/main.c    **** 		if (curTone1 > 20 && curTone1 != lastTone1) { // play other polyphonic tone ussing TIM15
 1038              		.loc 1 254 0
 1039 01e4 6B4B     		ldr	r3, .L62+60
 1040 01e6 1988     		ldrh	r1, [r3]
 1041 01e8 1429     		cmp	r1, #20
 1042 01ea 19D9     		bls	.L51
 254:Src/main.c    **** 		if (curTone1 > 20 && curTone1 != lastTone1) { // play other polyphonic tone ussing TIM15
ARM GAS  /tmp/ccyc2a9R.s 			page 51


 1043              		.loc 1 254 0 is_stmt 0 discriminator 1
 1044 01ec 6E4B     		ldr	r3, .L62+80
 1045 01ee 1B88     		ldrh	r3, [r3]
 1046 01f0 9942     		cmp	r1, r3
 1047 01f2 15D0     		beq	.L51
 255:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 1048              		.loc 1 255 0 is_stmt 1
 1049 01f4 4046     		mov	r0, r8
 1050 01f6 FFF7FEFF 		bl	__aeabi_uidiv
 1051              	.LVL69:
 1052 01fa 6C4B     		ldr	r3, .L62+84
 1053 01fc 1860     		str	r0, [r3]
 256:Src/main.c    **** 			TIM15->CNT = 0;
 1054              		.loc 1 256 0
 1055 01fe 604B     		ldr	r3, .L62+40
 1056 0200 0022     		mov	r2, #0
 1057 0202 5A62     		str	r2, [r3, #36]
 257:Src/main.c    **** 			TIM15->ARR = curPeriode1;
 1058              		.loc 1 257 0
 1059 0204 D862     		str	r0, [r3, #44]
 258:Src/main.c    **** 			TIM15->CR1 = TIM15->CR1 | 1;
 1060              		.loc 1 258 0
 1061 0206 1968     		ldr	r1, [r3]
 1062 0208 0122     		mov	r2, #1
 1063 020a 0A43     		orr	r2, r1
 1064 020c 1A60     		str	r2, [r3]
 259:Src/main.c    **** 			lastTone1 = curTone1;
 1065              		.loc 1 259 0
 1066 020e 614B     		ldr	r3, .L62+60
 1067 0210 1A88     		ldrh	r2, [r3]
 1068 0212 654B     		ldr	r3, .L62+80
 1069 0214 1A80     		strh	r2, [r3]
 260:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 1070              		.loc 1 260 0
 1071 0216 FFF7FEFF 		bl	HAL_GetTick
 1072              	.LVL70:
 1073 021a 624B     		ldr	r3, .L62+76
 1074 021c 1860     		str	r0, [r3]
 1075 021e 0DE0     		b	.L52
 1076              	.L51:
 261:Src/main.c    **** 		} else if (curTone1 < 20 && curTone1 != lastTone1) {
 1077              		.loc 1 261 0
 1078 0220 1329     		cmp	r1, #19
 1079 0222 0BD8     		bhi	.L52
 261:Src/main.c    **** 		} else if (curTone1 < 20 && curTone1 != lastTone1) {
 1080              		.loc 1 261 0 is_stmt 0 discriminator 1
 1081 0224 604B     		ldr	r3, .L62+80
 1082 0226 1B88     		ldrh	r3, [r3]
 1083 0228 9942     		cmp	r1, r3
 1084 022a 07D0     		beq	.L52
 262:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 1085              		.loc 1 262 0 is_stmt 1
 1086 022c 544B     		ldr	r3, .L62+40
 1087 022e 1A68     		ldr	r2, [r3]
 1088 0230 0121     		mov	r1, #1
 1089 0232 8A43     		bic	r2, r1
 1090 0234 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccyc2a9R.s 			page 52


 263:Src/main.c    ****       curPeriode1 = 0;
 1091              		.loc 1 263 0
 1092 0236 0022     		mov	r2, #0
 1093 0238 5C4B     		ldr	r3, .L62+84
 1094 023a 1A60     		str	r2, [r3]
 1095              	.L52:
 266:Src/main.c    **** 		if ((HAL_GetTick() - noteTimeout) > 1000) {
 1096              		.loc 1 266 0
 1097 023c FFF7FEFF 		bl	HAL_GetTick
 1098              	.LVL71:
 1099 0240 584B     		ldr	r3, .L62+76
 1100 0242 1B68     		ldr	r3, [r3]
 1101 0244 C01A     		sub	r0, r0, r3
 1102 0246 FA23     		mov	r3, #250
 1103 0248 9B00     		lsl	r3, r3, #2
 1104 024a 9842     		cmp	r0, r3
 1105 024c 18D9     		bls	.L53
 267:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1106              		.loc 1 267 0
 1107 024e 4A4B     		ldr	r3, .L62+32
 1108 0250 1968     		ldr	r1, [r3]
 1109 0252 0122     		mov	r2, #1
 1110 0254 9143     		bic	r1, r2
 1111 0256 1960     		str	r1, [r3]
 268:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 1112              		.loc 1 268 0
 1113 0258 494B     		ldr	r3, .L62+40
 1114 025a 1968     		ldr	r1, [r3]
 1115 025c 9143     		bic	r1, r2
 1116 025e 1960     		str	r1, [r3]
 1117              	.LVL72:
 1118              	.LBB32:
 269:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 1119              		.loc 1 269 0
 1120 0260 0023     		mov	r3, #0
 270:Src/main.c    **** 				freqs[i] = 0;
 1121              		.loc 1 270 0
 1122 0262 4D49     		ldr	r1, .L62+64
 1123 0264 0020     		mov	r0, #0
 269:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 1124              		.loc 1 269 0
 1125 0266 02E0     		b	.L54
 1126              	.LVL73:
 1127              	.L55:
 270:Src/main.c    **** 				freqs[i] = 0;
 1128              		.loc 1 270 0 discriminator 2
 1129 0268 5A00     		lsl	r2, r3, #1
 1130 026a 5052     		strh	r0, [r2, r1]
 269:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 1131              		.loc 1 269 0 discriminator 2
 1132 026c 0133     		add	r3, r3, #1
 1133              	.LVL74:
 1134              	.L54:
 269:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 1135              		.loc 1 269 0 is_stmt 0 discriminator 1
 1136 026e 0F2B     		cmp	r3, #15
 1137 0270 FADD     		ble	.L55
ARM GAS  /tmp/ccyc2a9R.s 			page 53


 1138              	.LBE32:
 273:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, RESET);
 1139              		.loc 1 273 0 is_stmt 1
 1140 0272 9020     		mov	r0, #144
 1141 0274 C005     		lsl	r0, r0, #23
 1142 0276 8021     		mov	r1, #128
 1143 0278 C900     		lsl	r1, r1, #3
 1144 027a 0022     		mov	r2, #0
 1145 027c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1146              	.LVL75:
 1147              	.L53:
 279:Src/main.c    **** 		if( FUNC_SUCCESS == midiGetFromUsbRx(0, &uart_tx_dat)){
 1148              		.loc 1 279 0
 1149 0280 0020     		mov	r0, #0
 1150 0282 4B49     		ldr	r1, .L62+88
 1151 0284 FFF7FEFF 		bl	midiGetFromUsbRx
 1152              	.LVL76:
 1153 0288 0128     		cmp	r0, #1
 1154 028a 00D0     		beq	.LCB976
 1155 028c 28E7     		b	.L59	@long jump
 1156              	.LCB976:
 280:Src/main.c    **** 			if (uart_tx_dat >> 7 == 1) {
 1157              		.loc 1 280 0
 1158 028e 484B     		ldr	r3, .L62+88
 1159 0290 1B78     		ldrb	r3, [r3]
 1160 0292 DA09     		lsr	r2, r3, #7
 1161 0294 012A     		cmp	r2, #1
 1162 0296 08D1     		bne	.L56
 281:Src/main.c    **** 				midiBuffer[0] = uart_tx_dat;
 1163              		.loc 1 281 0
 1164 0298 464A     		ldr	r2, .L62+92
 1165 029a 1370     		strb	r3, [r2]
 282:Src/main.c    **** 				midiBuffer[1] = 0;
 1166              		.loc 1 282 0
 1167 029c 0023     		mov	r3, #0
 1168 029e 5370     		strb	r3, [r2, #1]
 283:Src/main.c    **** 				midiBuffer[2] = 0;
 1169              		.loc 1 283 0
 1170 02a0 9370     		strb	r3, [r2, #2]
 284:Src/main.c    **** 				midiState = 1;
 1171              		.loc 1 284 0
 1172 02a2 0122     		mov	r2, #1
 1173 02a4 444B     		ldr	r3, .L62+96
 1174 02a6 1A70     		strb	r2, [r3]
 1175 02a8 1AE7     		b	.L59
 1176              	.L56:
 285:Src/main.c    **** 			} else if (midiState == 1) {
 1177              		.loc 1 285 0
 1178 02aa 434A     		ldr	r2, .L62+96
 1179 02ac 1278     		ldrb	r2, [r2]
 1180 02ae 012A     		cmp	r2, #1
 1181 02b0 05D1     		bne	.L57
 286:Src/main.c    **** 				midiBuffer[1] = uart_tx_dat;
 1182              		.loc 1 286 0
 1183 02b2 404A     		ldr	r2, .L62+92
 1184 02b4 5370     		strb	r3, [r2, #1]
 287:Src/main.c    **** 				midiState = 2;
ARM GAS  /tmp/ccyc2a9R.s 			page 54


 1185              		.loc 1 287 0
 1186 02b6 0222     		mov	r2, #2
 1187 02b8 3F4B     		ldr	r3, .L62+96
 1188 02ba 1A70     		strb	r2, [r3]
 1189 02bc 10E7     		b	.L59
 1190              	.L57:
 288:Src/main.c    **** 			} else if (midiState == 2) {
 1191              		.loc 1 288 0
 1192 02be 022A     		cmp	r2, #2
 1193 02c0 00D0     		beq	.LCB1009
 1194 02c2 0DE7     		b	.L59	@long jump
 1195              	.LCB1009:
 289:Src/main.c    **** 				midiBuffer[2] = uart_tx_dat;
 1196              		.loc 1 289 0
 1197 02c4 3B4A     		ldr	r2, .L62+92
 1198 02c6 9370     		strb	r3, [r2, #2]
 290:Src/main.c    **** 				midiState = 3;
 1199              		.loc 1 290 0
 1200 02c8 0321     		mov	r1, #3
 1201 02ca 3B4B     		ldr	r3, .L62+96
 1202 02cc 1970     		strb	r1, [r3]
 292:Src/main.c    **** 				if ((midiBuffer[0] & 0xF0) == 0x90) { // Note on, 2 data bytes
 1203              		.loc 1 292 0
 1204 02ce 1378     		ldrb	r3, [r2]
 1205 02d0 0F22     		mov	r2, #15
 1206 02d2 9343     		bic	r3, r2
 1207 02d4 902B     		cmp	r3, #144
 1208 02d6 1ED1     		bne	.L58
 1209              	.LBB33:
 293:Src/main.c    **** 					char key = midiBuffer[1];
 1210              		.loc 1 293 0
 1211 02d8 364A     		ldr	r2, .L62+92
 1212 02da 9146     		mov	r9, r2
 1213 02dc 5078     		ldrb	r0, [r2, #1]
 1214              	.LVL77:
 296:Src/main.c    **** 					uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 1215              		.loc 1 296 0
 1216 02de 4538     		sub	r0, r0, #69
 1217 02e0 FFF7FEFF 		bl	__aeabi_i2d
 1218              	.LVL78:
 1219 02e4 221C     		mov	r2, r4
 1220 02e6 2B1C     		mov	r3, r5
 1221 02e8 FFF7FEFF 		bl	__aeabi_ddiv
 1222              	.LVL79:
 1223 02ec 021C     		mov	r2, r0
 1224 02ee 0B1C     		mov	r3, r1
 1225 02f0 1D48     		ldr	r0, .L62+16
 1226 02f2 1E49     		ldr	r1, .L62+20
 1227 02f4 FFF7FEFF 		bl	pow
 1228              	.LVL80:
 1229 02f8 321C     		mov	r2, r6
 1230 02fa 3B1C     		mov	r3, r7
 1231 02fc FFF7FEFF 		bl	__aeabi_dmul
 1232              	.LVL81:
 1233 0300 FFF7FEFF 		bl	__aeabi_d2uiz
 1234              	.LVL82:
 297:Src/main.c    **** 					curChannel = midiBuffer[0] & 0xF;
ARM GAS  /tmp/ccyc2a9R.s 			page 55


 1235              		.loc 1 297 0
 1236 0304 4B46     		mov	r3, r9
 1237 0306 1A78     		ldrb	r2, [r3]
 1238 0308 0F23     		mov	r3, #15
 1239 030a 1340     		and	r3, r2
 1240 030c 2B4A     		ldr	r2, .L62+100
 1241 030e 1380     		strh	r3, [r2]
 298:Src/main.c    **** 					freqs[curChannel] = freq;
 1242              		.loc 1 298 0
 1243 0310 5B00     		lsl	r3, r3, #1
 1244 0312 214A     		ldr	r2, .L62+64
 1245 0314 D052     		strh	r0, [r2, r3]
 1246              	.LVL83:
 1247              	.L58:
 1248              	.LBE33:
 301:Src/main.c    **** 				} if ((midiBuffer[0] &0xF0) == 0x80) { // Note off, 2 data bytes
 1249              		.loc 1 301 0
 1250 0316 274B     		ldr	r3, .L62+92
 1251 0318 1B78     		ldrb	r3, [r3]
 1252 031a 0F22     		mov	r2, #15
 1253 031c 9343     		bic	r3, r2
 1254 031e 802B     		cmp	r3, #128
 1255 0320 00D0     		beq	.LCB1072
 1256 0322 DDE6     		b	.L59	@long jump
 1257              	.LCB1072:
 1258              	.LBB34:
 302:Src/main.c    **** 					char key = midiBuffer[1];
 1259              		.loc 1 302 0
 1260 0324 234A     		ldr	r2, .L62+92
 1261 0326 9146     		mov	r9, r2
 1262 0328 5078     		ldrb	r0, [r2, #1]
 1263              	.LVL84:
 305:Src/main.c    **** 					uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 1264              		.loc 1 305 0
 1265 032a 4538     		sub	r0, r0, #69
 1266 032c FFF7FEFF 		bl	__aeabi_i2d
 1267              	.LVL85:
 1268 0330 221C     		mov	r2, r4
 1269 0332 2B1C     		mov	r3, r5
 1270 0334 FFF7FEFF 		bl	__aeabi_ddiv
 1271              	.LVL86:
 1272 0338 021C     		mov	r2, r0
 1273 033a 0B1C     		mov	r3, r1
 1274 033c 0A48     		ldr	r0, .L62+16
 1275 033e 0B49     		ldr	r1, .L62+20
 1276 0340 FFF7FEFF 		bl	pow
 1277              	.LVL87:
 308:Src/main.c    **** 					freqs[midiBuffer[0] & 0xF] = 0;
 1278              		.loc 1 308 0
 1279 0344 4B46     		mov	r3, r9
 1280 0346 1A78     		ldrb	r2, [r3]
 1281 0348 0F23     		mov	r3, #15
 1282 034a 1A40     		and	r2, r3
 1283 034c 5200     		lsl	r2, r2, #1
 1284 034e 0021     		mov	r1, #0
 1285 0350 114B     		ldr	r3, .L62+64
 1286 0352 D152     		strh	r1, [r2, r3]
ARM GAS  /tmp/ccyc2a9R.s 			page 56


 1287 0354 C4E6     		b	.L59
 1288              	.L63:
 1289 0356 C046     		.align	3
 1290              	.L62:
 1291 0358 00000000 		.word	0
 1292 035c 00002840 		.word	1076363264
 1293 0360 00000000 		.word	0
 1294 0364 00807B40 		.word	1081835520
 1295 0368 00000000 		.word	0
 1296 036c 00000040 		.word	1073741824
 1297 0370 00000000 		.word	hdac
 1298 0374 00000000 		.word	htim14
 1299 0378 00200040 		.word	1073750016
 1300 037c 00000000 		.word	htim15
 1301 0380 00400140 		.word	1073823744
 1302 0384 00000000 		.word	htim2
 1303 0388 00000000 		.word	hUsbDeviceFS
 1304 038c 40420F00 		.word	1000000
 1305 0390 00000000 		.word	.LANCHOR2
 1306 0394 00000000 		.word	.LANCHOR3
 1307 0398 00000000 		.word	.LANCHOR4
 1308 039c 00000000 		.word	.LANCHOR5
 1309 03a0 00000000 		.word	.LANCHOR0
 1310 03a4 00000000 		.word	.LANCHOR6
 1311 03a8 00000000 		.word	.LANCHOR7
 1312 03ac 00000000 		.word	.LANCHOR1
 1313 03b0 00000000 		.word	uart_tx_dat
 1314 03b4 00000000 		.word	midiBuffer
 1315 03b8 00000000 		.word	.LANCHOR8
 1316 03bc 00000000 		.word	.LANCHOR9
 1317              	.LBE34:
 1318              		.cfi_endproc
 1319              	.LFE36:
 1321              		.global	freqs
 1322              		.global	noteTimeout
 1323              		.global	lastTone1
 1324              		.global	lastTone0
 1325              		.global	curChannel
 1326              		.global	curTone1
 1327              		.global	curTone0
 1328              		.global	midiState
 1329              		.comm	midiBuffer,4,4
 1330              		.global	curPeriode1
 1331              		.global	curPeriode0
 1332              		.comm	uart_tx_dat,1,1
 1333              		.comm	hdac,20,4
 1334              		.comm	htim2,64,4
 1335              		.comm	htim15,64,4
 1336              		.comm	htim14,64,4
 1337              		.section	.bss.lastTone0,"aw",%nobits
 1338              		.align	1
 1339              		.set	.LANCHOR5,. + 0
 1342              	lastTone0:
 1343 0000 0000     		.space	2
 1344              		.section	.bss.lastTone1,"aw",%nobits
 1345              		.align	1
 1346              		.set	.LANCHOR7,. + 0
ARM GAS  /tmp/ccyc2a9R.s 			page 57


 1349              	lastTone1:
 1350 0000 0000     		.space	2
 1351              		.section	.bss.curTone0,"aw",%nobits
 1352              		.align	1
 1353              		.set	.LANCHOR2,. + 0
 1356              	curTone0:
 1357 0000 0000     		.space	2
 1358              		.section	.bss.curTone1,"aw",%nobits
 1359              		.align	1
 1360              		.set	.LANCHOR3,. + 0
 1363              	curTone1:
 1364 0000 0000     		.space	2
 1365              		.section	.bss.curPeriode0,"aw",%nobits
 1366              		.align	2
 1367              		.set	.LANCHOR0,. + 0
 1370              	curPeriode0:
 1371 0000 00000000 		.space	4
 1372              		.section	.bss.curPeriode1,"aw",%nobits
 1373              		.align	2
 1374              		.set	.LANCHOR1,. + 0
 1377              	curPeriode1:
 1378 0000 00000000 		.space	4
 1379              		.section	.bss.noteTimeout,"aw",%nobits
 1380              		.align	2
 1381              		.set	.LANCHOR6,. + 0
 1384              	noteTimeout:
 1385 0000 00000000 		.space	4
 1386              		.section	.bss.freqs,"aw",%nobits
 1387              		.align	2
 1388              		.set	.LANCHOR4,. + 0
 1391              	freqs:
 1392 0000 00000000 		.space	32
 1392      00000000 
 1392      00000000 
 1392      00000000 
 1392      00000000 
 1393              		.section	.rodata.str1.4,"aMS",%progbits,1
 1394              		.align	2
 1395              	.LC4:
 1396 0000 5372632F 		.ascii	"Src/main.c\000"
 1396      6D61696E 
 1396      2E6300
 1397 000b 00       		.section	.bss.curChannel,"aw",%nobits
 1398              		.align	1
 1399              		.set	.LANCHOR9,. + 0
 1402              	curChannel:
 1403 0000 0000     		.space	2
 1404              		.section	.bss.midiState,"aw",%nobits
 1405              		.set	.LANCHOR8,. + 0
 1408              	midiState:
 1409 0000 00       		.space	1
 1410              		.text
 1411              	.Letext0:
 1412              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1413              		.file 5 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_defaul
 1414              		.file 6 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 1415              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
ARM GAS  /tmp/ccyc2a9R.s 			page 58


 1416              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1417              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1418              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 1419              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1420              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1421              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dac.h"
 1422              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 1423              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 1424              		.file 16 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 1425              		.file 17 "Inc/curelib_inc/curemisc.h"
 1426              		.file 18 "Inc/usb_device.h"
 1427              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 1428              		.file 20 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1429              		.file 21 "Inc/usbd_midi_if.h"
 1430              		.file 22 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/math.h"
ARM GAS  /tmp/ccyc2a9R.s 			page 59


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccyc2a9R.s:18     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccyc2a9R.s:22     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccyc2a9R.s:105    .text.MX_GPIO_Init:00000068 $d
     /tmp/ccyc2a9R.s:110    .text.USER_TIM2_Init:00000000 $t
     /tmp/ccyc2a9R.s:114    .text.USER_TIM2_Init:00000000 USER_TIM2_Init
     /tmp/ccyc2a9R.s:203    .text.USER_TIM2_Init:0000006c $d
                            *COM*:00000040 htim2
     /tmp/ccyc2a9R.s:209    .text.dfu_otter_bootloader:00000000 $t
     /tmp/ccyc2a9R.s:214    .text.dfu_otter_bootloader:00000000 dfu_otter_bootloader
     /tmp/ccyc2a9R.s:260    .text.dfu_otter_bootloader:00000018 $d
     /tmp/ccyc2a9R.s:273    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/ccyc2a9R.s:278    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccyc2a9R.s:349    .text.HAL_TIM_PeriodElapsedCallback:0000005c $d
     /tmp/ccyc2a9R.s:357    .text._Error_Handler:00000000 $t
     /tmp/ccyc2a9R.s:362    .text._Error_Handler:00000000 _Error_Handler
     /tmp/ccyc2a9R.s:373    .text.MX_DAC_Init:00000000 $t
     /tmp/ccyc2a9R.s:377    .text.MX_DAC_Init:00000000 MX_DAC_Init
     /tmp/ccyc2a9R.s:432    .text.MX_DAC_Init:00000040 $d
                            *COM*:00000014 hdac
     /tmp/ccyc2a9R.s:439    .text.MX_TIM14_Init:00000000 $t
     /tmp/ccyc2a9R.s:443    .text.MX_TIM14_Init:00000000 MX_TIM14_Init
     /tmp/ccyc2a9R.s:492    .text.MX_TIM14_Init:00000034 $d
                            *COM*:00000040 htim14
     /tmp/ccyc2a9R.s:499    .text.MX_TIM15_Init:00000000 $t
     /tmp/ccyc2a9R.s:503    .text.MX_TIM15_Init:00000000 MX_TIM15_Init
     /tmp/ccyc2a9R.s:552    .text.MX_TIM15_Init:00000034 $d
                            *COM*:00000040 htim15
     /tmp/ccyc2a9R.s:559    .text.SystemClock_Config:00000000 $t
     /tmp/ccyc2a9R.s:564    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccyc2a9R.s:674    .text.SystemClock_Config:00000094 $d
     /tmp/ccyc2a9R.s:683    .text.main:00000000 $t
     /tmp/ccyc2a9R.s:688    .text.main:00000000 main
     /tmp/ccyc2a9R.s:1291   .text.main:00000358 $d
                            *COM*:00000001 uart_tx_dat
                            *COM*:00000004 midiBuffer
     /tmp/ccyc2a9R.s:1391   .bss.freqs:00000000 freqs
     /tmp/ccyc2a9R.s:1384   .bss.noteTimeout:00000000 noteTimeout
     /tmp/ccyc2a9R.s:1349   .bss.lastTone1:00000000 lastTone1
     /tmp/ccyc2a9R.s:1342   .bss.lastTone0:00000000 lastTone0
     /tmp/ccyc2a9R.s:1402   .bss.curChannel:00000000 curChannel
     /tmp/ccyc2a9R.s:1363   .bss.curTone1:00000000 curTone1
     /tmp/ccyc2a9R.s:1356   .bss.curTone0:00000000 curTone0
     /tmp/ccyc2a9R.s:1408   .bss.midiState:00000000 midiState
     /tmp/ccyc2a9R.s:1377   .bss.curPeriode1:00000000 curPeriode1
     /tmp/ccyc2a9R.s:1370   .bss.curPeriode0:00000000 curPeriode0
     /tmp/ccyc2a9R.s:1338   .bss.lastTone0:00000000 $d
     /tmp/ccyc2a9R.s:1345   .bss.lastTone1:00000000 $d
     /tmp/ccyc2a9R.s:1352   .bss.curTone0:00000000 $d
     /tmp/ccyc2a9R.s:1359   .bss.curTone1:00000000 $d
     /tmp/ccyc2a9R.s:1366   .bss.curPeriode0:00000000 $d
     /tmp/ccyc2a9R.s:1373   .bss.curPeriode1:00000000 $d
     /tmp/ccyc2a9R.s:1380   .bss.noteTimeout:00000000 $d
     /tmp/ccyc2a9R.s:1387   .bss.freqs:00000000 $d
     /tmp/ccyc2a9R.s:1394   .rodata.str1.4:00000000 $d
     /tmp/ccyc2a9R.s:1398   .bss.curChannel:00000000 $d
ARM GAS  /tmp/ccyc2a9R.s 			page 60


     /tmp/ccyc2a9R.s:1409   .bss.midiState:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_OnePulse_Init
HAL_TIM_MspPostInit
__aeabi_uidiv
HAL_DAC_Init
HAL_DAC_ConfigChannel
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
__aeabi_i2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2uiz
HAL_Init
HAL_DAC_Start
HAL_DAC_SetValue
HAL_TIM_Base_Start_IT
HAL_TIM_Base_Start
HAL_TIM_OnePulse_Start
MX_USB_MIDI_INIT
midiInit
HAL_Delay
HAL_GPIO_ReadPin
HAL_GetTick
midiGetFromUsbRx
pow
hUsbDeviceFS
