ARM GAS  /tmp/ccOkcrH8.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv6s-m
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB45:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2018 STMicroelectronics International N.V.
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice,
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under
  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under
  32:Src/main.c    ****   *    this license.
  33:Src/main.c    ****   *
ARM GAS  /tmp/ccOkcrH8.s 			page 2


  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS"
  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f0xx_hal.h"
  52:Src/main.c    **** #include "usb_device.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN Includes */
  55:Src/main.c    **** #include "device_conf.h"
  56:Src/main.c    **** #include "curemisc.h"
  57:Src/main.c    **** #include "curebuffer.h"
  58:Src/main.c    **** #include "usbd_midi_if.h"
  59:Src/main.c    **** #include "usbd_cdc_if.h"
  60:Src/main.c    **** #include "math.h"
  61:Src/main.c    **** 
  62:Src/main.c    **** #define USE_CDC
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END Includes */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  67:Src/main.c    **** TIM_HandleTypeDef htim14;
  68:Src/main.c    **** TIM_HandleTypeDef htim15;
  69:Src/main.c    **** 
  70:Src/main.c    **** TIM_HandleTypeDef htim2;
  71:Src/main.c    **** 
  72:Src/main.c    **** DAC_HandleTypeDef hdac;
  73:Src/main.c    **** 
  74:Src/main.c    **** 
  75:Src/main.c    **** uint8_t uart_tx_dat;
  76:Src/main.c    **** /* USER CODE END PV */
  77:Src/main.c    **** 
  78:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  79:Src/main.c    **** void SystemClock_Config(void);
  80:Src/main.c    **** static void MX_GPIO_Init(void);
  81:Src/main.c    **** 
  82:Src/main.c    **** static void MX_TIM14_Init(void);
  83:Src/main.c    **** static void MX_TIM15_Init(void);
  84:Src/main.c    **** static void USER_TIM2_Init(void);
  85:Src/main.c    **** 
  86:Src/main.c    **** static void MX_DAC_Init(void);
  87:Src/main.c    **** 
  88:Src/main.c    **** /* USER CODE BEGIN PFP */
  89:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  90:Src/main.c    **** void dfu_otter_bootloader(void)
ARM GAS  /tmp/ccOkcrH8.s 			page 3


  91:Src/main.c    **** {
  92:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
  93:Src/main.c    ****   NVIC_SystemReset();
  94:Src/main.c    **** }
  95:Src/main.c    **** /* USER CODE END PFP */
  96:Src/main.c    **** 
  97:Src/main.c    **** /* USER CODE BEGIN 0 */
  98:Src/main.c    **** 
  99:Src/main.c    **** uint32_t curPeriode0 = 0;
 100:Src/main.c    **** uint32_t curPeriode1 = 0;
 101:Src/main.c    **** 
 102:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 103:Src/main.c    **** {
 104:Src/main.c    **** 	if(htim->Instance == TIM14)
 105:Src/main.c    **** 	{
 106:Src/main.c    **** 		//HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 107:Src/main.c    ****     if (TIM2->CNT == 0) {
 108:Src/main.c    ****       TIM2->ARR = (uint32_t)(curPeriode0 / 5); // Play first channel
 109:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 110:Src/main.c    ****     }
 111:Src/main.c    **** 	}
 112:Src/main.c    **** 	if(htim->Instance == TIM15)
 113:Src/main.c    **** 	{
 114:Src/main.c    **** 		//HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 115:Src/main.c    ****     if (TIM2->CNT == 0) {
 116:Src/main.c    ****     	TIM2->ARR = (uint32_t)(curPeriode1 / 10); // Play second channel with less power
 117:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 118:Src/main.c    ****     }
 119:Src/main.c    **** 	}
 120:Src/main.c    **** }
 121:Src/main.c    **** 
 122:Src/main.c    **** /**
 123:Src/main.c    ****   * @brief  The application entry point.
 124:Src/main.c    ****   *
 125:Src/main.c    ****   * @retval None
 126:Src/main.c    ****   */
 127:Src/main.c    **** 
 128:Src/main.c    **** 
 129:Src/main.c    **** uint8_t midiBuffer[4];
 130:Src/main.c    **** uint8_t midiState = 0;
 131:Src/main.c    **** 
 132:Src/main.c    **** uint16_t curTone0 = 0;
 133:Src/main.c    **** uint16_t curTone1 = 0;
 134:Src/main.c    **** uint16_t curChannel = 0;
 135:Src/main.c    **** uint16_t lastTone0 = 0;
 136:Src/main.c    **** uint16_t lastTone1 = 0;
 137:Src/main.c    **** uint32_t noteTimeout = 0;
 138:Src/main.c    **** 
 139:Src/main.c    **** uint16_t freqs[16] = {0};
 140:Src/main.c    **** char str[40];
 141:Src/main.c    **** 
 142:Src/main.c    **** int main(void)
 143:Src/main.c    **** {
 144:Src/main.c    ****   /* USER CODE BEGIN 1 */
 145:Src/main.c    **** 
 146:Src/main.c    ****   /* USER CODE END 1 */
 147:Src/main.c    **** 
ARM GAS  /tmp/ccOkcrH8.s 			page 4


 148:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 149:Src/main.c    **** 
 150:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 151:Src/main.c    ****   HAL_Init();
 152:Src/main.c    **** 
 153:Src/main.c    ****   /* USER CODE BEGIN Init */
 154:Src/main.c    **** 
 155:Src/main.c    ****   /* USER CODE END Init */
 156:Src/main.c    **** 
 157:Src/main.c    ****   /* Configure the system clock */
 158:Src/main.c    ****   SystemClock_Config();
 159:Src/main.c    **** 
 160:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 161:Src/main.c    **** 
 162:Src/main.c    ****   /* USER CODE END SysInit */
 163:Src/main.c    **** 
 164:Src/main.c    ****   /* Initialize all configured peripherals */
 165:Src/main.c    ****   MX_GPIO_Init();
 166:Src/main.c    **** 	MX_DAC_Init();
 167:Src/main.c    **** 
 168:Src/main.c    **** 	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 169:Src/main.c    **** 	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 170:Src/main.c    **** 
 171:Src/main.c    **** 	MX_TIM14_Init();
 172:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim14);
 173:Src/main.c    **** 	TIM14->CR1 &= ~(1UL);
 174:Src/main.c    **** 
 175:Src/main.c    **** 	MX_TIM15_Init();
 176:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim15);
 177:Src/main.c    **** 	TIM15->CR1 &= ~(1UL);
 178:Src/main.c    **** 
 179:Src/main.c    **** 	USER_TIM2_Init();
 180:Src/main.c    **** 
 181:Src/main.c    **** 	HAL_TIM_Base_Start(&htim2);
 182:Src/main.c    **** 	HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 183:Src/main.c    **** 
 184:Src/main.c    ****   /* USER CODE BEGIN 2 */
 185:Src/main.c    **** 
 186:Src/main.c    ****   //USB-MIDI Init
 187:Src/main.c    **** #ifdef USE_CDC
 188:Src/main.c    ****   MX_USB_DEVICE_Init();
 189:Src/main.c    **** #endif
 190:Src/main.c    **** #ifndef USE_CDC
 191:Src/main.c    ****   MX_USB_MIDI_INIT();
 192:Src/main.c    **** #endif
 193:Src/main.c    **** 
 194:Src/main.c    **** #ifndef USE_CDC
 195:Src/main.c    ****   if(FUNC_ERROR == midiInit() ){
 196:Src/main.c    **** 	  while(1){
 197:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 198:Src/main.c    **** 		  HAL_Delay(500);
 199:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 200:Src/main.c    **** 		  HAL_Delay(500);
 201:Src/main.c    **** 	  }
 202:Src/main.c    ****   }
 203:Src/main.c    **** 
 204:Src/main.c    ****   //Wait usb configuration.
ARM GAS  /tmp/ccOkcrH8.s 			page 5


 205:Src/main.c    ****   while(1){
 206:Src/main.c    **** 	  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 207:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 208:Src/main.c    **** 		  break;
 209:Src/main.c    **** 	  }else{
 210:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 211:Src/main.c    **** 	  }
 212:Src/main.c    ****   }
 213:Src/main.c    **** #endif
 214:Src/main.c    **** 
 215:Src/main.c    ****   while (1)
 216:Src/main.c    ****   {
 217:Src/main.c    ****     
 218:Src/main.c    **** #ifdef USE_CDC
 219:Src/main.c    ****       memset(str, ' ', 40);
 220:Src/main.c    ****       sprintf(&str[0], "Otter!\n\r");
 221:Src/main.c    ****       CDC_Transmit_FS((unsigned char*)str, sizeof(str));
 222:Src/main.c    ****       HAL_Delay(200);
 223:Src/main.c    **** 
 224:Src/main.c    ****       if (HAL_GPIO_ReadPin(BUTTON_GPIO, BUTTON_PIN)) {
 225:Src/main.c    ****         dfu_otter_bootloader();
 226:Src/main.c    ****       }
 227:Src/main.c    **** #endif
 228:Src/main.c    **** #ifndef USE_CDC
 229:Src/main.c    ****   //Wait USB configuration when USB connection error has occurred.
 230:Src/main.c    **** 	  while(1){
 231:Src/main.c    **** 			if (HAL_GPIO_ReadPin(BUTTON_GPIO, BUTTON_PIN)) {
 232:Src/main.c    **** 				dfu_otter_bootloader();
 233:Src/main.c    **** 			}
 234:Src/main.c    **** 				//HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 235:Src/main.c    **** 			if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 236:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 237:Src/main.c    **** 			  break;
 238:Src/main.c    **** 		  }else{
 239:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 240:Src/main.c    **** 			  HAL_Delay(200);
 241:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 242:Src/main.c    **** 			  HAL_Delay(200);
 243:Src/main.c    **** 		  }
 244:Src/main.c    **** 	  }
 245:Src/main.c    **** #endif
 246:Src/main.c    **** 		curTone0 = 0;
 247:Src/main.c    **** 		curTone1 = 0;
 248:Src/main.c    **** 
 249:Src/main.c    **** 	  for( int i = 0; i < 16; i++ ) { // find max pitch from all channels
 250:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 251:Src/main.c    **** 	          curTone1 = curTone0;
 252:Src/main.c    **** 	          curTone0 = freqs[i];
 253:Src/main.c    **** 	      }
 254:Src/main.c    **** 	      else if( freqs[i] > curTone1 ) {
 255:Src/main.c    **** 	          curTone1 = freqs[i];
 256:Src/main.c    **** 	      }
 257:Src/main.c    **** 	  }
 258:Src/main.c    **** 
 259:Src/main.c    **** 		if (curTone0 > 20 && curTone0 != lastTone0) { // play one tone using TIM14
 260:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 261:Src/main.c    **** 			TIM14->CNT = 0;
ARM GAS  /tmp/ccOkcrH8.s 			page 6


 262:Src/main.c    **** 			TIM14->ARR = curPeriode0;
 263:Src/main.c    **** 			TIM14->CR1 = TIM14->CR1 | 1;
 264:Src/main.c    **** 			lastTone0 = curTone0;
 265:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 266:Src/main.c    **** 
 267:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, SET);
 268:Src/main.c    **** 		} else if (curTone0 < 20 && curTone0 != lastTone0) {
 269:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 270:Src/main.c    ****       curPeriode0 = 0;
 271:Src/main.c    **** 
 272:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, RESET);
 273:Src/main.c    **** 		}
 274:Src/main.c    **** 
 275:Src/main.c    **** 		if (curTone1 > 20 && curTone1 != lastTone1) { // play other polyphonic tone ussing TIM15
 276:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 277:Src/main.c    **** 			TIM15->CNT = 0;
 278:Src/main.c    **** 			TIM15->ARR = curPeriode1;
 279:Src/main.c    **** 			TIM15->CR1 = TIM15->CR1 | 1;
 280:Src/main.c    **** 			lastTone1 = curTone1;
 281:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 282:Src/main.c    **** 		} else if (curTone1 < 20 && curTone1 != lastTone1) {
 283:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 284:Src/main.c    ****       curPeriode1 = 0;
 285:Src/main.c    **** 		}
 286:Src/main.c    **** 
 287:Src/main.c    **** 		if ((HAL_GetTick() - noteTimeout) > 1000) {
 288:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 289:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 290:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 291:Src/main.c    **** 				freqs[i] = 0;
 292:Src/main.c    **** 			}
 293:Src/main.c    **** 
 294:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, RESET);
 295:Src/main.c    **** 		}
 296:Src/main.c    **** 
 297:Src/main.c    **** 
 298:Src/main.c    **** 		//[USB-MIDI IN] to [MIDI JACK OUT]
 299:Src/main.c    **** #ifndef USE_CDC
 300:Src/main.c    **** 		if( FUNC_SUCCESS == midiGetFromUsbRx(0, &uart_tx_dat)){
 301:Src/main.c    **** 			if (uart_tx_dat >> 7 == 1) {
 302:Src/main.c    **** 				midiBuffer[0] = uart_tx_dat;
 303:Src/main.c    **** 				midiBuffer[1] = 0;
 304:Src/main.c    **** 				midiBuffer[2] = 0;
 305:Src/main.c    **** 				midiState = 1;
 306:Src/main.c    **** 			} else if (midiState == 1) {
 307:Src/main.c    **** 				midiBuffer[1] = uart_tx_dat;
 308:Src/main.c    **** 				midiState = 2;
 309:Src/main.c    **** 			} else if (midiState == 2) {
 310:Src/main.c    **** 				midiBuffer[2] = uart_tx_dat;
 311:Src/main.c    **** 				midiState = 3;
 312:Src/main.c    **** 
 313:Src/main.c    **** 				if ((midiBuffer[0] & 0xF0) == 0x90) { // Note on, 2 data bytes
 314:Src/main.c    **** 					char key = midiBuffer[1];
 315:Src/main.c    **** 					char vel = midiBuffer[2];
 316:Src/main.c    **** 
 317:Src/main.c    **** 					uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 318:Src/main.c    **** 					curChannel = midiBuffer[0] & 0xF;
ARM GAS  /tmp/ccOkcrH8.s 			page 7


 319:Src/main.c    **** 					freqs[curChannel] = freq;
 320:Src/main.c    **** 
 321:Src/main.c    **** 
 322:Src/main.c    **** 				} if ((midiBuffer[0] &0xF0) == 0x80) { // Note off, 2 data bytes
 323:Src/main.c    **** 					char key = midiBuffer[1];
 324:Src/main.c    **** 					char vel = midiBuffer[2];
 325:Src/main.c    **** 
 326:Src/main.c    **** 					uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 327:Src/main.c    **** 
 328:Src/main.c    **** 					//if (freqs[midiBuffer[0] & 0xF] == freq) {
 329:Src/main.c    **** 					freqs[midiBuffer[0] & 0xF] = 0;
 330:Src/main.c    **** 					//}
 331:Src/main.c    **** 				}
 332:Src/main.c    **** 			}
 333:Src/main.c    **** 		}
 334:Src/main.c    **** #endif
 335:Src/main.c    **** 	//[MIDI JACK IN] to [USB-MIDI OUT]
 336:Src/main.c    **** 	//midiProcess();
 337:Src/main.c    **** 
 338:Src/main.c    **** 
 339:Src/main.c    ****   }
 340:Src/main.c    ****   /* USER CODE END 3 */
 341:Src/main.c    **** 
 342:Src/main.c    **** }
 343:Src/main.c    **** 
 344:Src/main.c    **** /** System Clock Configuration
 345:Src/main.c    **** */
 346:Src/main.c    **** void SystemClock_Config(void)
 347:Src/main.c    **** {
 348:Src/main.c    **** 
 349:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 350:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 351:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 352:Src/main.c    **** 
 353:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 354:Src/main.c    ****     */
 355:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 356:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 357:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 358:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 359:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 360:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 361:Src/main.c    ****   {
 362:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 363:Src/main.c    ****   }
 364:Src/main.c    **** 
 365:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 366:Src/main.c    ****     */
 367:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 368:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 369:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 370:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 371:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 372:Src/main.c    **** 
 373:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 374:Src/main.c    ****   {
 375:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
ARM GAS  /tmp/ccOkcrH8.s 			page 8


 376:Src/main.c    ****   }
 377:Src/main.c    **** 
 378:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 379:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 380:Src/main.c    **** 
 381:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 382:Src/main.c    ****   {
 383:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 384:Src/main.c    ****   }
 385:Src/main.c    **** 
 386:Src/main.c    ****     /**Configure the Systick interrupt time
 387:Src/main.c    ****     */
 388:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 389:Src/main.c    **** 
 390:Src/main.c    ****     /**Configure the Systick
 391:Src/main.c    ****     */
 392:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 393:Src/main.c    **** 
 394:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 395:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 396:Src/main.c    **** }
 397:Src/main.c    **** 
 398:Src/main.c    **** 
 399:Src/main.c    **** /* TIM14 init function */
 400:Src/main.c    **** static void MX_TIM14_Init(void)
 401:Src/main.c    **** {
 402:Src/main.c    ****   htim14.Instance = TIM14;
 403:Src/main.c    ****   htim14.Init.Prescaler = 11;
 404:Src/main.c    ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 405:Src/main.c    ****   htim14.Init.Period = 1000;
 406:Src/main.c    ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 407:Src/main.c    ****   htim14.Init.RepetitionCounter = 0;
 408:Src/main.c    ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 409:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 410:Src/main.c    ****   {
 411:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 412:Src/main.c    ****   }
 413:Src/main.c    **** }
 414:Src/main.c    **** 
 415:Src/main.c    **** /* TIM15 init function */
 416:Src/main.c    **** static void MX_TIM15_Init(void)
 417:Src/main.c    **** {
 418:Src/main.c    ****   htim15.Instance = TIM15;
 419:Src/main.c    ****   htim15.Init.Prescaler = 11;
 420:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 421:Src/main.c    ****   htim15.Init.Period = 1000;
 422:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 423:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 424:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 425:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 426:Src/main.c    ****   {
 427:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 428:Src/main.c    ****   }
 429:Src/main.c    **** }
 430:Src/main.c    **** 
 431:Src/main.c    **** static void USER_TIM2_Init(void) {
 432:Src/main.c    **** 	__HAL_RCC_TIM2_CLK_ENABLE();
ARM GAS  /tmp/ccOkcrH8.s 			page 9


 433:Src/main.c    **** 
 434:Src/main.c    **** 	TIM_ClockConfigTypeDef sClockSourceConfig;
 435:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig;
 436:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC;
 437:Src/main.c    **** 
 438:Src/main.c    **** 	htim2.Instance = TIM2;
 439:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 440:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 441:Src/main.c    **** 	htim2.Init.Period = 3200;
 442:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 443:Src/main.c    **** 	HAL_TIM_Base_Init(&htim2);
 444:Src/main.c    **** 
 445:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 446:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 447:Src/main.c    **** 	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 448:Src/main.c    **** 
 449:Src/main.c    **** 	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 450:Src/main.c    **** 	sConfigOC.Pulse = 1;
 451:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 452:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 453:Src/main.c    **** 	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 454:Src/main.c    **** 
 455:Src/main.c    **** 	HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE);
 456:Src/main.c    **** 	HAL_TIM_MspPostInit(&htim2);
 457:Src/main.c    **** }
 458:Src/main.c    **** 
 459:Src/main.c    **** /* DAC init function */
 460:Src/main.c    **** static void MX_DAC_Init(void)
 461:Src/main.c    **** {
 462:Src/main.c    **** 
 463:Src/main.c    ****   DAC_ChannelConfTypeDef sConfig;
 464:Src/main.c    **** 
 465:Src/main.c    ****     /**DAC Initialization
 466:Src/main.c    ****     */
 467:Src/main.c    ****   hdac.Instance = DAC;
 468:Src/main.c    ****   if (HAL_DAC_Init(&hdac) != HAL_OK)
 469:Src/main.c    ****   {
 470:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 471:Src/main.c    ****   }
 472:Src/main.c    **** 
 473:Src/main.c    ****     /**DAC channel OUT1 config
 474:Src/main.c    ****     */
 475:Src/main.c    ****   sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 476:Src/main.c    ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 477:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 478:Src/main.c    ****   {
 479:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 480:Src/main.c    ****   }
 481:Src/main.c    **** 
 482:Src/main.c    **** }
 483:Src/main.c    **** 
 484:Src/main.c    **** 
 485:Src/main.c    **** 
 486:Src/main.c    **** /**
 487:Src/main.c    ****   * Enable DMA controller clock
 488:Src/main.c    ****   */
 489:Src/main.c    **** 
ARM GAS  /tmp/ccOkcrH8.s 			page 10


 490:Src/main.c    **** 
 491:Src/main.c    **** /** Configure pins as
 492:Src/main.c    ****         * Analog
 493:Src/main.c    ****         * Input
 494:Src/main.c    ****         * Output
 495:Src/main.c    ****         * EVENT_OUT
 496:Src/main.c    ****         * EXTI
 497:Src/main.c    **** */
 498:Src/main.c    **** static void MX_GPIO_Init(void)
 499:Src/main.c    **** {
  26              		.loc 1 499 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 30B5     		push	{r4, r5, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 5, -8
  35              		.cfi_offset 14, -4
  36 0002 89B0     		sub	sp, sp, #36
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 48
 500:Src/main.c    **** 
 501:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
  39              		.loc 1 501 3 view .LVU1
 502:Src/main.c    **** 
 503:Src/main.c    ****   /* GPIO Ports Clock Enable */
 504:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  40              		.loc 1 504 3 view .LVU2
  41              	.LBB8:
  42              		.loc 1 504 3 view .LVU3
  43              		.loc 1 504 3 view .LVU4
  44 0004 184B     		ldr	r3, .L2
  45 0006 5969     		ldr	r1, [r3, #20]
  46 0008 8020     		movs	r0, #128
  47 000a C003     		lsls	r0, r0, #15
  48 000c 0143     		orrs	r1, r0
  49 000e 5961     		str	r1, [r3, #20]
  50              		.loc 1 504 3 view .LVU5
  51 0010 5A69     		ldr	r2, [r3, #20]
  52 0012 0240     		ands	r2, r0
  53 0014 0092     		str	r2, [sp]
  54              		.loc 1 504 3 view .LVU6
  55 0016 009A     		ldr	r2, [sp]
  56              	.LBE8:
 505:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  57              		.loc 1 505 3 view .LVU7
  58              	.LBB9:
  59              		.loc 1 505 3 view .LVU8
  60              		.loc 1 505 3 view .LVU9
  61 0018 5969     		ldr	r1, [r3, #20]
  62 001a 8020     		movs	r0, #128
  63 001c 8002     		lsls	r0, r0, #10
  64 001e 0143     		orrs	r1, r0
  65 0020 5961     		str	r1, [r3, #20]
  66              		.loc 1 505 3 view .LVU10
ARM GAS  /tmp/ccOkcrH8.s 			page 11


  67 0022 5A69     		ldr	r2, [r3, #20]
  68 0024 0240     		ands	r2, r0
  69 0026 0192     		str	r2, [sp, #4]
  70              		.loc 1 505 3 view .LVU11
  71 0028 019A     		ldr	r2, [sp, #4]
  72              	.LBE9:
 506:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  73              		.loc 1 506 3 view .LVU12
  74              	.LBB10:
  75              		.loc 1 506 3 view .LVU13
  76              		.loc 1 506 3 view .LVU14
  77 002a 5A69     		ldr	r2, [r3, #20]
  78 002c 8021     		movs	r1, #128
  79 002e C902     		lsls	r1, r1, #11
  80 0030 0A43     		orrs	r2, r1
  81 0032 5A61     		str	r2, [r3, #20]
  82              		.loc 1 506 3 view .LVU15
  83 0034 5B69     		ldr	r3, [r3, #20]
  84 0036 0B40     		ands	r3, r1
  85 0038 0293     		str	r3, [sp, #8]
  86              		.loc 1 506 3 view .LVU16
  87 003a 029B     		ldr	r3, [sp, #8]
  88              	.LBE10:
 507:Src/main.c    **** 
 508:Src/main.c    ****   /*Configure GPIO pin Output Level */
 509:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
  89              		.loc 1 509 3 view .LVU17
  90 003c 8425     		movs	r5, #132
  91 003e 2D02     		lsls	r5, r5, #8
  92 0040 9024     		movs	r4, #144
  93 0042 E405     		lsls	r4, r4, #23
  94 0044 0022     		movs	r2, #0
  95 0046 2900     		movs	r1, r5
  96 0048 2000     		movs	r0, r4
  97 004a FFF7FEFF 		bl	HAL_GPIO_WritePin
  98              	.LVL0:
 510:Src/main.c    **** 
 511:Src/main.c    ****   /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
 512:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
  99              		.loc 1 512 3 view .LVU18
 100              		.loc 1 512 23 is_stmt 0 view .LVU19
 101 004e 0395     		str	r5, [sp, #12]
 513:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 102              		.loc 1 513 3 is_stmt 1 view .LVU20
 103              		.loc 1 513 24 is_stmt 0 view .LVU21
 104 0050 0123     		movs	r3, #1
 105 0052 0493     		str	r3, [sp, #16]
 514:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 106              		.loc 1 514 3 is_stmt 1 view .LVU22
 107              		.loc 1 514 24 is_stmt 0 view .LVU23
 108 0054 0023     		movs	r3, #0
 109 0056 0593     		str	r3, [sp, #20]
 515:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 110              		.loc 1 515 3 is_stmt 1 view .LVU24
 111              		.loc 1 515 25 is_stmt 0 view .LVU25
 112 0058 0693     		str	r3, [sp, #24]
 516:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
ARM GAS  /tmp/ccOkcrH8.s 			page 12


 113              		.loc 1 516 3 is_stmt 1 view .LVU26
 114 005a 03A9     		add	r1, sp, #12
 115 005c 2000     		movs	r0, r4
 116 005e FFF7FEFF 		bl	HAL_GPIO_Init
 117              	.LVL1:
 517:Src/main.c    **** }
 118              		.loc 1 517 1 is_stmt 0 view .LVU27
 119 0062 09B0     		add	sp, sp, #36
 120              		@ sp needed
 121 0064 30BD     		pop	{r4, r5, pc}
 122              	.L3:
 123 0066 C046     		.align	2
 124              	.L2:
 125 0068 00100240 		.word	1073876992
 126              		.cfi_endproc
 127              	.LFE45:
 129              		.section	.text.USER_TIM2_Init,"ax",%progbits
 130              		.align	1
 131              		.syntax unified
 132              		.code	16
 133              		.thumb_func
 134              		.fpu softvfp
 136              	USER_TIM2_Init:
 137              	.LFB43:
 431:Src/main.c    **** 	__HAL_RCC_TIM2_CLK_ENABLE();
 138              		.loc 1 431 34 is_stmt 1 view -0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 40
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142 0000 70B5     		push	{r4, r5, r6, lr}
 143              	.LCFI2:
 144              		.cfi_def_cfa_offset 16
 145              		.cfi_offset 4, -16
 146              		.cfi_offset 5, -12
 147              		.cfi_offset 6, -8
 148              		.cfi_offset 14, -4
 149 0002 8AB0     		sub	sp, sp, #40
 150              	.LCFI3:
 151              		.cfi_def_cfa_offset 56
 432:Src/main.c    **** 
 152              		.loc 1 432 2 view .LVU29
 153              	.LBB11:
 432:Src/main.c    **** 
 154              		.loc 1 432 2 view .LVU30
 432:Src/main.c    **** 
 155              		.loc 1 432 2 view .LVU31
 156 0004 194B     		ldr	r3, .L5
 157 0006 DA69     		ldr	r2, [r3, #28]
 158 0008 0126     		movs	r6, #1
 159 000a 3243     		orrs	r2, r6
 160 000c DA61     		str	r2, [r3, #28]
 432:Src/main.c    **** 
 161              		.loc 1 432 2 view .LVU32
 162 000e DB69     		ldr	r3, [r3, #28]
 163 0010 3340     		ands	r3, r6
 164 0012 0093     		str	r3, [sp]
 432:Src/main.c    **** 
ARM GAS  /tmp/ccOkcrH8.s 			page 13


 165              		.loc 1 432 2 view .LVU33
 166 0014 009B     		ldr	r3, [sp]
 167              	.LBE11:
 434:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig;
 168              		.loc 1 434 2 view .LVU34
 435:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC;
 169              		.loc 1 435 2 view .LVU35
 436:Src/main.c    **** 
 170              		.loc 1 436 2 view .LVU36
 438:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 171              		.loc 1 438 2 view .LVU37
 438:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 172              		.loc 1 438 17 is_stmt 0 view .LVU38
 173 0016 164C     		ldr	r4, .L5+4
 174 0018 8023     		movs	r3, #128
 175 001a DB05     		lsls	r3, r3, #23
 176 001c 2360     		str	r3, [r4]
 439:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 177              		.loc 1 439 2 is_stmt 1 view .LVU39
 439:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 178              		.loc 1 439 23 is_stmt 0 view .LVU40
 179 001e 0025     		movs	r5, #0
 180 0020 6560     		str	r5, [r4, #4]
 440:Src/main.c    **** 	htim2.Init.Period = 3200;
 181              		.loc 1 440 2 is_stmt 1 view .LVU41
 440:Src/main.c    **** 	htim2.Init.Period = 3200;
 182              		.loc 1 440 25 is_stmt 0 view .LVU42
 183 0022 A560     		str	r5, [r4, #8]
 441:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 184              		.loc 1 441 2 is_stmt 1 view .LVU43
 441:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 185              		.loc 1 441 20 is_stmt 0 view .LVU44
 186 0024 C823     		movs	r3, #200
 187 0026 1B01     		lsls	r3, r3, #4
 188 0028 E360     		str	r3, [r4, #12]
 442:Src/main.c    **** 	HAL_TIM_Base_Init(&htim2);
 189              		.loc 1 442 2 is_stmt 1 view .LVU45
 442:Src/main.c    **** 	HAL_TIM_Base_Init(&htim2);
 190              		.loc 1 442 27 is_stmt 0 view .LVU46
 191 002a 8023     		movs	r3, #128
 192 002c 9B00     		lsls	r3, r3, #2
 193 002e 2361     		str	r3, [r4, #16]
 443:Src/main.c    **** 
 194              		.loc 1 443 2 is_stmt 1 view .LVU47
 195 0030 2000     		movs	r0, r4
 196 0032 FFF7FEFF 		bl	HAL_TIM_Base_Init
 197              	.LVL2:
 445:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 198              		.loc 1 445 2 view .LVU48
 445:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 199              		.loc 1 445 36 is_stmt 0 view .LVU49
 200 0036 0895     		str	r5, [sp, #32]
 446:Src/main.c    **** 	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 201              		.loc 1 446 2 is_stmt 1 view .LVU50
 446:Src/main.c    **** 	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 202              		.loc 1 446 32 is_stmt 0 view .LVU51
 203 0038 0995     		str	r5, [sp, #36]
ARM GAS  /tmp/ccOkcrH8.s 			page 14


 447:Src/main.c    **** 
 204              		.loc 1 447 2 is_stmt 1 view .LVU52
 205 003a 08A9     		add	r1, sp, #32
 206 003c 2000     		movs	r0, r4
 207 003e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 208              	.LVL3:
 449:Src/main.c    **** 	sConfigOC.Pulse = 1;
 209              		.loc 1 449 2 view .LVU53
 449:Src/main.c    **** 	sConfigOC.Pulse = 1;
 210              		.loc 1 449 19 is_stmt 0 view .LVU54
 211 0042 6023     		movs	r3, #96
 212 0044 0193     		str	r3, [sp, #4]
 450:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 213              		.loc 1 450 2 is_stmt 1 view .LVU55
 450:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 214              		.loc 1 450 18 is_stmt 0 view .LVU56
 215 0046 0296     		str	r6, [sp, #8]
 451:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 216              		.loc 1 451 2 is_stmt 1 view .LVU57
 451:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 217              		.loc 1 451 23 is_stmt 0 view .LVU58
 218 0048 5E3B     		subs	r3, r3, #94
 219 004a 0393     		str	r3, [sp, #12]
 452:Src/main.c    **** 	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 220              		.loc 1 452 2 is_stmt 1 view .LVU59
 452:Src/main.c    **** 	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 221              		.loc 1 452 23 is_stmt 0 view .LVU60
 222 004c 0595     		str	r5, [sp, #20]
 453:Src/main.c    **** 
 223              		.loc 1 453 2 is_stmt 1 view .LVU61
 224 004e 0422     		movs	r2, #4
 225 0050 01A9     		add	r1, sp, #4
 226 0052 2000     		movs	r0, r4
 227 0054 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 228              	.LVL4:
 455:Src/main.c    **** 	HAL_TIM_MspPostInit(&htim2);
 229              		.loc 1 455 2 view .LVU62
 230 0058 0821     		movs	r1, #8
 231 005a 2000     		movs	r0, r4
 232 005c FFF7FEFF 		bl	HAL_TIM_OnePulse_Init
 233              	.LVL5:
 456:Src/main.c    **** }
 234              		.loc 1 456 2 view .LVU63
 235 0060 2000     		movs	r0, r4
 236 0062 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 237              	.LVL6:
 457:Src/main.c    **** 
 238              		.loc 1 457 1 is_stmt 0 view .LVU64
 239 0066 0AB0     		add	sp, sp, #40
 240              		@ sp needed
 241 0068 70BD     		pop	{r4, r5, r6, pc}
 242              	.L6:
 243 006a C046     		.align	2
 244              	.L5:
 245 006c 00100240 		.word	1073876992
 246 0070 00000000 		.word	htim2
 247              		.cfi_endproc
ARM GAS  /tmp/ccOkcrH8.s 			page 15


 248              	.LFE43:
 250              		.section	.text.dfu_otter_bootloader,"ax",%progbits
 251              		.align	1
 252              		.global	dfu_otter_bootloader
 253              		.syntax unified
 254              		.code	16
 255              		.thumb_func
 256              		.fpu softvfp
 258              	dfu_otter_bootloader:
 259              	.LFB37:
  91:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 260              		.loc 1 91 1 is_stmt 1 view -0
 261              		.cfi_startproc
 262              		@ Volatile: function does not return.
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265              		@ link register save eliminated.
  92:Src/main.c    ****   NVIC_SystemReset();
 266              		.loc 1 92 3 view .LVU66
  92:Src/main.c    ****   NVIC_SystemReset();
 267              		.loc 1 92 34 is_stmt 0 view .LVU67
 268 0000 054B     		ldr	r3, .L9
 269 0002 064A     		ldr	r2, .L9+4
 270 0004 1A60     		str	r2, [r3]
  93:Src/main.c    **** }
 271              		.loc 1 93 3 is_stmt 1 view .LVU68
 272              	.LBB20:
 273              	.LBI20:
 274              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
ARM GAS  /tmp/ccOkcrH8.s 			page 16


  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
ARM GAS  /tmp/ccOkcrH8.s 			page 17


  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0.h **** 
 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0.h **** 
 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
ARM GAS  /tmp/ccOkcrH8.s 			page 18


 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0.h **** 
 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:Drivers/CMSIS/Include/core_cm0.h **** 
 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
ARM GAS  /tmp/ccOkcrH8.s 			page 19


 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
ARM GAS  /tmp/ccOkcrH8.s 			page 20


 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
ARM GAS  /tmp/ccOkcrH8.s 			page 21


 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
 358:Drivers/CMSIS/Include/core_cm0.h **** 
 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
ARM GAS  /tmp/ccOkcrH8.s 			page 22


 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:Drivers/CMSIS/Include/core_cm0.h **** 
 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccOkcrH8.s 			page 23


 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0.h **** 
 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccOkcrH8.s 			page 24


 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
ARM GAS  /tmp/ccOkcrH8.s 			page 25


 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:Drivers/CMSIS/Include/core_cm0.h **** 
 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
ARM GAS  /tmp/ccOkcrH8.s 			page 26


 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:Drivers/CMSIS/Include/core_cm0.h **** /**
 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:Drivers/CMSIS/Include/core_cm0.h **** }
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:Drivers/CMSIS/Include/core_cm0.h **** }
 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:Drivers/CMSIS/Include/core_cm0.h **** {
 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
ARM GAS  /tmp/ccOkcrH8.s 			page 27


 656:Drivers/CMSIS/Include/core_cm0.h **** }
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:Drivers/CMSIS/Include/core_cm0.h ****   }
 700:Drivers/CMSIS/Include/core_cm0.h **** }
 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
ARM GAS  /tmp/ccOkcrH8.s 			page 28


 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
 723:Drivers/CMSIS/Include/core_cm0.h **** }
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 275              		.loc 2 730 22 view .LVU69
 276              	.LBB21:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 277              		.loc 2 732 3 view .LVU70
 278              	.LBB22:
 279              	.LBI22:
 280              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
ARM GAS  /tmp/ccOkcrH8.s 			page 29


  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccOkcrH8.s 			page 30


  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
ARM GAS  /tmp/ccOkcrH8.s 			page 31


 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccOkcrH8.s 			page 32


 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
ARM GAS  /tmp/ccOkcrH8.s 			page 33


 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
ARM GAS  /tmp/ccOkcrH8.s 			page 34


 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
ARM GAS  /tmp/ccOkcrH8.s 			page 35


 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 281              		.loc 3 427 53 view .LVU71
 282              	.LBB23:
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccOkcrH8.s 			page 36


 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 283              		.loc 3 429 3 view .LVU72
 284              		.syntax divided
 285              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 286 0006 BFF34F8F 		dsb 0xF
 287              	@ 0 "" 2
 288              		.thumb
 289              		.syntax unified
 290              	.LBE23:
 291              	.LBE22:
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 292              		.loc 2 734 3 view .LVU73
 293              		.loc 2 734 15 is_stmt 0 view .LVU74
 294 000a 054B     		ldr	r3, .L9+8
 295 000c 054A     		ldr	r2, .L9+12
 296 000e DA60     		str	r2, [r3, #12]
 735:Drivers/CMSIS/Include/core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 736:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure completion of memory 
 297              		.loc 2 736 3 is_stmt 1 view .LVU75
 298              	.LBB24:
 299              	.LBI24:
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 300              		.loc 3 427 53 view .LVU76
 301              	.LBB25:
 302              		.loc 3 429 3 view .LVU77
 303              		.syntax divided
 304              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 305 0010 BFF34F8F 		dsb 0xF
 306              	@ 0 "" 2
 307              		.thumb
 308              		.syntax unified
 309              	.L8:
 310              	.LBE25:
 311              	.LBE24:
 737:Drivers/CMSIS/Include/core_cm0.h **** 
 738:Drivers/CMSIS/Include/core_cm0.h ****   for(;;)                                                           /* wait until reset */
 312              		.loc 2 738 3 view .LVU78
 739:Drivers/CMSIS/Include/core_cm0.h ****   {
 740:Drivers/CMSIS/Include/core_cm0.h ****     __NOP();
 313              		.loc 2 740 5 view .LVU79
 314              	.LBB26:
 315              	.LBI26:
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316              		.loc 3 373 53 view .LVU80
 317              	.LBB27:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318              		.loc 3 375 3 view .LVU81
 319              		.syntax divided
 320              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 321 0014 C046     		nop
 322              	@ 0 "" 2
 323              		.thumb
 324              		.syntax unified
 325 0016 FDE7     		b	.L8
 326              	.L10:
 327              		.align	2
ARM GAS  /tmp/ccOkcrH8.s 			page 37


 328              	.L9:
 329 0018 F03F0020 		.word	536887280
 330 001c EFBEADDE 		.word	-559038737
 331 0020 00ED00E0 		.word	-536810240
 332 0024 0400FA05 		.word	100270084
 333              	.LBE27:
 334              	.LBE26:
 335              	.LBE21:
 336              	.LBE20:
 337              		.cfi_endproc
 338              	.LFE37:
 340              		.global	__aeabi_uidiv
 341              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 342              		.align	1
 343              		.global	HAL_TIM_PeriodElapsedCallback
 344              		.syntax unified
 345              		.code	16
 346              		.thumb_func
 347              		.fpu softvfp
 349              	HAL_TIM_PeriodElapsedCallback:
 350              	.LVL7:
 351              	.LFB38:
 103:Src/main.c    **** 	if(htim->Instance == TIM14)
 352              		.loc 1 103 1 view -0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 103:Src/main.c    **** 	if(htim->Instance == TIM14)
 356              		.loc 1 103 1 is_stmt 0 view .LVU83
 357 0000 10B5     		push	{r4, lr}
 358              	.LCFI4:
 359              		.cfi_def_cfa_offset 8
 360              		.cfi_offset 4, -8
 361              		.cfi_offset 14, -4
 362 0002 0400     		movs	r4, r0
 104:Src/main.c    **** 	{
 363              		.loc 1 104 2 is_stmt 1 view .LVU84
 104:Src/main.c    **** 	{
 364              		.loc 1 104 4 is_stmt 0 view .LVU85
 365 0004 164B     		ldr	r3, .L16
 366 0006 0268     		ldr	r2, [r0]
 367 0008 9A42     		cmp	r2, r3
 368 000a 04D0     		beq	.L14
 369              	.LVL8:
 370              	.L12:
 112:Src/main.c    **** 	{
 371              		.loc 1 112 2 is_stmt 1 view .LVU86
 112:Src/main.c    **** 	{
 372              		.loc 1 112 9 is_stmt 0 view .LVU87
 373 000c 2268     		ldr	r2, [r4]
 112:Src/main.c    **** 	{
 374              		.loc 1 112 4 view .LVU88
 375 000e 154B     		ldr	r3, .L16+4
 376 0010 9A42     		cmp	r2, r3
 377 0012 12D0     		beq	.L15
 378              	.L11:
 120:Src/main.c    **** 
ARM GAS  /tmp/ccOkcrH8.s 			page 38


 379              		.loc 1 120 1 view .LVU89
 380              		@ sp needed
 381              	.LVL9:
 120:Src/main.c    **** 
 382              		.loc 1 120 1 view .LVU90
 383 0014 10BD     		pop	{r4, pc}
 384              	.LVL10:
 385              	.L14:
 107:Src/main.c    ****       TIM2->ARR = (uint32_t)(curPeriode0 / 5); // Play first channel
 386              		.loc 1 107 5 is_stmt 1 view .LVU91
 107:Src/main.c    ****       TIM2->ARR = (uint32_t)(curPeriode0 / 5); // Play first channel
 387              		.loc 1 107 13 is_stmt 0 view .LVU92
 388 0016 8023     		movs	r3, #128
 389 0018 DB05     		lsls	r3, r3, #23
 390 001a 5B6A     		ldr	r3, [r3, #36]
 107:Src/main.c    ****       TIM2->ARR = (uint32_t)(curPeriode0 / 5); // Play first channel
 391              		.loc 1 107 8 view .LVU93
 392 001c 002B     		cmp	r3, #0
 393 001e F5D1     		bne	.L12
 108:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 394              		.loc 1 108 7 is_stmt 1 view .LVU94
 108:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 395              		.loc 1 108 19 is_stmt 0 view .LVU95
 396 0020 114B     		ldr	r3, .L16+8
 397 0022 1868     		ldr	r0, [r3]
 398              	.LVL11:
 108:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 399              		.loc 1 108 19 view .LVU96
 400 0024 0521     		movs	r1, #5
 401 0026 FFF7FEFF 		bl	__aeabi_uidiv
 402              	.LVL12:
 108:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 403              		.loc 1 108 17 view .LVU97
 404 002a 8023     		movs	r3, #128
 405 002c DB05     		lsls	r3, r3, #23
 406 002e D862     		str	r0, [r3, #44]
 109:Src/main.c    ****     }
 407              		.loc 1 109 6 is_stmt 1 view .LVU98
 109:Src/main.c    ****     }
 408              		.loc 1 109 22 is_stmt 0 view .LVU99
 409 0030 1A68     		ldr	r2, [r3]
 109:Src/main.c    ****     }
 410              		.loc 1 109 28 view .LVU100
 411 0032 0121     		movs	r1, #1
 412 0034 0A43     		orrs	r2, r1
 109:Src/main.c    ****     }
 413              		.loc 1 109 16 view .LVU101
 414 0036 1A60     		str	r2, [r3]
 415 0038 E8E7     		b	.L12
 416              	.L15:
 115:Src/main.c    ****     	TIM2->ARR = (uint32_t)(curPeriode1 / 10); // Play second channel with less power
 417              		.loc 1 115 5 is_stmt 1 view .LVU102
 115:Src/main.c    ****     	TIM2->ARR = (uint32_t)(curPeriode1 / 10); // Play second channel with less power
 418              		.loc 1 115 13 is_stmt 0 view .LVU103
 419 003a 8023     		movs	r3, #128
 420 003c DB05     		lsls	r3, r3, #23
 421 003e 5B6A     		ldr	r3, [r3, #36]
ARM GAS  /tmp/ccOkcrH8.s 			page 39


 115:Src/main.c    ****     	TIM2->ARR = (uint32_t)(curPeriode1 / 10); // Play second channel with less power
 422              		.loc 1 115 8 view .LVU104
 423 0040 002B     		cmp	r3, #0
 424 0042 E7D1     		bne	.L11
 116:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 425              		.loc 1 116 6 is_stmt 1 view .LVU105
 116:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 426              		.loc 1 116 18 is_stmt 0 view .LVU106
 427 0044 094B     		ldr	r3, .L16+12
 428 0046 1868     		ldr	r0, [r3]
 429 0048 0A21     		movs	r1, #10
 430 004a FFF7FEFF 		bl	__aeabi_uidiv
 431              	.LVL13:
 116:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 432              		.loc 1 116 16 view .LVU107
 433 004e 8023     		movs	r3, #128
 434 0050 DB05     		lsls	r3, r3, #23
 435 0052 D862     		str	r0, [r3, #44]
 117:Src/main.c    ****     }
 436              		.loc 1 117 6 is_stmt 1 view .LVU108
 117:Src/main.c    ****     }
 437              		.loc 1 117 22 is_stmt 0 view .LVU109
 438 0054 1A68     		ldr	r2, [r3]
 117:Src/main.c    ****     }
 439              		.loc 1 117 28 view .LVU110
 440 0056 0121     		movs	r1, #1
 441 0058 0A43     		orrs	r2, r1
 117:Src/main.c    ****     }
 442              		.loc 1 117 16 view .LVU111
 443 005a 1A60     		str	r2, [r3]
 120:Src/main.c    **** 
 444              		.loc 1 120 1 view .LVU112
 445 005c DAE7     		b	.L11
 446              	.L17:
 447 005e C046     		.align	2
 448              	.L16:
 449 0060 00200040 		.word	1073750016
 450 0064 00400140 		.word	1073823744
 451 0068 00000000 		.word	.LANCHOR0
 452 006c 00000000 		.word	.LANCHOR1
 453              		.cfi_endproc
 454              	.LFE38:
 456              		.section	.text._Error_Handler,"ax",%progbits
 457              		.align	1
 458              		.global	_Error_Handler
 459              		.syntax unified
 460              		.code	16
 461              		.thumb_func
 462              		.fpu softvfp
 464              	_Error_Handler:
 465              	.LFB46:
 518:Src/main.c    **** 
 519:Src/main.c    **** /* USER CODE BEGIN 4 */
 520:Src/main.c    **** 
 521:Src/main.c    **** /* USER CODE END 4 */
 522:Src/main.c    **** 
 523:Src/main.c    **** /**
ARM GAS  /tmp/ccOkcrH8.s 			page 40


 524:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 525:Src/main.c    ****   * @param  file: The file name as string.
 526:Src/main.c    ****   * @param  line: The line in file as a number.
 527:Src/main.c    ****   * @retval None
 528:Src/main.c    ****   */
 529:Src/main.c    **** void _Error_Handler(char *file, int line)
 530:Src/main.c    **** {
 466              		.loc 1 530 1 is_stmt 1 view -0
 467              		.cfi_startproc
 468              		@ Volatile: function does not return.
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471              		@ link register save eliminated.
 472              	.LVL14:
 473              	.L19:
 531:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 532:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 533:Src/main.c    ****   while(1)
 474              		.loc 1 533 3 discriminator 1 view .LVU114
 534:Src/main.c    ****   {
 535:Src/main.c    ****   }
 475              		.loc 1 535 3 discriminator 1 view .LVU115
 476 0000 FEE7     		b	.L19
 477              		.cfi_endproc
 478              	.LFE46:
 480              		.section	.text.MX_DAC_Init,"ax",%progbits
 481              		.align	1
 482              		.syntax unified
 483              		.code	16
 484              		.thumb_func
 485              		.fpu softvfp
 487              	MX_DAC_Init:
 488              	.LFB44:
 461:Src/main.c    **** 
 489              		.loc 1 461 1 view -0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 8
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493 0000 00B5     		push	{lr}
 494              	.LCFI5:
 495              		.cfi_def_cfa_offset 4
 496              		.cfi_offset 14, -4
 497 0002 83B0     		sub	sp, sp, #12
 498              	.LCFI6:
 499              		.cfi_def_cfa_offset 16
 463:Src/main.c    **** 
 500              		.loc 1 463 3 view .LVU117
 467:Src/main.c    ****   if (HAL_DAC_Init(&hdac) != HAL_OK)
 501              		.loc 1 467 3 view .LVU118
 467:Src/main.c    ****   if (HAL_DAC_Init(&hdac) != HAL_OK)
 502              		.loc 1 467 17 is_stmt 0 view .LVU119
 503 0004 0E48     		ldr	r0, .L25
 504 0006 0F4B     		ldr	r3, .L25+4
 505 0008 0360     		str	r3, [r0]
 468:Src/main.c    ****   {
 506              		.loc 1 468 3 is_stmt 1 view .LVU120
 468:Src/main.c    ****   {
ARM GAS  /tmp/ccOkcrH8.s 			page 41


 507              		.loc 1 468 7 is_stmt 0 view .LVU121
 508 000a FFF7FEFF 		bl	HAL_DAC_Init
 509              	.LVL15:
 468:Src/main.c    ****   {
 510              		.loc 1 468 6 view .LVU122
 511 000e 0028     		cmp	r0, #0
 512 0010 0BD1     		bne	.L23
 475:Src/main.c    ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 513              		.loc 1 475 3 is_stmt 1 view .LVU123
 475:Src/main.c    ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 514              		.loc 1 475 23 is_stmt 0 view .LVU124
 515 0012 0023     		movs	r3, #0
 516 0014 0093     		str	r3, [sp]
 476:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 517              		.loc 1 476 3 is_stmt 1 view .LVU125
 476:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 518              		.loc 1 476 28 is_stmt 0 view .LVU126
 519 0016 0193     		str	r3, [sp, #4]
 477:Src/main.c    ****   {
 520              		.loc 1 477 3 is_stmt 1 view .LVU127
 477:Src/main.c    ****   {
 521              		.loc 1 477 7 is_stmt 0 view .LVU128
 522 0018 0022     		movs	r2, #0
 523 001a 6946     		mov	r1, sp
 524 001c 0848     		ldr	r0, .L25
 525 001e FFF7FEFF 		bl	HAL_DAC_ConfigChannel
 526              	.LVL16:
 477:Src/main.c    ****   {
 527              		.loc 1 477 6 view .LVU129
 528 0022 0028     		cmp	r0, #0
 529 0024 06D1     		bne	.L24
 482:Src/main.c    **** 
 530              		.loc 1 482 1 view .LVU130
 531 0026 03B0     		add	sp, sp, #12
 532              		@ sp needed
 533 0028 00BD     		pop	{pc}
 534              	.L23:
 470:Src/main.c    ****   }
 535              		.loc 1 470 5 is_stmt 1 view .LVU131
 536 002a EB21     		movs	r1, #235
 537 002c 4900     		lsls	r1, r1, #1
 538 002e 0648     		ldr	r0, .L25+8
 539 0030 FFF7FEFF 		bl	_Error_Handler
 540              	.LVL17:
 541              	.L24:
 479:Src/main.c    ****   }
 542              		.loc 1 479 5 view .LVU132
 543 0034 E021     		movs	r1, #224
 544 0036 FF31     		adds	r1, r1, #255
 545 0038 0348     		ldr	r0, .L25+8
 546 003a FFF7FEFF 		bl	_Error_Handler
 547              	.LVL18:
 548              	.L26:
 549 003e C046     		.align	2
 550              	.L25:
 551 0040 00000000 		.word	hdac
 552 0044 00740040 		.word	1073771520
ARM GAS  /tmp/ccOkcrH8.s 			page 42


 553 0048 00000000 		.word	.LC4
 554              		.cfi_endproc
 555              	.LFE44:
 557              		.section	.text.MX_TIM14_Init,"ax",%progbits
 558              		.align	1
 559              		.syntax unified
 560              		.code	16
 561              		.thumb_func
 562              		.fpu softvfp
 564              	MX_TIM14_Init:
 565              	.LFB41:
 401:Src/main.c    ****   htim14.Instance = TIM14;
 566              		.loc 1 401 1 view -0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570 0000 10B5     		push	{r4, lr}
 571              	.LCFI7:
 572              		.cfi_def_cfa_offset 8
 573              		.cfi_offset 4, -8
 574              		.cfi_offset 14, -4
 402:Src/main.c    ****   htim14.Init.Prescaler = 11;
 575              		.loc 1 402 3 view .LVU134
 402:Src/main.c    ****   htim14.Init.Prescaler = 11;
 576              		.loc 1 402 19 is_stmt 0 view .LVU135
 577 0002 0C48     		ldr	r0, .L30
 578 0004 0C4B     		ldr	r3, .L30+4
 579 0006 0360     		str	r3, [r0]
 403:Src/main.c    ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 580              		.loc 1 403 3 is_stmt 1 view .LVU136
 403:Src/main.c    ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 581              		.loc 1 403 25 is_stmt 0 view .LVU137
 582 0008 0B23     		movs	r3, #11
 583 000a 4360     		str	r3, [r0, #4]
 404:Src/main.c    ****   htim14.Init.Period = 1000;
 584              		.loc 1 404 3 is_stmt 1 view .LVU138
 404:Src/main.c    ****   htim14.Init.Period = 1000;
 585              		.loc 1 404 27 is_stmt 0 view .LVU139
 586 000c 0023     		movs	r3, #0
 587 000e 8360     		str	r3, [r0, #8]
 405:Src/main.c    ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 588              		.loc 1 405 3 is_stmt 1 view .LVU140
 405:Src/main.c    ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 589              		.loc 1 405 22 is_stmt 0 view .LVU141
 590 0010 FA22     		movs	r2, #250
 591 0012 9200     		lsls	r2, r2, #2
 592 0014 C260     		str	r2, [r0, #12]
 406:Src/main.c    ****   htim14.Init.RepetitionCounter = 0;
 593              		.loc 1 406 3 is_stmt 1 view .LVU142
 406:Src/main.c    ****   htim14.Init.RepetitionCounter = 0;
 594              		.loc 1 406 29 is_stmt 0 view .LVU143
 595 0016 E93A     		subs	r2, r2, #233
 596 0018 FF3A     		subs	r2, r2, #255
 597 001a 0261     		str	r2, [r0, #16]
 407:Src/main.c    ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 598              		.loc 1 407 3 is_stmt 1 view .LVU144
 407:Src/main.c    ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
ARM GAS  /tmp/ccOkcrH8.s 			page 43


 599              		.loc 1 407 33 is_stmt 0 view .LVU145
 600 001c 4361     		str	r3, [r0, #20]
 408:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 601              		.loc 1 408 3 is_stmt 1 view .LVU146
 408:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 602              		.loc 1 408 33 is_stmt 0 view .LVU147
 603 001e 8361     		str	r3, [r0, #24]
 409:Src/main.c    ****   {
 604              		.loc 1 409 3 is_stmt 1 view .LVU148
 409:Src/main.c    ****   {
 605              		.loc 1 409 7 is_stmt 0 view .LVU149
 606 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 607              	.LVL19:
 409:Src/main.c    ****   {
 608              		.loc 1 409 6 view .LVU150
 609 0024 0028     		cmp	r0, #0
 610 0026 00D1     		bne	.L29
 413:Src/main.c    **** 
 611              		.loc 1 413 1 view .LVU151
 612              		@ sp needed
 613 0028 10BD     		pop	{r4, pc}
 614              	.L29:
 411:Src/main.c    ****   }
 615              		.loc 1 411 5 is_stmt 1 view .LVU152
 616 002a 9C21     		movs	r1, #156
 617 002c FF31     		adds	r1, r1, #255
 618 002e 0348     		ldr	r0, .L30+8
 619 0030 FFF7FEFF 		bl	_Error_Handler
 620              	.LVL20:
 621              	.L31:
 622              		.align	2
 623              	.L30:
 624 0034 00000000 		.word	htim14
 625 0038 00200040 		.word	1073750016
 626 003c 00000000 		.word	.LC4
 627              		.cfi_endproc
 628              	.LFE41:
 630              		.section	.text.MX_TIM15_Init,"ax",%progbits
 631              		.align	1
 632              		.syntax unified
 633              		.code	16
 634              		.thumb_func
 635              		.fpu softvfp
 637              	MX_TIM15_Init:
 638              	.LFB42:
 417:Src/main.c    ****   htim15.Instance = TIM15;
 639              		.loc 1 417 1 view -0
 640              		.cfi_startproc
 641              		@ args = 0, pretend = 0, frame = 0
 642              		@ frame_needed = 0, uses_anonymous_args = 0
 643 0000 10B5     		push	{r4, lr}
 644              	.LCFI8:
 645              		.cfi_def_cfa_offset 8
 646              		.cfi_offset 4, -8
 647              		.cfi_offset 14, -4
 418:Src/main.c    ****   htim15.Init.Prescaler = 11;
 648              		.loc 1 418 3 view .LVU154
ARM GAS  /tmp/ccOkcrH8.s 			page 44


 418:Src/main.c    ****   htim15.Init.Prescaler = 11;
 649              		.loc 1 418 19 is_stmt 0 view .LVU155
 650 0002 0C48     		ldr	r0, .L35
 651 0004 0C4B     		ldr	r3, .L35+4
 652 0006 0360     		str	r3, [r0]
 419:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 653              		.loc 1 419 3 is_stmt 1 view .LVU156
 419:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 654              		.loc 1 419 25 is_stmt 0 view .LVU157
 655 0008 0B23     		movs	r3, #11
 656 000a 4360     		str	r3, [r0, #4]
 420:Src/main.c    ****   htim15.Init.Period = 1000;
 657              		.loc 1 420 3 is_stmt 1 view .LVU158
 420:Src/main.c    ****   htim15.Init.Period = 1000;
 658              		.loc 1 420 27 is_stmt 0 view .LVU159
 659 000c 0023     		movs	r3, #0
 660 000e 8360     		str	r3, [r0, #8]
 421:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 661              		.loc 1 421 3 is_stmt 1 view .LVU160
 421:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 662              		.loc 1 421 22 is_stmt 0 view .LVU161
 663 0010 FA22     		movs	r2, #250
 664 0012 9200     		lsls	r2, r2, #2
 665 0014 C260     		str	r2, [r0, #12]
 422:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 666              		.loc 1 422 3 is_stmt 1 view .LVU162
 422:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 667              		.loc 1 422 29 is_stmt 0 view .LVU163
 668 0016 E93A     		subs	r2, r2, #233
 669 0018 FF3A     		subs	r2, r2, #255
 670 001a 0261     		str	r2, [r0, #16]
 423:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 671              		.loc 1 423 3 is_stmt 1 view .LVU164
 423:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 672              		.loc 1 423 33 is_stmt 0 view .LVU165
 673 001c 4361     		str	r3, [r0, #20]
 424:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 674              		.loc 1 424 3 is_stmt 1 view .LVU166
 424:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 675              		.loc 1 424 33 is_stmt 0 view .LVU167
 676 001e 8361     		str	r3, [r0, #24]
 425:Src/main.c    ****   {
 677              		.loc 1 425 3 is_stmt 1 view .LVU168
 425:Src/main.c    ****   {
 678              		.loc 1 425 7 is_stmt 0 view .LVU169
 679 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 680              	.LVL21:
 425:Src/main.c    ****   {
 681              		.loc 1 425 6 view .LVU170
 682 0024 0028     		cmp	r0, #0
 683 0026 00D1     		bne	.L34
 429:Src/main.c    **** 
 684              		.loc 1 429 1 view .LVU171
 685              		@ sp needed
 686 0028 10BD     		pop	{r4, pc}
 687              	.L34:
 427:Src/main.c    ****   }
ARM GAS  /tmp/ccOkcrH8.s 			page 45


 688              		.loc 1 427 5 is_stmt 1 view .LVU172
 689 002a AC21     		movs	r1, #172
 690 002c FF31     		adds	r1, r1, #255
 691 002e 0348     		ldr	r0, .L35+8
 692 0030 FFF7FEFF 		bl	_Error_Handler
 693              	.LVL22:
 694              	.L36:
 695              		.align	2
 696              	.L35:
 697 0034 00000000 		.word	htim15
 698 0038 00400140 		.word	1073823744
 699 003c 00000000 		.word	.LC4
 700              		.cfi_endproc
 701              	.LFE42:
 703              		.section	.text.SystemClock_Config,"ax",%progbits
 704              		.align	1
 705              		.global	SystemClock_Config
 706              		.syntax unified
 707              		.code	16
 708              		.thumb_func
 709              		.fpu softvfp
 711              	SystemClock_Config:
 712              	.LFB40:
 347:Src/main.c    **** 
 713              		.loc 1 347 1 view -0
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 96
 716              		@ frame_needed = 0, uses_anonymous_args = 0
 717 0000 00B5     		push	{lr}
 718              	.LCFI9:
 719              		.cfi_def_cfa_offset 4
 720              		.cfi_offset 14, -4
 721 0002 99B0     		sub	sp, sp, #100
 722              	.LCFI10:
 723              		.cfi_def_cfa_offset 104
 349:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 724              		.loc 1 349 3 view .LVU174
 350:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 725              		.loc 1 350 3 view .LVU175
 351:Src/main.c    **** 
 726              		.loc 1 351 3 view .LVU176
 355:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 727              		.loc 1 355 3 view .LVU177
 355:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 728              		.loc 1 355 36 is_stmt 0 view .LVU178
 729 0004 3023     		movs	r3, #48
 730 0006 0B93     		str	r3, [sp, #44]
 356:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 731              		.loc 1 356 3 is_stmt 1 view .LVU179
 356:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 732              		.loc 1 356 32 is_stmt 0 view .LVU180
 733 0008 2F3B     		subs	r3, r3, #47
 734 000a 1393     		str	r3, [sp, #76]
 357:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 735              		.loc 1 357 3 is_stmt 1 view .LVU181
 357:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 736              		.loc 1 357 32 is_stmt 0 view .LVU182
ARM GAS  /tmp/ccOkcrH8.s 			page 46


 737 000c 1093     		str	r3, [sp, #64]
 358:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 738              		.loc 1 358 3 is_stmt 1 view .LVU183
 358:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 739              		.loc 1 358 43 is_stmt 0 view .LVU184
 740 000e 0F33     		adds	r3, r3, #15
 741 0010 1193     		str	r3, [sp, #68]
 359:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 742              		.loc 1 359 3 is_stmt 1 view .LVU185
 359:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 743              		.loc 1 359 34 is_stmt 0 view .LVU186
 744 0012 0023     		movs	r3, #0
 745 0014 1493     		str	r3, [sp, #80]
 360:Src/main.c    ****   {
 746              		.loc 1 360 3 is_stmt 1 view .LVU187
 360:Src/main.c    ****   {
 747              		.loc 1 360 7 is_stmt 0 view .LVU188
 748 0016 0BA8     		add	r0, sp, #44
 749 0018 FFF7FEFF 		bl	HAL_RCC_OscConfig
 750              	.LVL23:
 360:Src/main.c    ****   {
 751              		.loc 1 360 6 view .LVU189
 752 001c 0028     		cmp	r0, #0
 753 001e 29D1     		bne	.L41
 367:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 754              		.loc 1 367 3 is_stmt 1 view .LVU190
 367:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 755              		.loc 1 367 31 is_stmt 0 view .LVU191
 756 0020 0723     		movs	r3, #7
 757 0022 0793     		str	r3, [sp, #28]
 369:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 758              		.loc 1 369 3 is_stmt 1 view .LVU192
 369:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 759              		.loc 1 369 34 is_stmt 0 view .LVU193
 760 0024 043B     		subs	r3, r3, #4
 761 0026 0893     		str	r3, [sp, #32]
 370:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 762              		.loc 1 370 3 is_stmt 1 view .LVU194
 370:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 763              		.loc 1 370 35 is_stmt 0 view .LVU195
 764 0028 0023     		movs	r3, #0
 765 002a 0993     		str	r3, [sp, #36]
 371:Src/main.c    **** 
 766              		.loc 1 371 3 is_stmt 1 view .LVU196
 371:Src/main.c    **** 
 767              		.loc 1 371 36 is_stmt 0 view .LVU197
 768 002c 0A93     		str	r3, [sp, #40]
 373:Src/main.c    ****   {
 769              		.loc 1 373 3 is_stmt 1 view .LVU198
 373:Src/main.c    ****   {
 770              		.loc 1 373 7 is_stmt 0 view .LVU199
 771 002e 0121     		movs	r1, #1
 772 0030 07A8     		add	r0, sp, #28
 773 0032 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 774              	.LVL24:
 373:Src/main.c    ****   {
 775              		.loc 1 373 6 view .LVU200
ARM GAS  /tmp/ccOkcrH8.s 			page 47


 776 0036 0028     		cmp	r0, #0
 777 0038 21D1     		bne	.L42
 378:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 778              		.loc 1 378 3 is_stmt 1 view .LVU201
 378:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 779              		.loc 1 378 38 is_stmt 0 view .LVU202
 780 003a 8023     		movs	r3, #128
 781 003c 9B02     		lsls	r3, r3, #10
 782 003e 0093     		str	r3, [sp]
 379:Src/main.c    **** 
 783              		.loc 1 379 3 is_stmt 1 view .LVU203
 379:Src/main.c    **** 
 784              		.loc 1 379 35 is_stmt 0 view .LVU204
 785 0040 0023     		movs	r3, #0
 786 0042 0693     		str	r3, [sp, #24]
 381:Src/main.c    ****   {
 787              		.loc 1 381 3 is_stmt 1 view .LVU205
 381:Src/main.c    ****   {
 788              		.loc 1 381 7 is_stmt 0 view .LVU206
 789 0044 6846     		mov	r0, sp
 790 0046 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 791              	.LVL25:
 381:Src/main.c    ****   {
 792              		.loc 1 381 6 view .LVU207
 793 004a 0028     		cmp	r0, #0
 794 004c 1CD1     		bne	.L43
 388:Src/main.c    **** 
 795              		.loc 1 388 3 is_stmt 1 view .LVU208
 388:Src/main.c    **** 
 796              		.loc 1 388 22 is_stmt 0 view .LVU209
 797 004e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 798              	.LVL26:
 388:Src/main.c    **** 
 799              		.loc 1 388 3 view .LVU210
 800 0052 FA21     		movs	r1, #250
 801 0054 8900     		lsls	r1, r1, #2
 802 0056 FFF7FEFF 		bl	__aeabi_uidiv
 803              	.LVL27:
 804 005a FFF7FEFF 		bl	HAL_SYSTICK_Config
 805              	.LVL28:
 392:Src/main.c    **** 
 806              		.loc 1 392 3 is_stmt 1 view .LVU211
 807 005e 0420     		movs	r0, #4
 808 0060 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 809              	.LVL29:
 395:Src/main.c    **** }
 810              		.loc 1 395 3 view .LVU212
 811 0064 0120     		movs	r0, #1
 812 0066 0022     		movs	r2, #0
 813 0068 0021     		movs	r1, #0
 814 006a 4042     		rsbs	r0, r0, #0
 815 006c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 816              	.LVL30:
 396:Src/main.c    **** 
 817              		.loc 1 396 1 is_stmt 0 view .LVU213
 818 0070 19B0     		add	sp, sp, #100
 819              		@ sp needed
ARM GAS  /tmp/ccOkcrH8.s 			page 48


 820 0072 00BD     		pop	{pc}
 821              	.L41:
 362:Src/main.c    ****   }
 822              		.loc 1 362 5 is_stmt 1 view .LVU214
 823 0074 B521     		movs	r1, #181
 824 0076 4900     		lsls	r1, r1, #1
 825 0078 0648     		ldr	r0, .L44
 826 007a FFF7FEFF 		bl	_Error_Handler
 827              	.LVL31:
 828              	.L42:
 375:Src/main.c    ****   }
 829              		.loc 1 375 5 view .LVU215
 830 007e 7821     		movs	r1, #120
 831 0080 FF31     		adds	r1, r1, #255
 832 0082 0448     		ldr	r0, .L44
 833 0084 FFF7FEFF 		bl	_Error_Handler
 834              	.LVL32:
 835              	.L43:
 383:Src/main.c    ****   }
 836              		.loc 1 383 5 view .LVU216
 837 0088 8021     		movs	r1, #128
 838 008a FF31     		adds	r1, r1, #255
 839 008c 0148     		ldr	r0, .L44
 840 008e FFF7FEFF 		bl	_Error_Handler
 841              	.LVL33:
 842              	.L45:
 843 0092 C046     		.align	2
 844              	.L44:
 845 0094 00000000 		.word	.LC4
 846              		.cfi_endproc
 847              	.LFE40:
 849              		.section	.text.main,"ax",%progbits
 850              		.align	1
 851              		.global	main
 852              		.syntax unified
 853              		.code	16
 854              		.thumb_func
 855              		.fpu softvfp
 857              	main:
 858              	.LFB39:
 143:Src/main.c    ****   /* USER CODE BEGIN 1 */
 859              		.loc 1 143 1 view -0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 863 0000 10B5     		push	{r4, lr}
 864              	.LCFI11:
 865              		.cfi_def_cfa_offset 8
 866              		.cfi_offset 4, -8
 867              		.cfi_offset 14, -4
 151:Src/main.c    **** 
 868              		.loc 1 151 3 view .LVU218
 869 0002 FFF7FEFF 		bl	HAL_Init
 870              	.LVL34:
 158:Src/main.c    **** 
 871              		.loc 1 158 3 view .LVU219
 872 0006 FFF7FEFF 		bl	SystemClock_Config
ARM GAS  /tmp/ccOkcrH8.s 			page 49


 873              	.LVL35:
 165:Src/main.c    **** 	MX_DAC_Init();
 874              		.loc 1 165 3 view .LVU220
 875 000a FFF7FEFF 		bl	MX_GPIO_Init
 876              	.LVL36:
 166:Src/main.c    **** 
 877              		.loc 1 166 2 view .LVU221
 878 000e FFF7FEFF 		bl	MX_DAC_Init
 879              	.LVL37:
 168:Src/main.c    **** 	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 880              		.loc 1 168 2 view .LVU222
 881 0012 754C     		ldr	r4, .L66
 882 0014 0021     		movs	r1, #0
 883 0016 2000     		movs	r0, r4
 884 0018 FFF7FEFF 		bl	HAL_DAC_Start
 885              	.LVL38:
 169:Src/main.c    **** 
 886              		.loc 1 169 2 view .LVU223
 887 001c 8023     		movs	r3, #128
 888 001e 1B01     		lsls	r3, r3, #4
 889 0020 0022     		movs	r2, #0
 890 0022 0021     		movs	r1, #0
 891 0024 2000     		movs	r0, r4
 892 0026 FFF7FEFF 		bl	HAL_DAC_SetValue
 893              	.LVL39:
 171:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim14);
 894              		.loc 1 171 2 view .LVU224
 895 002a FFF7FEFF 		bl	MX_TIM14_Init
 896              	.LVL40:
 172:Src/main.c    **** 	TIM14->CR1 &= ~(1UL);
 897              		.loc 1 172 2 view .LVU225
 898 002e 6F48     		ldr	r0, .L66+4
 899 0030 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 900              	.LVL41:
 173:Src/main.c    **** 
 901              		.loc 1 173 2 view .LVU226
 173:Src/main.c    **** 
 902              		.loc 1 173 13 is_stmt 0 view .LVU227
 903 0034 6E4A     		ldr	r2, .L66+8
 904 0036 1368     		ldr	r3, [r2]
 905 0038 0124     		movs	r4, #1
 906 003a A343     		bics	r3, r4
 907 003c 1360     		str	r3, [r2]
 175:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim15);
 908              		.loc 1 175 2 is_stmt 1 view .LVU228
 909 003e FFF7FEFF 		bl	MX_TIM15_Init
 910              	.LVL42:
 176:Src/main.c    **** 	TIM15->CR1 &= ~(1UL);
 911              		.loc 1 176 2 view .LVU229
 912 0042 6C48     		ldr	r0, .L66+12
 913 0044 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 914              	.LVL43:
 177:Src/main.c    **** 
 915              		.loc 1 177 2 view .LVU230
 177:Src/main.c    **** 
 916              		.loc 1 177 13 is_stmt 0 view .LVU231
 917 0048 6B4A     		ldr	r2, .L66+16
ARM GAS  /tmp/ccOkcrH8.s 			page 50


 918 004a 1368     		ldr	r3, [r2]
 919 004c A343     		bics	r3, r4
 920 004e 1360     		str	r3, [r2]
 179:Src/main.c    **** 
 921              		.loc 1 179 2 is_stmt 1 view .LVU232
 922 0050 FFF7FEFF 		bl	USER_TIM2_Init
 923              	.LVL44:
 181:Src/main.c    **** 	HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 924              		.loc 1 181 2 view .LVU233
 925 0054 694C     		ldr	r4, .L66+20
 926 0056 2000     		movs	r0, r4
 927 0058 FFF7FEFF 		bl	HAL_TIM_Base_Start
 928              	.LVL45:
 182:Src/main.c    **** 
 929              		.loc 1 182 2 view .LVU234
 930 005c 0421     		movs	r1, #4
 931 005e 2000     		movs	r0, r4
 932 0060 FFF7FEFF 		bl	HAL_TIM_OnePulse_Start
 933              	.LVL46:
 188:Src/main.c    **** #endif
 934              		.loc 1 188 3 view .LVU235
 935 0064 FFF7FEFF 		bl	MX_USB_DEVICE_Init
 936              	.LVL47:
 937 0068 6EE0     		b	.L56
 938              	.L64:
 225:Src/main.c    ****       }
 939              		.loc 1 225 9 view .LVU236
 940 006a FFF7FEFF 		bl	dfu_otter_bootloader
 941              	.LVL48:
 942              	.L49:
 943              	.LBB28:
 254:Src/main.c    **** 	          curTone1 = freqs[i];
 944              		.loc 1 254 13 view .LVU237
 254:Src/main.c    **** 	          curTone1 = freqs[i];
 945              		.loc 1 254 26 is_stmt 0 view .LVU238
 946 006e 6449     		ldr	r1, .L66+24
 947 0070 0988     		ldrh	r1, [r1]
 254:Src/main.c    **** 	          curTone1 = freqs[i];
 948              		.loc 1 254 15 view .LVU239
 949 0072 8A42     		cmp	r2, r1
 950 0074 01D9     		bls	.L50
 255:Src/main.c    **** 	      }
 951              		.loc 1 255 12 is_stmt 1 view .LVU240
 255:Src/main.c    **** 	      }
 952              		.loc 1 255 21 is_stmt 0 view .LVU241
 953 0076 6249     		ldr	r1, .L66+24
 954 0078 0A80     		strh	r2, [r1]
 955              	.L50:
 249:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 956              		.loc 1 249 29 discriminator 2 view .LVU242
 957 007a 0133     		adds	r3, r3, #1
 958              	.LVL49:
 959              	.L48:
 249:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 960              		.loc 1 249 4 discriminator 1 view .LVU243
 961 007c 0F2B     		cmp	r3, #15
 962 007e 0BDC     		bgt	.L60
ARM GAS  /tmp/ccOkcrH8.s 			page 51


 250:Src/main.c    **** 	          curTone1 = curTone0;
 963              		.loc 1 250 8 is_stmt 1 view .LVU244
 250:Src/main.c    **** 	          curTone1 = curTone0;
 964              		.loc 1 250 17 is_stmt 0 view .LVU245
 965 0080 5A00     		lsls	r2, r3, #1
 966 0082 6049     		ldr	r1, .L66+28
 967 0084 525A     		ldrh	r2, [r2, r1]
 250:Src/main.c    **** 	          curTone1 = curTone0;
 968              		.loc 1 250 21 view .LVU246
 969 0086 6049     		ldr	r1, .L66+32
 970 0088 0988     		ldrh	r1, [r1]
 250:Src/main.c    **** 	          curTone1 = curTone0;
 971              		.loc 1 250 10 view .LVU247
 972 008a 8A42     		cmp	r2, r1
 973 008c EFD9     		bls	.L49
 251:Src/main.c    **** 	          curTone0 = freqs[i];
 974              		.loc 1 251 12 is_stmt 1 view .LVU248
 251:Src/main.c    **** 	          curTone0 = freqs[i];
 975              		.loc 1 251 21 is_stmt 0 view .LVU249
 976 008e 5C48     		ldr	r0, .L66+24
 977 0090 0180     		strh	r1, [r0]
 252:Src/main.c    **** 	      }
 978              		.loc 1 252 12 is_stmt 1 view .LVU250
 252:Src/main.c    **** 	      }
 979              		.loc 1 252 21 is_stmt 0 view .LVU251
 980 0092 5D49     		ldr	r1, .L66+32
 981 0094 0A80     		strh	r2, [r1]
 982 0096 F0E7     		b	.L50
 983              	.L60:
 984              	.LBE28:
 259:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 985              		.loc 1 259 3 is_stmt 1 view .LVU252
 259:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 986              		.loc 1 259 16 is_stmt 0 view .LVU253
 987 0098 5B4B     		ldr	r3, .L66+32
 988              	.LVL50:
 259:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 989              		.loc 1 259 16 view .LVU254
 990 009a 1988     		ldrh	r1, [r3]
 259:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 991              		.loc 1 259 6 view .LVU255
 992 009c 1429     		cmp	r1, #20
 993 009e 03D9     		bls	.L52
 259:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 994              		.loc 1 259 33 discriminator 1 view .LVU256
 995 00a0 5A4B     		ldr	r3, .L66+36
 996 00a2 1B88     		ldrh	r3, [r3]
 259:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 997              		.loc 1 259 21 discriminator 1 view .LVU257
 998 00a4 9942     		cmp	r1, r3
 999 00a6 14D1     		bne	.L61
 1000              	.L52:
 268:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1001              		.loc 1 268 10 is_stmt 1 view .LVU258
 268:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1002              		.loc 1 268 13 is_stmt 0 view .LVU259
 1003 00a8 1329     		cmp	r1, #19
ARM GAS  /tmp/ccOkcrH8.s 			page 52


 1004 00aa 2ED8     		bhi	.L53
 268:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1005              		.loc 1 268 40 discriminator 1 view .LVU260
 1006 00ac 574B     		ldr	r3, .L66+36
 1007 00ae 1B88     		ldrh	r3, [r3]
 268:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1008              		.loc 1 268 28 discriminator 1 view .LVU261
 1009 00b0 9942     		cmp	r1, r3
 1010 00b2 2AD0     		beq	.L53
 269:Src/main.c    ****       curPeriode0 = 0;
 1011              		.loc 1 269 4 is_stmt 1 view .LVU262
 269:Src/main.c    ****       curPeriode0 = 0;
 1012              		.loc 1 269 15 is_stmt 0 view .LVU263
 1013 00b4 4E4A     		ldr	r2, .L66+8
 1014 00b6 1368     		ldr	r3, [r2]
 1015 00b8 0121     		movs	r1, #1
 1016 00ba 8B43     		bics	r3, r1
 1017 00bc 1360     		str	r3, [r2]
 270:Src/main.c    **** 
 1018              		.loc 1 270 7 is_stmt 1 view .LVU264
 270:Src/main.c    **** 
 1019              		.loc 1 270 19 is_stmt 0 view .LVU265
 1020 00be 544B     		ldr	r3, .L66+40
 1021 00c0 0022     		movs	r2, #0
 1022 00c2 1A60     		str	r2, [r3]
 272:Src/main.c    **** 		}
 1023              		.loc 1 272 4 is_stmt 1 view .LVU266
 1024 00c4 7F31     		adds	r1, r1, #127
 1025 00c6 9020     		movs	r0, #144
 1026 00c8 C900     		lsls	r1, r1, #3
 1027 00ca C005     		lsls	r0, r0, #23
 1028 00cc FFF7FEFF 		bl	HAL_GPIO_WritePin
 1029              	.LVL51:
 1030 00d0 1BE0     		b	.L53
 1031              	.L61:
 260:Src/main.c    **** 			TIM14->CNT = 0;
 1032              		.loc 1 260 4 view .LVU267
 260:Src/main.c    **** 			TIM14->CNT = 0;
 1033              		.loc 1 260 36 is_stmt 0 view .LVU268
 1034 00d2 5048     		ldr	r0, .L66+44
 1035 00d4 FFF7FEFF 		bl	__aeabi_uidiv
 1036              	.LVL52:
 260:Src/main.c    **** 			TIM14->CNT = 0;
 1037              		.loc 1 260 16 view .LVU269
 1038 00d8 4D4B     		ldr	r3, .L66+40
 1039 00da 1860     		str	r0, [r3]
 261:Src/main.c    **** 			TIM14->ARR = curPeriode0;
 1040              		.loc 1 261 4 is_stmt 1 view .LVU270
 261:Src/main.c    **** 			TIM14->ARR = curPeriode0;
 1041              		.loc 1 261 15 is_stmt 0 view .LVU271
 1042 00dc 444B     		ldr	r3, .L66+8
 1043 00de 0022     		movs	r2, #0
 1044 00e0 5A62     		str	r2, [r3, #36]
 262:Src/main.c    **** 			TIM14->CR1 = TIM14->CR1 | 1;
 1045              		.loc 1 262 4 is_stmt 1 view .LVU272
 262:Src/main.c    **** 			TIM14->CR1 = TIM14->CR1 | 1;
 1046              		.loc 1 262 15 is_stmt 0 view .LVU273
ARM GAS  /tmp/ccOkcrH8.s 			page 53


 1047 00e2 D862     		str	r0, [r3, #44]
 263:Src/main.c    **** 			lastTone0 = curTone0;
 1048              		.loc 1 263 4 is_stmt 1 view .LVU274
 263:Src/main.c    **** 			lastTone0 = curTone0;
 1049              		.loc 1 263 22 is_stmt 0 view .LVU275
 1050 00e4 1A68     		ldr	r2, [r3]
 263:Src/main.c    **** 			lastTone0 = curTone0;
 1051              		.loc 1 263 28 view .LVU276
 1052 00e6 0121     		movs	r1, #1
 1053 00e8 0A43     		orrs	r2, r1
 263:Src/main.c    **** 			lastTone0 = curTone0;
 1054              		.loc 1 263 15 view .LVU277
 1055 00ea 1A60     		str	r2, [r3]
 264:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 1056              		.loc 1 264 4 is_stmt 1 view .LVU278
 264:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 1057              		.loc 1 264 14 is_stmt 0 view .LVU279
 1058 00ec 464B     		ldr	r3, .L66+32
 1059 00ee 1A88     		ldrh	r2, [r3]
 1060 00f0 464B     		ldr	r3, .L66+36
 1061 00f2 1A80     		strh	r2, [r3]
 265:Src/main.c    **** 
 1062              		.loc 1 265 4 is_stmt 1 view .LVU280
 265:Src/main.c    **** 
 1063              		.loc 1 265 18 is_stmt 0 view .LVU281
 1064 00f4 FFF7FEFF 		bl	HAL_GetTick
 1065              	.LVL53:
 265:Src/main.c    **** 
 1066              		.loc 1 265 16 view .LVU282
 1067 00f8 474B     		ldr	r3, .L66+48
 1068 00fa 1860     		str	r0, [r3]
 267:Src/main.c    **** 		} else if (curTone0 < 20 && curTone0 != lastTone0) {
 1069              		.loc 1 267 4 is_stmt 1 view .LVU283
 1070 00fc 8021     		movs	r1, #128
 1071 00fe 9020     		movs	r0, #144
 1072 0100 0122     		movs	r2, #1
 1073 0102 C900     		lsls	r1, r1, #3
 1074 0104 C005     		lsls	r0, r0, #23
 1075 0106 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1076              	.LVL54:
 1077              	.L53:
 275:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 1078              		.loc 1 275 3 view .LVU284
 275:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 1079              		.loc 1 275 16 is_stmt 0 view .LVU285
 1080 010a 3D4B     		ldr	r3, .L66+24
 1081 010c 1988     		ldrh	r1, [r3]
 275:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 1082              		.loc 1 275 6 view .LVU286
 1083 010e 1429     		cmp	r1, #20
 1084 0110 03D9     		bls	.L54
 275:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 1085              		.loc 1 275 33 discriminator 1 view .LVU287
 1086 0112 424B     		ldr	r3, .L66+52
 1087 0114 1B88     		ldrh	r3, [r3]
 275:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 1088              		.loc 1 275 21 discriminator 1 view .LVU288
ARM GAS  /tmp/ccOkcrH8.s 			page 54


 1089 0116 9942     		cmp	r1, r3
 1090 0118 36D1     		bne	.L62
 1091              	.L54:
 282:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 1092              		.loc 1 282 10 is_stmt 1 view .LVU289
 282:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 1093              		.loc 1 282 13 is_stmt 0 view .LVU290
 1094 011a 1329     		cmp	r1, #19
 1095 011c 0BD8     		bhi	.L55
 282:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 1096              		.loc 1 282 40 discriminator 1 view .LVU291
 1097 011e 3F4B     		ldr	r3, .L66+52
 1098 0120 1B88     		ldrh	r3, [r3]
 282:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 1099              		.loc 1 282 28 discriminator 1 view .LVU292
 1100 0122 9942     		cmp	r1, r3
 1101 0124 07D0     		beq	.L55
 283:Src/main.c    ****       curPeriode1 = 0;
 1102              		.loc 1 283 4 is_stmt 1 view .LVU293
 283:Src/main.c    ****       curPeriode1 = 0;
 1103              		.loc 1 283 15 is_stmt 0 view .LVU294
 1104 0126 344A     		ldr	r2, .L66+16
 1105 0128 1368     		ldr	r3, [r2]
 1106 012a 0121     		movs	r1, #1
 1107 012c 8B43     		bics	r3, r1
 1108 012e 1360     		str	r3, [r2]
 284:Src/main.c    **** 		}
 1109              		.loc 1 284 7 is_stmt 1 view .LVU295
 284:Src/main.c    **** 		}
 1110              		.loc 1 284 19 is_stmt 0 view .LVU296
 1111 0130 3B4B     		ldr	r3, .L66+56
 1112 0132 0022     		movs	r2, #0
 1113 0134 1A60     		str	r2, [r3]
 1114              	.L55:
 287:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1115              		.loc 1 287 3 is_stmt 1 view .LVU297
 287:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1116              		.loc 1 287 8 is_stmt 0 view .LVU298
 1117 0136 FFF7FEFF 		bl	HAL_GetTick
 1118              	.LVL55:
 287:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1119              		.loc 1 287 22 view .LVU299
 1120 013a 374B     		ldr	r3, .L66+48
 1121 013c 1B68     		ldr	r3, [r3]
 1122 013e C01A     		subs	r0, r0, r3
 287:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1123              		.loc 1 287 6 view .LVU300
 1124 0140 FA23     		movs	r3, #250
 1125 0142 9B00     		lsls	r3, r3, #2
 1126 0144 9842     		cmp	r0, r3
 1127 0146 35D8     		bhi	.L63
 1128              	.L56:
 215:Src/main.c    ****   {
 1129              		.loc 1 215 3 is_stmt 1 view .LVU301
 219:Src/main.c    ****       sprintf(&str[0], "Otter!\n\r");
 1130              		.loc 1 219 7 view .LVU302
 1131 0148 364C     		ldr	r4, .L66+60
ARM GAS  /tmp/ccOkcrH8.s 			page 55


 1132 014a 2822     		movs	r2, #40
 1133 014c 2021     		movs	r1, #32
 1134 014e 2000     		movs	r0, r4
 1135 0150 FFF7FEFF 		bl	memset
 1136              	.LVL56:
 220:Src/main.c    ****       CDC_Transmit_FS((unsigned char*)str, sizeof(str));
 1137              		.loc 1 220 7 view .LVU303
 1138 0154 0922     		movs	r2, #9
 1139 0156 3449     		ldr	r1, .L66+64
 1140 0158 2000     		movs	r0, r4
 1141 015a FFF7FEFF 		bl	memcpy
 1142              	.LVL57:
 221:Src/main.c    ****       HAL_Delay(200);
 1143              		.loc 1 221 7 view .LVU304
 1144 015e 2821     		movs	r1, #40
 1145 0160 2000     		movs	r0, r4
 1146 0162 FFF7FEFF 		bl	CDC_Transmit_FS
 1147              	.LVL58:
 222:Src/main.c    **** 
 1148              		.loc 1 222 7 view .LVU305
 1149 0166 C820     		movs	r0, #200
 1150 0168 FFF7FEFF 		bl	HAL_Delay
 1151              	.LVL59:
 224:Src/main.c    ****         dfu_otter_bootloader();
 1152              		.loc 1 224 7 view .LVU306
 224:Src/main.c    ****         dfu_otter_bootloader();
 1153              		.loc 1 224 11 is_stmt 0 view .LVU307
 1154 016c 9020     		movs	r0, #144
 1155 016e 8021     		movs	r1, #128
 1156 0170 C005     		lsls	r0, r0, #23
 1157 0172 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1158              	.LVL60:
 224:Src/main.c    ****         dfu_otter_bootloader();
 1159              		.loc 1 224 10 view .LVU308
 1160 0176 0028     		cmp	r0, #0
 1161 0178 00D0     		beq	.LCB905
 1162 017a 76E7     		b	.L64	@long jump
 1163              	.LCB905:
 246:Src/main.c    **** 		curTone1 = 0;
 1164              		.loc 1 246 3 is_stmt 1 view .LVU309
 246:Src/main.c    **** 		curTone1 = 0;
 1165              		.loc 1 246 12 is_stmt 0 view .LVU310
 1166 017c 0023     		movs	r3, #0
 1167 017e 224A     		ldr	r2, .L66+32
 1168 0180 1380     		strh	r3, [r2]
 247:Src/main.c    **** 
 1169              		.loc 1 247 3 is_stmt 1 view .LVU311
 247:Src/main.c    **** 
 1170              		.loc 1 247 12 is_stmt 0 view .LVU312
 1171 0182 1F4A     		ldr	r2, .L66+24
 1172 0184 1380     		strh	r3, [r2]
 249:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 1173              		.loc 1 249 4 is_stmt 1 view .LVU313
 1174              	.LBB29:
 249:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 1175              		.loc 1 249 9 view .LVU314
 1176              	.LVL61:
ARM GAS  /tmp/ccOkcrH8.s 			page 56


 249:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 1177              		.loc 1 249 4 is_stmt 0 view .LVU315
 1178 0186 79E7     		b	.L48
 1179              	.LVL62:
 1180              	.L62:
 249:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 1181              		.loc 1 249 4 view .LVU316
 1182              	.LBE29:
 276:Src/main.c    **** 			TIM15->CNT = 0;
 1183              		.loc 1 276 4 is_stmt 1 view .LVU317
 276:Src/main.c    **** 			TIM15->CNT = 0;
 1184              		.loc 1 276 36 is_stmt 0 view .LVU318
 1185 0188 2248     		ldr	r0, .L66+44
 1186 018a FFF7FEFF 		bl	__aeabi_uidiv
 1187              	.LVL63:
 276:Src/main.c    **** 			TIM15->CNT = 0;
 1188              		.loc 1 276 16 view .LVU319
 1189 018e 244B     		ldr	r3, .L66+56
 1190 0190 1860     		str	r0, [r3]
 277:Src/main.c    **** 			TIM15->ARR = curPeriode1;
 1191              		.loc 1 277 4 is_stmt 1 view .LVU320
 277:Src/main.c    **** 			TIM15->ARR = curPeriode1;
 1192              		.loc 1 277 15 is_stmt 0 view .LVU321
 1193 0192 194B     		ldr	r3, .L66+16
 1194 0194 0022     		movs	r2, #0
 1195 0196 5A62     		str	r2, [r3, #36]
 278:Src/main.c    **** 			TIM15->CR1 = TIM15->CR1 | 1;
 1196              		.loc 1 278 4 is_stmt 1 view .LVU322
 278:Src/main.c    **** 			TIM15->CR1 = TIM15->CR1 | 1;
 1197              		.loc 1 278 15 is_stmt 0 view .LVU323
 1198 0198 D862     		str	r0, [r3, #44]
 279:Src/main.c    **** 			lastTone1 = curTone1;
 1199              		.loc 1 279 4 is_stmt 1 view .LVU324
 279:Src/main.c    **** 			lastTone1 = curTone1;
 1200              		.loc 1 279 22 is_stmt 0 view .LVU325
 1201 019a 1A68     		ldr	r2, [r3]
 279:Src/main.c    **** 			lastTone1 = curTone1;
 1202              		.loc 1 279 28 view .LVU326
 1203 019c 0121     		movs	r1, #1
 1204 019e 0A43     		orrs	r2, r1
 279:Src/main.c    **** 			lastTone1 = curTone1;
 1205              		.loc 1 279 15 view .LVU327
 1206 01a0 1A60     		str	r2, [r3]
 280:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 1207              		.loc 1 280 4 is_stmt 1 view .LVU328
 280:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 1208              		.loc 1 280 14 is_stmt 0 view .LVU329
 1209 01a2 174B     		ldr	r3, .L66+24
 1210 01a4 1A88     		ldrh	r2, [r3]
 1211 01a6 1D4B     		ldr	r3, .L66+52
 1212 01a8 1A80     		strh	r2, [r3]
 281:Src/main.c    **** 		} else if (curTone1 < 20 && curTone1 != lastTone1) {
 1213              		.loc 1 281 4 is_stmt 1 view .LVU330
 281:Src/main.c    **** 		} else if (curTone1 < 20 && curTone1 != lastTone1) {
 1214              		.loc 1 281 18 is_stmt 0 view .LVU331
 1215 01aa FFF7FEFF 		bl	HAL_GetTick
 1216              	.LVL64:
ARM GAS  /tmp/ccOkcrH8.s 			page 57


 281:Src/main.c    **** 		} else if (curTone1 < 20 && curTone1 != lastTone1) {
 1217              		.loc 1 281 16 view .LVU332
 1218 01ae 1A4B     		ldr	r3, .L66+48
 1219 01b0 1860     		str	r0, [r3]
 1220 01b2 C0E7     		b	.L55
 1221              	.L63:
 288:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 1222              		.loc 1 288 4 is_stmt 1 view .LVU333
 288:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 1223              		.loc 1 288 15 is_stmt 0 view .LVU334
 1224 01b4 0E4A     		ldr	r2, .L66+8
 1225 01b6 1368     		ldr	r3, [r2]
 1226 01b8 0121     		movs	r1, #1
 1227 01ba 8B43     		bics	r3, r1
 1228 01bc 1360     		str	r3, [r2]
 289:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 1229              		.loc 1 289 4 is_stmt 1 view .LVU335
 289:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 1230              		.loc 1 289 15 is_stmt 0 view .LVU336
 1231 01be 0E4A     		ldr	r2, .L66+16
 1232 01c0 1368     		ldr	r3, [r2]
 1233 01c2 8B43     		bics	r3, r1
 1234 01c4 1360     		str	r3, [r2]
 290:Src/main.c    **** 				freqs[i] = 0;
 1235              		.loc 1 290 4 is_stmt 1 view .LVU337
 1236              	.LBB30:
 290:Src/main.c    **** 				freqs[i] = 0;
 1237              		.loc 1 290 9 view .LVU338
 1238              	.LVL65:
 290:Src/main.c    **** 				freqs[i] = 0;
 1239              		.loc 1 290 13 is_stmt 0 view .LVU339
 1240 01c6 0023     		movs	r3, #0
 1241              	.LVL66:
 1242              	.L57:
 290:Src/main.c    **** 				freqs[i] = 0;
 1243              		.loc 1 290 4 discriminator 1 view .LVU340
 1244 01c8 0F2B     		cmp	r3, #15
 1245 01ca 05DC     		bgt	.L65
 291:Src/main.c    **** 			}
 1246              		.loc 1 291 5 is_stmt 1 discriminator 3 view .LVU341
 291:Src/main.c    **** 			}
 1247              		.loc 1 291 14 is_stmt 0 discriminator 3 view .LVU342
 1248 01cc 5900     		lsls	r1, r3, #1
 1249 01ce 0D4A     		ldr	r2, .L66+28
 1250 01d0 0020     		movs	r0, #0
 1251 01d2 8852     		strh	r0, [r1, r2]
 290:Src/main.c    **** 				freqs[i] = 0;
 1252              		.loc 1 290 29 discriminator 3 view .LVU343
 1253 01d4 0133     		adds	r3, r3, #1
 1254              	.LVL67:
 290:Src/main.c    **** 				freqs[i] = 0;
 1255              		.loc 1 290 29 discriminator 3 view .LVU344
 1256 01d6 F7E7     		b	.L57
 1257              	.L65:
 290:Src/main.c    **** 				freqs[i] = 0;
 1258              		.loc 1 290 29 discriminator 3 view .LVU345
 1259              	.LBE30:
ARM GAS  /tmp/ccOkcrH8.s 			page 58


 294:Src/main.c    **** 		}
 1260              		.loc 1 294 4 is_stmt 1 view .LVU346
 1261 01d8 8021     		movs	r1, #128
 1262 01da 9020     		movs	r0, #144
 1263 01dc 0022     		movs	r2, #0
 1264 01de C900     		lsls	r1, r1, #3
 1265 01e0 C005     		lsls	r0, r0, #23
 1266 01e2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1267              	.LVL68:
 294:Src/main.c    **** 		}
 1268              		.loc 1 294 4 is_stmt 0 view .LVU347
 1269 01e6 AFE7     		b	.L56
 1270              	.L67:
 1271              		.align	2
 1272              	.L66:
 1273 01e8 00000000 		.word	hdac
 1274 01ec 00000000 		.word	htim14
 1275 01f0 00200040 		.word	1073750016
 1276 01f4 00000000 		.word	htim15
 1277 01f8 00400140 		.word	1073823744
 1278 01fc 00000000 		.word	htim2
 1279 0200 00000000 		.word	.LANCHOR3
 1280 0204 00000000 		.word	.LANCHOR4
 1281 0208 00000000 		.word	.LANCHOR2
 1282 020c 00000000 		.word	.LANCHOR5
 1283 0210 00000000 		.word	.LANCHOR0
 1284 0214 40420F00 		.word	1000000
 1285 0218 00000000 		.word	.LANCHOR6
 1286 021c 00000000 		.word	.LANCHOR7
 1287 0220 00000000 		.word	.LANCHOR1
 1288 0224 00000000 		.word	str
 1289 0228 00000000 		.word	.LC16
 1290              		.cfi_endproc
 1291              	.LFE39:
 1293              		.comm	str,40,4
 1294              		.global	freqs
 1295              		.global	noteTimeout
 1296              		.global	lastTone1
 1297              		.global	lastTone0
 1298              		.global	curChannel
 1299              		.global	curTone1
 1300              		.global	curTone0
 1301              		.global	midiState
 1302              		.comm	midiBuffer,4,4
 1303              		.global	curPeriode1
 1304              		.global	curPeriode0
 1305              		.comm	uart_tx_dat,1,1
 1306              		.comm	hdac,20,4
 1307              		.comm	htim2,64,4
 1308              		.comm	htim15,64,4
 1309              		.comm	htim14,64,4
 1310              		.section	.bss.curChannel,"aw",%nobits
 1311              		.align	1
 1314              	curChannel:
 1315 0000 0000     		.space	2
 1316              		.section	.bss.curPeriode0,"aw",%nobits
 1317              		.align	2
ARM GAS  /tmp/ccOkcrH8.s 			page 59


 1318              		.set	.LANCHOR0,. + 0
 1321              	curPeriode0:
 1322 0000 00000000 		.space	4
 1323              		.section	.bss.curPeriode1,"aw",%nobits
 1324              		.align	2
 1325              		.set	.LANCHOR1,. + 0
 1328              	curPeriode1:
 1329 0000 00000000 		.space	4
 1330              		.section	.bss.curTone0,"aw",%nobits
 1331              		.align	1
 1332              		.set	.LANCHOR2,. + 0
 1335              	curTone0:
 1336 0000 0000     		.space	2
 1337              		.section	.bss.curTone1,"aw",%nobits
 1338              		.align	1
 1339              		.set	.LANCHOR3,. + 0
 1342              	curTone1:
 1343 0000 0000     		.space	2
 1344              		.section	.bss.freqs,"aw",%nobits
 1345              		.align	2
 1346              		.set	.LANCHOR4,. + 0
 1349              	freqs:
 1350 0000 00000000 		.space	32
 1350      00000000 
 1350      00000000 
 1350      00000000 
 1350      00000000 
 1351              		.section	.bss.lastTone0,"aw",%nobits
 1352              		.align	1
 1353              		.set	.LANCHOR5,. + 0
 1356              	lastTone0:
 1357 0000 0000     		.space	2
 1358              		.section	.bss.lastTone1,"aw",%nobits
 1359              		.align	1
 1360              		.set	.LANCHOR7,. + 0
 1363              	lastTone1:
 1364 0000 0000     		.space	2
 1365              		.section	.bss.midiState,"aw",%nobits
 1368              	midiState:
 1369 0000 00       		.space	1
 1370              		.section	.bss.noteTimeout,"aw",%nobits
 1371              		.align	2
 1372              		.set	.LANCHOR6,. + 0
 1375              	noteTimeout:
 1376 0000 00000000 		.space	4
 1377              		.section	.rodata.MX_DAC_Init.str1.4,"aMS",%progbits,1
 1378              		.align	2
 1379              	.LC4:
 1380 0000 5372632F 		.ascii	"Src/main.c\000"
 1380      6D61696E 
 1380      2E6300
 1381              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1382              		.align	2
 1383              	.LC16:
 1384 0000 4F747465 		.ascii	"Otter!\012\015\000"
 1384      72210A0D 
 1384      00
ARM GAS  /tmp/ccOkcrH8.s 			page 60


 1385              		.text
 1386              	.Letext0:
 1387              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1388              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1389              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 1390              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1391              		.file 8 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 1392              		.file 9 "/usr/arm-none-eabi/include/sys/lock.h"
 1393              		.file 10 "/usr/arm-none-eabi/include/sys/_types.h"
 1394              		.file 11 "/usr/lib/gcc/arm-none-eabi/8.3.0/include/stddef.h"
 1395              		.file 12 "/usr/arm-none-eabi/include/sys/reent.h"
 1396              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1397              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1398              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 1399              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1400              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1401              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dac.h"
 1402              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 1403              		.file 20 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 1404              		.file 21 "/usr/arm-none-eabi/include/stdlib.h"
 1405              		.file 22 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 1406              		.file 23 "Inc/usb_device.h"
 1407              		.file 24 "Middlewares/USBMIDI/Inc/usbd_midi.h"
 1408              		.file 25 "Inc/usbd_desc.h"
 1409              		.file 26 "Inc/usbd_midi_if.h"
 1410              		.file 27 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 1411              		.file 28 "Inc/usbd_cdc_if.h"
 1412              		.file 29 "/usr/arm-none-eabi/include/math.h"
 1413              		.file 30 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 1414              		.file 31 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1415              		.file 32 "/usr/arm-none-eabi/include/string.h"
 1416              		.file 33 "<built-in>"
ARM GAS  /tmp/ccOkcrH8.s 			page 61


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccOkcrH8.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccOkcrH8.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccOkcrH8.s:125    .text.MX_GPIO_Init:0000000000000068 $d
     /tmp/ccOkcrH8.s:130    .text.USER_TIM2_Init:0000000000000000 $t
     /tmp/ccOkcrH8.s:136    .text.USER_TIM2_Init:0000000000000000 USER_TIM2_Init
     /tmp/ccOkcrH8.s:245    .text.USER_TIM2_Init:000000000000006c $d
                            *COM*:0000000000000040 htim2
     /tmp/ccOkcrH8.s:251    .text.dfu_otter_bootloader:0000000000000000 $t
     /tmp/ccOkcrH8.s:258    .text.dfu_otter_bootloader:0000000000000000 dfu_otter_bootloader
     /tmp/ccOkcrH8.s:329    .text.dfu_otter_bootloader:0000000000000018 $d
     /tmp/ccOkcrH8.s:342    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccOkcrH8.s:349    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccOkcrH8.s:449    .text.HAL_TIM_PeriodElapsedCallback:0000000000000060 $d
     /tmp/ccOkcrH8.s:457    .text._Error_Handler:0000000000000000 $t
     /tmp/ccOkcrH8.s:464    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccOkcrH8.s:481    .text.MX_DAC_Init:0000000000000000 $t
     /tmp/ccOkcrH8.s:487    .text.MX_DAC_Init:0000000000000000 MX_DAC_Init
     /tmp/ccOkcrH8.s:551    .text.MX_DAC_Init:0000000000000040 $d
                            *COM*:0000000000000014 hdac
     /tmp/ccOkcrH8.s:558    .text.MX_TIM14_Init:0000000000000000 $t
     /tmp/ccOkcrH8.s:564    .text.MX_TIM14_Init:0000000000000000 MX_TIM14_Init
     /tmp/ccOkcrH8.s:624    .text.MX_TIM14_Init:0000000000000034 $d
                            *COM*:0000000000000040 htim14
     /tmp/ccOkcrH8.s:631    .text.MX_TIM15_Init:0000000000000000 $t
     /tmp/ccOkcrH8.s:637    .text.MX_TIM15_Init:0000000000000000 MX_TIM15_Init
     /tmp/ccOkcrH8.s:697    .text.MX_TIM15_Init:0000000000000034 $d
                            *COM*:0000000000000040 htim15
     /tmp/ccOkcrH8.s:704    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccOkcrH8.s:711    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccOkcrH8.s:845    .text.SystemClock_Config:0000000000000094 $d
     /tmp/ccOkcrH8.s:850    .text.main:0000000000000000 $t
     /tmp/ccOkcrH8.s:857    .text.main:0000000000000000 main
     /tmp/ccOkcrH8.s:1273   .text.main:00000000000001e8 $d
                            *COM*:0000000000000028 str
     /tmp/ccOkcrH8.s:1349   .bss.freqs:0000000000000000 freqs
     /tmp/ccOkcrH8.s:1375   .bss.noteTimeout:0000000000000000 noteTimeout
     /tmp/ccOkcrH8.s:1363   .bss.lastTone1:0000000000000000 lastTone1
     /tmp/ccOkcrH8.s:1356   .bss.lastTone0:0000000000000000 lastTone0
     /tmp/ccOkcrH8.s:1314   .bss.curChannel:0000000000000000 curChannel
     /tmp/ccOkcrH8.s:1342   .bss.curTone1:0000000000000000 curTone1
     /tmp/ccOkcrH8.s:1335   .bss.curTone0:0000000000000000 curTone0
     /tmp/ccOkcrH8.s:1368   .bss.midiState:0000000000000000 midiState
                            *COM*:0000000000000004 midiBuffer
     /tmp/ccOkcrH8.s:1328   .bss.curPeriode1:0000000000000000 curPeriode1
     /tmp/ccOkcrH8.s:1321   .bss.curPeriode0:0000000000000000 curPeriode0
                            *COM*:0000000000000001 uart_tx_dat
     /tmp/ccOkcrH8.s:1311   .bss.curChannel:0000000000000000 $d
     /tmp/ccOkcrH8.s:1317   .bss.curPeriode0:0000000000000000 $d
     /tmp/ccOkcrH8.s:1324   .bss.curPeriode1:0000000000000000 $d
     /tmp/ccOkcrH8.s:1331   .bss.curTone0:0000000000000000 $d
     /tmp/ccOkcrH8.s:1338   .bss.curTone1:0000000000000000 $d
     /tmp/ccOkcrH8.s:1345   .bss.freqs:0000000000000000 $d
     /tmp/ccOkcrH8.s:1352   .bss.lastTone0:0000000000000000 $d
     /tmp/ccOkcrH8.s:1359   .bss.lastTone1:0000000000000000 $d
     /tmp/ccOkcrH8.s:1369   .bss.midiState:0000000000000000 $d
ARM GAS  /tmp/ccOkcrH8.s 			page 62


     /tmp/ccOkcrH8.s:1371   .bss.noteTimeout:0000000000000000 $d
     /tmp/ccOkcrH8.s:1378   .rodata.MX_DAC_Init.str1.4:0000000000000000 $d
     /tmp/ccOkcrH8.s:1382   .rodata.main.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_OnePulse_Init
HAL_TIM_MspPostInit
__aeabi_uidiv
HAL_DAC_Init
HAL_DAC_ConfigChannel
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
HAL_DAC_Start
HAL_DAC_SetValue
HAL_TIM_Base_Start_IT
HAL_TIM_Base_Start
HAL_TIM_OnePulse_Start
MX_USB_DEVICE_Init
HAL_GetTick
memset
memcpy
CDC_Transmit_FS
HAL_Delay
HAL_GPIO_ReadPin
