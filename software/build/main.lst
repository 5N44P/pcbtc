ARM GAS  /tmp/ccF7TYrA.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv6s-m
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB48:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2018 STMicroelectronics International N.V.
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice,
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under
  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under
  32:Src/main.c    ****   *    this license.
  33:Src/main.c    ****   *
ARM GAS  /tmp/ccF7TYrA.s 			page 2


  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS"
  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f0xx_hal.h"
  52:Src/main.c    **** #include "usb_device.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN Includes */
  55:Src/main.c    **** #include "device_conf.h"
  56:Src/main.c    **** #include "curemisc.h"
  57:Src/main.c    **** #include "curebuffer.h"
  58:Src/main.c    **** #include "usbd_midi_if.h"
  59:Src/main.c    **** #include "usbd_cdc_if.h"
  60:Src/main.c    **** #include "math.h"
  61:Src/main.c    **** 
  62:Src/main.c    **** //#define USE_CDC
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END Includes */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  67:Src/main.c    **** TIM_HandleTypeDef htim14;
  68:Src/main.c    **** TIM_HandleTypeDef htim15;
  69:Src/main.c    **** 
  70:Src/main.c    **** TIM_HandleTypeDef htim2;
  71:Src/main.c    **** 
  72:Src/main.c    **** TIM_HandleTypeDef htim1;
  73:Src/main.c    **** 
  74:Src/main.c    **** DAC_HandleTypeDef hdac;
  75:Src/main.c    **** 
  76:Src/main.c    **** ADC_HandleTypeDef hadc;
  77:Src/main.c    **** DMA_HandleTypeDef hdma_adc;
  78:Src/main.c    **** 
  79:Src/main.c    **** uint16_t adcBuffer[3];
  80:Src/main.c    **** 
  81:Src/main.c    **** 
  82:Src/main.c    **** uint8_t uart_tx_dat;
  83:Src/main.c    **** /* USER CODE END PV */
  84:Src/main.c    **** 
  85:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  86:Src/main.c    **** void SystemClock_Config(void);
  87:Src/main.c    **** static void MX_GPIO_Init(void);
  88:Src/main.c    **** 
  89:Src/main.c    **** static void MX_TIM14_Init(void);
  90:Src/main.c    **** static void MX_TIM15_Init(void);
ARM GAS  /tmp/ccF7TYrA.s 			page 3


  91:Src/main.c    **** static void USER_TIM2_Init(void);
  92:Src/main.c    **** static void USER_TIM1_Init(void);
  93:Src/main.c    **** 
  94:Src/main.c    **** static void MX_DAC_Init(void);
  95:Src/main.c    **** 
  96:Src/main.c    **** static void MX_DMA_Init(void);
  97:Src/main.c    **** static void MX_ADC_Init(void);
  98:Src/main.c    **** 
  99:Src/main.c    **** /* USER CODE BEGIN PFP */
 100:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 101:Src/main.c    **** void dfu_otter_bootloader(void)
 102:Src/main.c    **** {
 103:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 104:Src/main.c    ****   NVIC_SystemReset();
 105:Src/main.c    **** }
 106:Src/main.c    **** /* USER CODE END PFP */
 107:Src/main.c    **** 
 108:Src/main.c    **** /* USER CODE BEGIN 0 */
 109:Src/main.c    **** 
 110:Src/main.c    **** uint32_t curPeriode0 = 0;
 111:Src/main.c    **** uint32_t curPeriode1 = 0;
 112:Src/main.c    **** 
 113:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 114:Src/main.c    **** {
 115:Src/main.c    **** 	if(htim->Instance == TIM14)
 116:Src/main.c    **** 	{
 117:Src/main.c    **** 		//HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 118:Src/main.c    ****     if (TIM2->CNT == 0) {
 119:Src/main.c    ****       TIM2->ARR = (uint32_t)(curPeriode0 / 5); // Play first channel
 120:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 121:Src/main.c    ****     }
 122:Src/main.c    **** 	}
 123:Src/main.c    **** 	if(htim->Instance == TIM15)
 124:Src/main.c    **** 	{
 125:Src/main.c    **** 		//HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 126:Src/main.c    ****     if (TIM2->CNT == 0) {
 127:Src/main.c    ****     	TIM2->ARR = (uint32_t)(curPeriode1 / 10); // Play second channel with less power
 128:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 129:Src/main.c    ****     }
 130:Src/main.c    **** 	}
 131:Src/main.c    **** }
 132:Src/main.c    **** 
 133:Src/main.c    **** /**
 134:Src/main.c    ****   * @brief  The application entry point.
 135:Src/main.c    ****   *
 136:Src/main.c    ****   * @retval None
 137:Src/main.c    ****   */
 138:Src/main.c    **** 
 139:Src/main.c    **** 
 140:Src/main.c    **** uint8_t midiBuffer[4];
 141:Src/main.c    **** uint8_t midiState = 0;
 142:Src/main.c    **** 
 143:Src/main.c    **** uint16_t curTone0 = 0;
 144:Src/main.c    **** uint16_t curTone1 = 0;
 145:Src/main.c    **** uint16_t curChannel = 0;
 146:Src/main.c    **** uint16_t lastTone0 = 0;
 147:Src/main.c    **** uint16_t lastTone1 = 0;
ARM GAS  /tmp/ccF7TYrA.s 			page 4


 148:Src/main.c    **** uint32_t noteTimeout = 0;
 149:Src/main.c    **** 
 150:Src/main.c    **** uint16_t freqs[16] = {0};
 151:Src/main.c    **** #ifdef USE_CDC
 152:Src/main.c    **** char str[40];
 153:Src/main.c    **** #endif
 154:Src/main.c    **** 
 155:Src/main.c    **** int main(void)
 156:Src/main.c    **** {
 157:Src/main.c    ****   /* USER CODE BEGIN 1 */
 158:Src/main.c    **** 
 159:Src/main.c    ****   /* USER CODE END 1 */
 160:Src/main.c    **** 
 161:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 162:Src/main.c    **** 
 163:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 164:Src/main.c    ****   HAL_Init();
 165:Src/main.c    **** 
 166:Src/main.c    ****   /* USER CODE BEGIN Init */
 167:Src/main.c    **** 
 168:Src/main.c    ****   /* USER CODE END Init */
 169:Src/main.c    **** 
 170:Src/main.c    ****   /* Configure the system clock */
 171:Src/main.c    ****   SystemClock_Config();
 172:Src/main.c    **** 
 173:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 174:Src/main.c    **** 
 175:Src/main.c    ****   /* USER CODE END SysInit */
 176:Src/main.c    **** 
 177:Src/main.c    ****   /* Initialize all configured peripherals */
 178:Src/main.c    ****   MX_GPIO_Init();
 179:Src/main.c    **** 	MX_DAC_Init();
 180:Src/main.c    **** 
 181:Src/main.c    **** 	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 182:Src/main.c    **** 	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 183:Src/main.c    **** 
 184:Src/main.c    **** 	MX_TIM14_Init();
 185:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim14);
 186:Src/main.c    **** 	TIM14->CR1 &= ~(1UL);
 187:Src/main.c    **** 
 188:Src/main.c    **** 	MX_TIM15_Init();
 189:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim15);
 190:Src/main.c    **** 	TIM15->CR1 &= ~(1UL);
 191:Src/main.c    **** 
 192:Src/main.c    **** 	USER_TIM1_Init();
 193:Src/main.c    **** 
 194:Src/main.c    ****   //HAL_TIM_PWM_Start(&htim1);
 195:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 196:Src/main.c    **** 
 197:Src/main.c    ****   //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 198:Src/main.c    **** 
 199:Src/main.c    ****   USER_TIM2_Init();
 200:Src/main.c    **** 
 201:Src/main.c    **** 	HAL_TIM_Base_Start(&htim2);
 202:Src/main.c    **** 	HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 203:Src/main.c    **** 
 204:Src/main.c    ****   MX_DMA_Init();
ARM GAS  /tmp/ccF7TYrA.s 			page 5


 205:Src/main.c    ****   MX_ADC_Init();
 206:Src/main.c    **** 
 207:Src/main.c    ****   HAL_ADC_Start_DMA(&hadc, (uint32_t*)adcBuffer, 3);
 208:Src/main.c    **** 
 209:Src/main.c    ****   /* USER CODE BEGIN 2 */
 210:Src/main.c    **** 
 211:Src/main.c    ****   //USB-MIDI Init
 212:Src/main.c    **** #ifdef USE_CDC
 213:Src/main.c    ****   MX_USB_DEVICE_Init();
 214:Src/main.c    **** #endif
 215:Src/main.c    **** #ifndef USE_CDC
 216:Src/main.c    ****   MX_USB_MIDI_INIT();
 217:Src/main.c    **** #endif
 218:Src/main.c    **** 
 219:Src/main.c    **** #ifndef USE_CDC
 220:Src/main.c    ****   if(FUNC_ERROR == midiInit() ){
 221:Src/main.c    **** 	  while(1){
 222:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 223:Src/main.c    **** 		  HAL_Delay(500);
 224:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 225:Src/main.c    **** 		  HAL_Delay(500);
 226:Src/main.c    **** 	  }
 227:Src/main.c    ****   }
 228:Src/main.c    **** 
 229:Src/main.c    ****   //Wait usb configuration.
 230:Src/main.c    ****   while(1){
 231:Src/main.c    **** 	  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 232:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 233:Src/main.c    **** 		  break;
 234:Src/main.c    **** 	  }else{
 235:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 236:Src/main.c    **** 	  }
 237:Src/main.c    ****   }
 238:Src/main.c    **** #endif
 239:Src/main.c    **** 
 240:Src/main.c    ****   while (1)
 241:Src/main.c    ****   {
 242:Src/main.c    ****   //Wait USB configuration when USB connection error has occurred.
 243:Src/main.c    **** 	 /* while(1){
 244:Src/main.c    **** 				//HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 245:Src/main.c    **** 			if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 246:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 247:Src/main.c    **** 			  break;
 248:Src/main.c    **** 		  }else{
 249:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 250:Src/main.c    **** 			  HAL_Delay(200);
 251:Src/main.c    **** 			  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 252:Src/main.c    **** 			  HAL_Delay(200);
 253:Src/main.c    **** 		  }
 254:Src/main.c    **** 	  }*/
 255:Src/main.c    **** #ifdef USE_CDC
 256:Src/main.c    ****       memset(str, ' ', 40);
 257:Src/main.c    ****       sprintf(&str[0], "Otter!\n\r");
 258:Src/main.c    ****       CDC_Transmit_FS((unsigned char*)str, sizeof(str));
 259:Src/main.c    ****       HAL_Delay(200);
 260:Src/main.c    **** 
 261:Src/main.c    ****       if (HAL_GPIO_ReadPin(BUTTON_GPIO, BUTTON_PIN)) {
ARM GAS  /tmp/ccF7TYrA.s 			page 6


 262:Src/main.c    ****         dfu_otter_bootloader();
 263:Src/main.c    ****       }
 264:Src/main.c    **** #endif
 265:Src/main.c    **** 
 266:Src/main.c    ****     if (HAL_GPIO_ReadPin(BUTTON_GPIO, BUTTON_PIN)) {
 267:Src/main.c    ****       dfu_otter_bootloader();
 268:Src/main.c    ****     }
 269:Src/main.c    **** 
 270:Src/main.c    ****     float Vout = ((float)adcBuffer[1] / 4096.0f) * 68.0f;
 271:Src/main.c    **** 
 272:Src/main.c    ****     if (Vout > 20) {
 273:Src/main.c    ****       HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 274:Src/main.c    ****     } else {
 275:Src/main.c    ****       HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 276:Src/main.c    ****     }
 277:Src/main.c    **** #ifndef USE_CDC
 278:Src/main.c    **** 		curTone0 = 0;
 279:Src/main.c    **** 		curTone1 = 0;
 280:Src/main.c    **** 
 281:Src/main.c    **** 	  for( int i = 0; i < 16; i++ ) { // find max pitch from all channels
 282:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 283:Src/main.c    **** 	          curTone1 = curTone0;
 284:Src/main.c    **** 	          curTone0 = freqs[i];
 285:Src/main.c    **** 	      }
 286:Src/main.c    **** 	      else if( freqs[i] > curTone1 ) {
 287:Src/main.c    **** 	          curTone1 = freqs[i];
 288:Src/main.c    **** 	      }
 289:Src/main.c    **** 	  }
 290:Src/main.c    **** 
 291:Src/main.c    **** 		if (curTone0 > 20 && curTone0 != lastTone0) { // play one tone using TIM14
 292:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 293:Src/main.c    **** 			TIM14->CNT = 0;
 294:Src/main.c    **** 			TIM14->ARR = curPeriode0;
 295:Src/main.c    **** 			TIM14->CR1 = TIM14->CR1 | 1;
 296:Src/main.c    **** 			lastTone0 = curTone0;
 297:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 298:Src/main.c    **** 
 299:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, SET);
 300:Src/main.c    **** 		} else if (curTone0 < 20 && curTone0 != lastTone0) {
 301:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 302:Src/main.c    ****       curPeriode0 = 0;
 303:Src/main.c    **** 
 304:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, RESET);
 305:Src/main.c    **** 		}
 306:Src/main.c    **** 
 307:Src/main.c    **** 		if (curTone1 > 20 && curTone1 != lastTone1) { // play other polyphonic tone ussing TIM15
 308:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 309:Src/main.c    **** 			TIM15->CNT = 0;
 310:Src/main.c    **** 			TIM15->ARR = curPeriode1;
 311:Src/main.c    **** 			TIM15->CR1 = TIM15->CR1 | 1;
 312:Src/main.c    **** 			lastTone1 = curTone1;
 313:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 314:Src/main.c    **** 		} else if (curTone1 < 20 && curTone1 != lastTone1) {
 315:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 316:Src/main.c    ****       curPeriode1 = 0;
 317:Src/main.c    **** 		}
 318:Src/main.c    **** 
ARM GAS  /tmp/ccF7TYrA.s 			page 7


 319:Src/main.c    **** 		if ((HAL_GetTick() - noteTimeout) > 1000) {
 320:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 321:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 322:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 323:Src/main.c    **** 				freqs[i] = 0;
 324:Src/main.c    **** 			}
 325:Src/main.c    **** 
 326:Src/main.c    **** 			HAL_GPIO_WritePin(LED_FAULT_GPIO, LED_FAULT_PIN, RESET);
 327:Src/main.c    **** 		}
 328:Src/main.c    **** 
 329:Src/main.c    **** 
 330:Src/main.c    **** 		//[USB-MIDI IN] to [MIDI JACK OUT]
 331:Src/main.c    **** 
 332:Src/main.c    **** 		if( FUNC_SUCCESS == midiGetFromUsbRx(0, &uart_tx_dat)){
 333:Src/main.c    **** 			if (uart_tx_dat >> 7 == 1) {
 334:Src/main.c    **** 				midiBuffer[0] = uart_tx_dat;
 335:Src/main.c    **** 				midiBuffer[1] = 0;
 336:Src/main.c    **** 				midiBuffer[2] = 0;
 337:Src/main.c    **** 				midiState = 1;
 338:Src/main.c    **** 			} else if (midiState == 1) {
 339:Src/main.c    **** 				midiBuffer[1] = uart_tx_dat;
 340:Src/main.c    **** 				midiState = 2;
 341:Src/main.c    **** 			} else if (midiState == 2) {
 342:Src/main.c    **** 				midiBuffer[2] = uart_tx_dat;
 343:Src/main.c    **** 				midiState = 3;
 344:Src/main.c    **** 
 345:Src/main.c    **** 				if ((midiBuffer[0] & 0xF0) == 0x90) { // Note on, 2 data bytes
 346:Src/main.c    **** 					char key = midiBuffer[1];
 347:Src/main.c    **** 					char vel = midiBuffer[2];
 348:Src/main.c    **** 
 349:Src/main.c    **** 					uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 350:Src/main.c    **** 					curChannel = midiBuffer[0] & 0xF;
 351:Src/main.c    **** 					freqs[curChannel] = freq;
 352:Src/main.c    **** 
 353:Src/main.c    **** 
 354:Src/main.c    **** 				} if ((midiBuffer[0] &0xF0) == 0x80) { // Note off, 2 data bytes
 355:Src/main.c    **** 					char key = midiBuffer[1];
 356:Src/main.c    **** 					char vel = midiBuffer[2];
 357:Src/main.c    **** 
 358:Src/main.c    **** 					uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 359:Src/main.c    **** 
 360:Src/main.c    **** 					//if (freqs[midiBuffer[0] & 0xF] == freq) {
 361:Src/main.c    **** 					freqs[midiBuffer[0] & 0xF] = 0;
 362:Src/main.c    **** 					//}
 363:Src/main.c    **** 				}
 364:Src/main.c    **** 			}
 365:Src/main.c    **** 		}
 366:Src/main.c    **** #endif
 367:Src/main.c    **** 	//[MIDI JACK IN] to [USB-MIDI OUT]
 368:Src/main.c    **** 	//midiProcess();
 369:Src/main.c    **** 
 370:Src/main.c    **** 
 371:Src/main.c    ****   }
 372:Src/main.c    ****   /* USER CODE END 3 */
 373:Src/main.c    **** 
 374:Src/main.c    **** }
 375:Src/main.c    **** 
ARM GAS  /tmp/ccF7TYrA.s 			page 8


 376:Src/main.c    **** /** System Clock Configuration
 377:Src/main.c    **** */
 378:Src/main.c    **** void SystemClock_Config(void)
 379:Src/main.c    **** {
 380:Src/main.c    **** 
 381:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 382:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 383:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 384:Src/main.c    **** 
 385:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 386:Src/main.c    ****     */
 387:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 388:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 389:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 390:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 391:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 392:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 393:Src/main.c    ****   {
 394:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 395:Src/main.c    ****   }
 396:Src/main.c    **** 
 397:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 398:Src/main.c    ****     */
 399:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 400:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 401:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 402:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 403:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 404:Src/main.c    **** 
 405:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 406:Src/main.c    ****   {
 407:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 408:Src/main.c    ****   }
 409:Src/main.c    **** 
 410:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 411:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 412:Src/main.c    **** 
 413:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 414:Src/main.c    ****   {
 415:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 416:Src/main.c    ****   }
 417:Src/main.c    **** 
 418:Src/main.c    ****     /**Configure the Systick interrupt time
 419:Src/main.c    ****     */
 420:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 421:Src/main.c    **** 
 422:Src/main.c    ****     /**Configure the Systick
 423:Src/main.c    ****     */
 424:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 425:Src/main.c    **** 
 426:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 427:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 428:Src/main.c    **** }
 429:Src/main.c    **** 
 430:Src/main.c    **** /* ADC init function */
 431:Src/main.c    **** static void MX_ADC_Init(void)
 432:Src/main.c    **** {
ARM GAS  /tmp/ccF7TYrA.s 			page 9


 433:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 434:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 435:Src/main.c    **** 
 436:Src/main.c    ****     /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of co
 437:Src/main.c    ****     */
 438:Src/main.c    ****   hadc.Instance = ADC1;
 439:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 440:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 441:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 442:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 443:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 444:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 445:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 446:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 447:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 448:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 449:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 450:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 451:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 452:Src/main.c    ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 453:Src/main.c    ****   {
 454:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 455:Src/main.c    ****   }
 456:Src/main.c    **** 
 457:Src/main.c    ****     /**Configure for the selected ADC regular channel to be converted.
 458:Src/main.c    ****     */
 459:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 460:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 461:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 462:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 463:Src/main.c    ****   {
 464:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 465:Src/main.c    ****   }
 466:Src/main.c    **** 
 467:Src/main.c    ****     /**Configure for the selected ADC regular channel to be converted.
 468:Src/main.c    ****     */
 469:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 470:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 471:Src/main.c    ****   {
 472:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 473:Src/main.c    ****   }
 474:Src/main.c    **** 
 475:Src/main.c    ****     /**Configure for the selected ADC regular channel to be converted.
 476:Src/main.c    ****     */
 477:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_2;
 478:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 479:Src/main.c    ****   {
 480:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 481:Src/main.c    ****   }
 482:Src/main.c    **** 
 483:Src/main.c    **** 
 484:Src/main.c    **** }
 485:Src/main.c    **** 
 486:Src/main.c    **** /**
 487:Src/main.c    ****   * Enable DMA controller clock
 488:Src/main.c    ****   */
 489:Src/main.c    **** static void MX_DMA_Init(void)
ARM GAS  /tmp/ccF7TYrA.s 			page 10


 490:Src/main.c    **** {
 491:Src/main.c    ****   /* DMA controller clock enable */
 492:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 493:Src/main.c    **** 
 494:Src/main.c    ****   /* DMA interrupt init */
 495:Src/main.c    ****   /* DMA1_Channel1_IRQn interrupt configuration */
 496:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 497:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 498:Src/main.c    **** 
 499:Src/main.c    **** }
 500:Src/main.c    **** 
 501:Src/main.c    **** 
 502:Src/main.c    **** /* TIM14 init function */
 503:Src/main.c    **** static void MX_TIM14_Init(void)
 504:Src/main.c    **** {
 505:Src/main.c    ****   htim14.Instance = TIM14;
 506:Src/main.c    ****   htim14.Init.Prescaler = 11;
 507:Src/main.c    ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 508:Src/main.c    ****   htim14.Init.Period = 1000;
 509:Src/main.c    ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 510:Src/main.c    ****   htim14.Init.RepetitionCounter = 0;
 511:Src/main.c    ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 512:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 513:Src/main.c    ****   {
 514:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 515:Src/main.c    ****   }
 516:Src/main.c    **** }
 517:Src/main.c    **** 
 518:Src/main.c    **** /* TIM15 init function */
 519:Src/main.c    **** static void MX_TIM15_Init(void)
 520:Src/main.c    **** {
 521:Src/main.c    ****   htim15.Instance = TIM15;
 522:Src/main.c    ****   htim15.Init.Prescaler = 11;
 523:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 524:Src/main.c    ****   htim15.Init.Period = 1000;
 525:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 526:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 527:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 528:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 529:Src/main.c    ****   {
 530:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 531:Src/main.c    ****   }
 532:Src/main.c    **** }
 533:Src/main.c    **** 
 534:Src/main.c    **** static void USER_TIM2_Init(void) {
 535:Src/main.c    **** 	__HAL_RCC_TIM2_CLK_ENABLE();
 536:Src/main.c    **** 
 537:Src/main.c    **** 	TIM_ClockConfigTypeDef sClockSourceConfig;
 538:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig;
 539:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC;
 540:Src/main.c    **** 
 541:Src/main.c    **** 	htim2.Instance = TIM2;
 542:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 543:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 544:Src/main.c    **** 	htim2.Init.Period = 3200;
 545:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 546:Src/main.c    **** 	HAL_TIM_Base_Init(&htim2);
ARM GAS  /tmp/ccF7TYrA.s 			page 11


 547:Src/main.c    **** 
 548:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 549:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 550:Src/main.c    **** 	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 551:Src/main.c    **** 
 552:Src/main.c    **** 	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 553:Src/main.c    **** 	sConfigOC.Pulse = 1;
 554:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 555:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 556:Src/main.c    **** 	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 557:Src/main.c    **** 
 558:Src/main.c    **** 	HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE);
 559:Src/main.c    **** 	HAL_TIM_MspPostInit(&htim2);
 560:Src/main.c    **** }
 561:Src/main.c    **** 
 562:Src/main.c    **** static void USER_TIM1_Init(void)
 563:Src/main.c    **** {
 564:Src/main.c    ****   __HAL_RCC_TIM1_CLK_ENABLE();
 565:Src/main.c    **** 
 566:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 567:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 568:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
 569:Src/main.c    **** 
 570:Src/main.c    ****   htim1.Instance = TIM1;
 571:Src/main.c    ****   htim1.Init.Prescaler = 0;
 572:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 573:Src/main.c    ****   htim1.Init.Period = 1024;
 574:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 575:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 576:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 577:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 578:Src/main.c    ****   {
 579:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 580:Src/main.c    ****   }
 581:Src/main.c    **** 
 582:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 583:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 584:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 585:Src/main.c    ****   {
 586:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 587:Src/main.c    ****   }
 588:Src/main.c    **** 
 589:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 590:Src/main.c    ****   sConfigOC.Pulse = 100;
 591:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 592:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 593:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 594:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 595:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 596:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 597:Src/main.c    ****   {
 598:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 599:Src/main.c    ****   }
 600:Src/main.c    **** 
 601:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 602:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 603:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
ARM GAS  /tmp/ccF7TYrA.s 			page 12


 604:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 605:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 606:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 607:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 608:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 609:Src/main.c    ****   {
 610:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 611:Src/main.c    ****   }
 612:Src/main.c    **** 
 613:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 614:Src/main.c    **** 
 615:Src/main.c    **** }
 616:Src/main.c    **** 
 617:Src/main.c    **** 
 618:Src/main.c    **** /* DAC init function */
 619:Src/main.c    **** static void MX_DAC_Init(void)
 620:Src/main.c    **** {
 621:Src/main.c    **** 
 622:Src/main.c    ****   DAC_ChannelConfTypeDef sConfig;
 623:Src/main.c    **** 
 624:Src/main.c    ****     /**DAC Initialization
 625:Src/main.c    ****     */
 626:Src/main.c    ****   hdac.Instance = DAC;
 627:Src/main.c    ****   if (HAL_DAC_Init(&hdac) != HAL_OK)
 628:Src/main.c    ****   {
 629:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 630:Src/main.c    ****   }
 631:Src/main.c    **** 
 632:Src/main.c    ****     /**DAC channel OUT1 config
 633:Src/main.c    ****     */
 634:Src/main.c    ****   sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 635:Src/main.c    ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 636:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 637:Src/main.c    ****   {
 638:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 639:Src/main.c    ****   }
 640:Src/main.c    **** 
 641:Src/main.c    **** }
 642:Src/main.c    **** 
 643:Src/main.c    **** 
 644:Src/main.c    **** 
 645:Src/main.c    **** /**
 646:Src/main.c    ****   * Enable DMA controller clock
 647:Src/main.c    ****   */
 648:Src/main.c    **** 
 649:Src/main.c    **** 
 650:Src/main.c    **** /** Configure pins as
 651:Src/main.c    ****         * Analog
 652:Src/main.c    ****         * Input
 653:Src/main.c    ****         * Output
 654:Src/main.c    ****         * EVENT_OUT
 655:Src/main.c    ****         * EXTI
 656:Src/main.c    **** */
 657:Src/main.c    **** static void MX_GPIO_Init(void)
 658:Src/main.c    **** {
  26              		.loc 1 658 1 view -0
  27              		.cfi_startproc
ARM GAS  /tmp/ccF7TYrA.s 			page 13


  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 30B5     		push	{r4, r5, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 5, -8
  35              		.cfi_offset 14, -4
  36 0002 89B0     		sub	sp, sp, #36
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 48
 659:Src/main.c    **** 
 660:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
  39              		.loc 1 660 3 view .LVU1
 661:Src/main.c    **** 
 662:Src/main.c    ****   /* GPIO Ports Clock Enable */
 663:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  40              		.loc 1 663 3 view .LVU2
  41              	.LBB8:
  42              		.loc 1 663 3 view .LVU3
  43              		.loc 1 663 3 view .LVU4
  44 0004 184B     		ldr	r3, .L2
  45 0006 5969     		ldr	r1, [r3, #20]
  46 0008 8020     		movs	r0, #128
  47 000a C003     		lsls	r0, r0, #15
  48 000c 0143     		orrs	r1, r0
  49 000e 5961     		str	r1, [r3, #20]
  50              		.loc 1 663 3 view .LVU5
  51 0010 5A69     		ldr	r2, [r3, #20]
  52 0012 0240     		ands	r2, r0
  53 0014 0092     		str	r2, [sp]
  54              		.loc 1 663 3 view .LVU6
  55 0016 009A     		ldr	r2, [sp]
  56              	.LBE8:
 664:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  57              		.loc 1 664 3 view .LVU7
  58              	.LBB9:
  59              		.loc 1 664 3 view .LVU8
  60              		.loc 1 664 3 view .LVU9
  61 0018 5969     		ldr	r1, [r3, #20]
  62 001a 8020     		movs	r0, #128
  63 001c 8002     		lsls	r0, r0, #10
  64 001e 0143     		orrs	r1, r0
  65 0020 5961     		str	r1, [r3, #20]
  66              		.loc 1 664 3 view .LVU10
  67 0022 5A69     		ldr	r2, [r3, #20]
  68 0024 0240     		ands	r2, r0
  69 0026 0192     		str	r2, [sp, #4]
  70              		.loc 1 664 3 view .LVU11
  71 0028 019A     		ldr	r2, [sp, #4]
  72              	.LBE9:
 665:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  73              		.loc 1 665 3 view .LVU12
  74              	.LBB10:
  75              		.loc 1 665 3 view .LVU13
  76              		.loc 1 665 3 view .LVU14
  77 002a 5A69     		ldr	r2, [r3, #20]
ARM GAS  /tmp/ccF7TYrA.s 			page 14


  78 002c 8021     		movs	r1, #128
  79 002e C902     		lsls	r1, r1, #11
  80 0030 0A43     		orrs	r2, r1
  81 0032 5A61     		str	r2, [r3, #20]
  82              		.loc 1 665 3 view .LVU15
  83 0034 5B69     		ldr	r3, [r3, #20]
  84 0036 0B40     		ands	r3, r1
  85 0038 0293     		str	r3, [sp, #8]
  86              		.loc 1 665 3 view .LVU16
  87 003a 029B     		ldr	r3, [sp, #8]
  88              	.LBE10:
 666:Src/main.c    **** 
 667:Src/main.c    ****   /*Configure GPIO pin Output Level */
 668:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
  89              		.loc 1 668 3 view .LVU17
  90 003c 8425     		movs	r5, #132
  91 003e 2D02     		lsls	r5, r5, #8
  92 0040 9024     		movs	r4, #144
  93 0042 E405     		lsls	r4, r4, #23
  94 0044 0022     		movs	r2, #0
  95 0046 2900     		movs	r1, r5
  96 0048 2000     		movs	r0, r4
  97 004a FFF7FEFF 		bl	HAL_GPIO_WritePin
  98              	.LVL0:
 669:Src/main.c    **** 
 670:Src/main.c    ****   /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
 671:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
  99              		.loc 1 671 3 view .LVU18
 100              		.loc 1 671 23 is_stmt 0 view .LVU19
 101 004e 0395     		str	r5, [sp, #12]
 672:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 102              		.loc 1 672 3 is_stmt 1 view .LVU20
 103              		.loc 1 672 24 is_stmt 0 view .LVU21
 104 0050 0123     		movs	r3, #1
 105 0052 0493     		str	r3, [sp, #16]
 673:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 106              		.loc 1 673 3 is_stmt 1 view .LVU22
 107              		.loc 1 673 24 is_stmt 0 view .LVU23
 108 0054 0023     		movs	r3, #0
 109 0056 0593     		str	r3, [sp, #20]
 674:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 110              		.loc 1 674 3 is_stmt 1 view .LVU24
 111              		.loc 1 674 25 is_stmt 0 view .LVU25
 112 0058 0693     		str	r3, [sp, #24]
 675:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 113              		.loc 1 675 3 is_stmt 1 view .LVU26
 114 005a 03A9     		add	r1, sp, #12
 115 005c 2000     		movs	r0, r4
 116 005e FFF7FEFF 		bl	HAL_GPIO_Init
 117              	.LVL1:
 676:Src/main.c    **** }
 118              		.loc 1 676 1 is_stmt 0 view .LVU27
 119 0062 09B0     		add	sp, sp, #36
 120              		@ sp needed
 121 0064 30BD     		pop	{r4, r5, pc}
 122              	.L3:
 123 0066 C046     		.align	2
ARM GAS  /tmp/ccF7TYrA.s 			page 15


 124              	.L2:
 125 0068 00100240 		.word	1073876992
 126              		.cfi_endproc
 127              	.LFE48:
 129              		.section	.text.USER_TIM2_Init,"ax",%progbits
 130              		.align	1
 131              		.syntax unified
 132              		.code	16
 133              		.thumb_func
 134              		.fpu softvfp
 136              	USER_TIM2_Init:
 137              	.LFB45:
 534:Src/main.c    **** 	__HAL_RCC_TIM2_CLK_ENABLE();
 138              		.loc 1 534 34 is_stmt 1 view -0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 40
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142 0000 70B5     		push	{r4, r5, r6, lr}
 143              	.LCFI2:
 144              		.cfi_def_cfa_offset 16
 145              		.cfi_offset 4, -16
 146              		.cfi_offset 5, -12
 147              		.cfi_offset 6, -8
 148              		.cfi_offset 14, -4
 149 0002 8AB0     		sub	sp, sp, #40
 150              	.LCFI3:
 151              		.cfi_def_cfa_offset 56
 535:Src/main.c    **** 
 152              		.loc 1 535 2 view .LVU29
 153              	.LBB11:
 535:Src/main.c    **** 
 154              		.loc 1 535 2 view .LVU30
 535:Src/main.c    **** 
 155              		.loc 1 535 2 view .LVU31
 156 0004 194B     		ldr	r3, .L5
 157 0006 DA69     		ldr	r2, [r3, #28]
 158 0008 0126     		movs	r6, #1
 159 000a 3243     		orrs	r2, r6
 160 000c DA61     		str	r2, [r3, #28]
 535:Src/main.c    **** 
 161              		.loc 1 535 2 view .LVU32
 162 000e DB69     		ldr	r3, [r3, #28]
 163 0010 3340     		ands	r3, r6
 164 0012 0093     		str	r3, [sp]
 535:Src/main.c    **** 
 165              		.loc 1 535 2 view .LVU33
 166 0014 009B     		ldr	r3, [sp]
 167              	.LBE11:
 537:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig;
 168              		.loc 1 537 2 view .LVU34
 538:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC;
 169              		.loc 1 538 2 view .LVU35
 539:Src/main.c    **** 
 170              		.loc 1 539 2 view .LVU36
 541:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 171              		.loc 1 541 2 view .LVU37
 541:Src/main.c    **** 	htim2.Init.Prescaler = 0;
ARM GAS  /tmp/ccF7TYrA.s 			page 16


 172              		.loc 1 541 17 is_stmt 0 view .LVU38
 173 0016 164C     		ldr	r4, .L5+4
 174 0018 8023     		movs	r3, #128
 175 001a DB05     		lsls	r3, r3, #23
 176 001c 2360     		str	r3, [r4]
 542:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 177              		.loc 1 542 2 is_stmt 1 view .LVU39
 542:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 178              		.loc 1 542 23 is_stmt 0 view .LVU40
 179 001e 0025     		movs	r5, #0
 180 0020 6560     		str	r5, [r4, #4]
 543:Src/main.c    **** 	htim2.Init.Period = 3200;
 181              		.loc 1 543 2 is_stmt 1 view .LVU41
 543:Src/main.c    **** 	htim2.Init.Period = 3200;
 182              		.loc 1 543 25 is_stmt 0 view .LVU42
 183 0022 A560     		str	r5, [r4, #8]
 544:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 184              		.loc 1 544 2 is_stmt 1 view .LVU43
 544:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 185              		.loc 1 544 20 is_stmt 0 view .LVU44
 186 0024 C823     		movs	r3, #200
 187 0026 1B01     		lsls	r3, r3, #4
 188 0028 E360     		str	r3, [r4, #12]
 545:Src/main.c    **** 	HAL_TIM_Base_Init(&htim2);
 189              		.loc 1 545 2 is_stmt 1 view .LVU45
 545:Src/main.c    **** 	HAL_TIM_Base_Init(&htim2);
 190              		.loc 1 545 27 is_stmt 0 view .LVU46
 191 002a 8023     		movs	r3, #128
 192 002c 9B00     		lsls	r3, r3, #2
 193 002e 2361     		str	r3, [r4, #16]
 546:Src/main.c    **** 
 194              		.loc 1 546 2 is_stmt 1 view .LVU47
 195 0030 2000     		movs	r0, r4
 196 0032 FFF7FEFF 		bl	HAL_TIM_Base_Init
 197              	.LVL2:
 548:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 198              		.loc 1 548 2 view .LVU48
 548:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 199              		.loc 1 548 36 is_stmt 0 view .LVU49
 200 0036 0895     		str	r5, [sp, #32]
 549:Src/main.c    **** 	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 201              		.loc 1 549 2 is_stmt 1 view .LVU50
 549:Src/main.c    **** 	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 202              		.loc 1 549 32 is_stmt 0 view .LVU51
 203 0038 0995     		str	r5, [sp, #36]
 550:Src/main.c    **** 
 204              		.loc 1 550 2 is_stmt 1 view .LVU52
 205 003a 08A9     		add	r1, sp, #32
 206 003c 2000     		movs	r0, r4
 207 003e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 208              	.LVL3:
 552:Src/main.c    **** 	sConfigOC.Pulse = 1;
 209              		.loc 1 552 2 view .LVU53
 552:Src/main.c    **** 	sConfigOC.Pulse = 1;
 210              		.loc 1 552 19 is_stmt 0 view .LVU54
 211 0042 6023     		movs	r3, #96
 212 0044 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccF7TYrA.s 			page 17


 553:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 213              		.loc 1 553 2 is_stmt 1 view .LVU55
 553:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 214              		.loc 1 553 18 is_stmt 0 view .LVU56
 215 0046 0296     		str	r6, [sp, #8]
 554:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 216              		.loc 1 554 2 is_stmt 1 view .LVU57
 554:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 217              		.loc 1 554 23 is_stmt 0 view .LVU58
 218 0048 5E3B     		subs	r3, r3, #94
 219 004a 0393     		str	r3, [sp, #12]
 555:Src/main.c    **** 	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 220              		.loc 1 555 2 is_stmt 1 view .LVU59
 555:Src/main.c    **** 	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 221              		.loc 1 555 23 is_stmt 0 view .LVU60
 222 004c 0595     		str	r5, [sp, #20]
 556:Src/main.c    **** 
 223              		.loc 1 556 2 is_stmt 1 view .LVU61
 224 004e 0422     		movs	r2, #4
 225 0050 01A9     		add	r1, sp, #4
 226 0052 2000     		movs	r0, r4
 227 0054 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 228              	.LVL4:
 558:Src/main.c    **** 	HAL_TIM_MspPostInit(&htim2);
 229              		.loc 1 558 2 view .LVU62
 230 0058 0821     		movs	r1, #8
 231 005a 2000     		movs	r0, r4
 232 005c FFF7FEFF 		bl	HAL_TIM_OnePulse_Init
 233              	.LVL5:
 559:Src/main.c    **** }
 234              		.loc 1 559 2 view .LVU63
 235 0060 2000     		movs	r0, r4
 236 0062 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 237              	.LVL6:
 560:Src/main.c    **** 
 238              		.loc 1 560 1 is_stmt 0 view .LVU64
 239 0066 0AB0     		add	sp, sp, #40
 240              		@ sp needed
 241 0068 70BD     		pop	{r4, r5, r6, pc}
 242              	.L6:
 243 006a C046     		.align	2
 244              	.L5:
 245 006c 00100240 		.word	1073876992
 246 0070 00000000 		.word	htim2
 247              		.cfi_endproc
 248              	.LFE45:
 250              		.section	.text.MX_DMA_Init,"ax",%progbits
 251              		.align	1
 252              		.syntax unified
 253              		.code	16
 254              		.thumb_func
 255              		.fpu softvfp
 257              	MX_DMA_Init:
 258              	.LFB42:
 490:Src/main.c    ****   /* DMA controller clock enable */
 259              		.loc 1 490 1 is_stmt 1 view -0
 260              		.cfi_startproc
ARM GAS  /tmp/ccF7TYrA.s 			page 18


 261              		@ args = 0, pretend = 0, frame = 8
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263 0000 00B5     		push	{lr}
 264              	.LCFI4:
 265              		.cfi_def_cfa_offset 4
 266              		.cfi_offset 14, -4
 267 0002 83B0     		sub	sp, sp, #12
 268              	.LCFI5:
 269              		.cfi_def_cfa_offset 16
 492:Src/main.c    **** 
 270              		.loc 1 492 3 view .LVU66
 271              	.LBB12:
 492:Src/main.c    **** 
 272              		.loc 1 492 3 view .LVU67
 492:Src/main.c    **** 
 273              		.loc 1 492 3 view .LVU68
 274 0004 094A     		ldr	r2, .L8
 275 0006 5169     		ldr	r1, [r2, #20]
 276 0008 0123     		movs	r3, #1
 277 000a 1943     		orrs	r1, r3
 278 000c 5161     		str	r1, [r2, #20]
 492:Src/main.c    **** 
 279              		.loc 1 492 3 view .LVU69
 280 000e 5269     		ldr	r2, [r2, #20]
 281 0010 1340     		ands	r3, r2
 282 0012 0193     		str	r3, [sp, #4]
 492:Src/main.c    **** 
 283              		.loc 1 492 3 view .LVU70
 284 0014 019B     		ldr	r3, [sp, #4]
 285              	.LBE12:
 496:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 286              		.loc 1 496 3 view .LVU71
 287 0016 0022     		movs	r2, #0
 288 0018 0021     		movs	r1, #0
 289 001a 0920     		movs	r0, #9
 290 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 291              	.LVL7:
 497:Src/main.c    **** 
 292              		.loc 1 497 3 view .LVU72
 293 0020 0920     		movs	r0, #9
 294 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 295              	.LVL8:
 499:Src/main.c    **** 
 296              		.loc 1 499 1 is_stmt 0 view .LVU73
 297 0026 03B0     		add	sp, sp, #12
 298              		@ sp needed
 299 0028 00BD     		pop	{pc}
 300              	.L9:
 301 002a C046     		.align	2
 302              	.L8:
 303 002c 00100240 		.word	1073876992
 304              		.cfi_endproc
 305              	.LFE42:
 307              		.section	.text.dfu_otter_bootloader,"ax",%progbits
 308              		.align	1
 309              		.global	dfu_otter_bootloader
 310              		.syntax unified
ARM GAS  /tmp/ccF7TYrA.s 			page 19


 311              		.code	16
 312              		.thumb_func
 313              		.fpu softvfp
 315              	dfu_otter_bootloader:
 316              	.LFB37:
 102:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 317              		.loc 1 102 1 is_stmt 1 view -0
 318              		.cfi_startproc
 319              		@ Volatile: function does not return.
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 103:Src/main.c    ****   NVIC_SystemReset();
 323              		.loc 1 103 3 view .LVU75
 103:Src/main.c    ****   NVIC_SystemReset();
 324              		.loc 1 103 34 is_stmt 0 view .LVU76
 325 0000 054B     		ldr	r3, .L12
 326 0002 064A     		ldr	r2, .L12+4
 327 0004 1A60     		str	r2, [r3]
 104:Src/main.c    **** }
 328              		.loc 1 104 3 is_stmt 1 view .LVU77
 329              	.LBB21:
 330              	.LBI21:
 331              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccF7TYrA.s 			page 20


  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
ARM GAS  /tmp/ccF7TYrA.s 			page 21


  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0.h **** 
 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0.h **** 
 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
ARM GAS  /tmp/ccF7TYrA.s 			page 22


 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0.h **** 
 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:Drivers/CMSIS/Include/core_cm0.h **** 
 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
ARM GAS  /tmp/ccF7TYrA.s 			page 23


 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
ARM GAS  /tmp/ccF7TYrA.s 			page 24


 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
ARM GAS  /tmp/ccF7TYrA.s 			page 25


 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
 358:Drivers/CMSIS/Include/core_cm0.h **** 
 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccF7TYrA.s 			page 26


 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
ARM GAS  /tmp/ccF7TYrA.s 			page 27


 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0.h **** 
 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:Drivers/CMSIS/Include/core_cm0.h **** 
 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
ARM GAS  /tmp/ccF7TYrA.s 			page 28


 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccF7TYrA.s 			page 29


 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:Drivers/CMSIS/Include/core_cm0.h **** 
 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccF7TYrA.s 			page 30


 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:Drivers/CMSIS/Include/core_cm0.h **** }
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:Drivers/CMSIS/Include/core_cm0.h **** }
 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:Drivers/CMSIS/Include/core_cm0.h **** {
 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 656:Drivers/CMSIS/Include/core_cm0.h **** }
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
ARM GAS  /tmp/ccF7TYrA.s 			page 31


 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:Drivers/CMSIS/Include/core_cm0.h ****   }
 700:Drivers/CMSIS/Include/core_cm0.h **** }
 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
ARM GAS  /tmp/ccF7TYrA.s 			page 32


 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
 723:Drivers/CMSIS/Include/core_cm0.h **** }
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 332              		.loc 2 730 22 view .LVU78
 333              	.LBB22:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 334              		.loc 2 732 3 view .LVU79
 335              	.LBB23:
 336              	.LBI23:
 337              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
ARM GAS  /tmp/ccF7TYrA.s 			page 33


  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccF7TYrA.s 			page 34


  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
ARM GAS  /tmp/ccF7TYrA.s 			page 35


 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccF7TYrA.s 			page 36


 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
ARM GAS  /tmp/ccF7TYrA.s 			page 37


 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
ARM GAS  /tmp/ccF7TYrA.s 			page 38


 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccF7TYrA.s 			page 39


 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 338              		.loc 3 427 53 view .LVU80
 339              	.LBB24:
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 340              		.loc 3 429 3 view .LVU81
 341              		.syntax divided
 342              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 343 0006 BFF34F8F 		dsb 0xF
ARM GAS  /tmp/ccF7TYrA.s 			page 40


 344              	@ 0 "" 2
 345              		.thumb
 346              		.syntax unified
 347              	.LBE24:
 348              	.LBE23:
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 349              		.loc 2 734 3 view .LVU82
 350              		.loc 2 734 15 is_stmt 0 view .LVU83
 351 000a 054B     		ldr	r3, .L12+8
 352 000c 054A     		ldr	r2, .L12+12
 353 000e DA60     		str	r2, [r3, #12]
 735:Drivers/CMSIS/Include/core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 736:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure completion of memory 
 354              		.loc 2 736 3 is_stmt 1 view .LVU84
 355              	.LBB25:
 356              	.LBI25:
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 357              		.loc 3 427 53 view .LVU85
 358              	.LBB26:
 359              		.loc 3 429 3 view .LVU86
 360              		.syntax divided
 361              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 362 0010 BFF34F8F 		dsb 0xF
 363              	@ 0 "" 2
 364              		.thumb
 365              		.syntax unified
 366              	.L11:
 367              	.LBE26:
 368              	.LBE25:
 737:Drivers/CMSIS/Include/core_cm0.h **** 
 738:Drivers/CMSIS/Include/core_cm0.h ****   for(;;)                                                           /* wait until reset */
 369              		.loc 2 738 3 view .LVU87
 739:Drivers/CMSIS/Include/core_cm0.h ****   {
 740:Drivers/CMSIS/Include/core_cm0.h ****     __NOP();
 370              		.loc 2 740 5 view .LVU88
 371              	.LBB27:
 372              	.LBI27:
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 373              		.loc 3 373 53 view .LVU89
 374              	.LBB28:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375              		.loc 3 375 3 view .LVU90
 376              		.syntax divided
 377              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 378 0014 C046     		nop
 379              	@ 0 "" 2
 380              		.thumb
 381              		.syntax unified
 382 0016 FDE7     		b	.L11
 383              	.L13:
 384              		.align	2
 385              	.L12:
 386 0018 F03F0020 		.word	536887280
 387 001c EFBEADDE 		.word	-559038737
 388 0020 00ED00E0 		.word	-536810240
 389 0024 0400FA05 		.word	100270084
ARM GAS  /tmp/ccF7TYrA.s 			page 41


 390              	.LBE28:
 391              	.LBE27:
 392              	.LBE22:
 393              	.LBE21:
 394              		.cfi_endproc
 395              	.LFE37:
 397              		.global	__aeabi_uidiv
 398              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 399              		.align	1
 400              		.global	HAL_TIM_PeriodElapsedCallback
 401              		.syntax unified
 402              		.code	16
 403              		.thumb_func
 404              		.fpu softvfp
 406              	HAL_TIM_PeriodElapsedCallback:
 407              	.LVL9:
 408              	.LFB38:
 114:Src/main.c    **** 	if(htim->Instance == TIM14)
 409              		.loc 1 114 1 view -0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 114:Src/main.c    **** 	if(htim->Instance == TIM14)
 413              		.loc 1 114 1 is_stmt 0 view .LVU92
 414 0000 10B5     		push	{r4, lr}
 415              	.LCFI6:
 416              		.cfi_def_cfa_offset 8
 417              		.cfi_offset 4, -8
 418              		.cfi_offset 14, -4
 419 0002 0400     		movs	r4, r0
 115:Src/main.c    **** 	{
 420              		.loc 1 115 2 is_stmt 1 view .LVU93
 115:Src/main.c    **** 	{
 421              		.loc 1 115 4 is_stmt 0 view .LVU94
 422 0004 164B     		ldr	r3, .L19
 423 0006 0268     		ldr	r2, [r0]
 424 0008 9A42     		cmp	r2, r3
 425 000a 04D0     		beq	.L17
 426              	.LVL10:
 427              	.L15:
 123:Src/main.c    **** 	{
 428              		.loc 1 123 2 is_stmt 1 view .LVU95
 123:Src/main.c    **** 	{
 429              		.loc 1 123 9 is_stmt 0 view .LVU96
 430 000c 2268     		ldr	r2, [r4]
 123:Src/main.c    **** 	{
 431              		.loc 1 123 4 view .LVU97
 432 000e 154B     		ldr	r3, .L19+4
 433 0010 9A42     		cmp	r2, r3
 434 0012 12D0     		beq	.L18
 435              	.L14:
 131:Src/main.c    **** 
 436              		.loc 1 131 1 view .LVU98
 437              		@ sp needed
 438              	.LVL11:
 131:Src/main.c    **** 
 439              		.loc 1 131 1 view .LVU99
ARM GAS  /tmp/ccF7TYrA.s 			page 42


 440 0014 10BD     		pop	{r4, pc}
 441              	.LVL12:
 442              	.L17:
 118:Src/main.c    ****       TIM2->ARR = (uint32_t)(curPeriode0 / 5); // Play first channel
 443              		.loc 1 118 5 is_stmt 1 view .LVU100
 118:Src/main.c    ****       TIM2->ARR = (uint32_t)(curPeriode0 / 5); // Play first channel
 444              		.loc 1 118 13 is_stmt 0 view .LVU101
 445 0016 8023     		movs	r3, #128
 446 0018 DB05     		lsls	r3, r3, #23
 447 001a 5B6A     		ldr	r3, [r3, #36]
 118:Src/main.c    ****       TIM2->ARR = (uint32_t)(curPeriode0 / 5); // Play first channel
 448              		.loc 1 118 8 view .LVU102
 449 001c 002B     		cmp	r3, #0
 450 001e F5D1     		bne	.L15
 119:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 451              		.loc 1 119 7 is_stmt 1 view .LVU103
 119:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 452              		.loc 1 119 19 is_stmt 0 view .LVU104
 453 0020 114B     		ldr	r3, .L19+8
 454 0022 1868     		ldr	r0, [r3]
 455              	.LVL13:
 119:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 456              		.loc 1 119 19 view .LVU105
 457 0024 0521     		movs	r1, #5
 458 0026 FFF7FEFF 		bl	__aeabi_uidiv
 459              	.LVL14:
 119:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 460              		.loc 1 119 17 view .LVU106
 461 002a 8023     		movs	r3, #128
 462 002c DB05     		lsls	r3, r3, #23
 463 002e D862     		str	r0, [r3, #44]
 120:Src/main.c    ****     }
 464              		.loc 1 120 6 is_stmt 1 view .LVU107
 120:Src/main.c    ****     }
 465              		.loc 1 120 22 is_stmt 0 view .LVU108
 466 0030 1A68     		ldr	r2, [r3]
 120:Src/main.c    ****     }
 467              		.loc 1 120 28 view .LVU109
 468 0032 0121     		movs	r1, #1
 469 0034 0A43     		orrs	r2, r1
 120:Src/main.c    ****     }
 470              		.loc 1 120 16 view .LVU110
 471 0036 1A60     		str	r2, [r3]
 472 0038 E8E7     		b	.L15
 473              	.L18:
 126:Src/main.c    ****     	TIM2->ARR = (uint32_t)(curPeriode1 / 10); // Play second channel with less power
 474              		.loc 1 126 5 is_stmt 1 view .LVU111
 126:Src/main.c    ****     	TIM2->ARR = (uint32_t)(curPeriode1 / 10); // Play second channel with less power
 475              		.loc 1 126 13 is_stmt 0 view .LVU112
 476 003a 8023     		movs	r3, #128
 477 003c DB05     		lsls	r3, r3, #23
 478 003e 5B6A     		ldr	r3, [r3, #36]
 126:Src/main.c    ****     	TIM2->ARR = (uint32_t)(curPeriode1 / 10); // Play second channel with less power
 479              		.loc 1 126 8 view .LVU113
 480 0040 002B     		cmp	r3, #0
 481 0042 E7D1     		bne	.L14
 127:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
ARM GAS  /tmp/ccF7TYrA.s 			page 43


 482              		.loc 1 127 6 is_stmt 1 view .LVU114
 127:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 483              		.loc 1 127 18 is_stmt 0 view .LVU115
 484 0044 094B     		ldr	r3, .L19+12
 485 0046 1868     		ldr	r0, [r3]
 486 0048 0A21     		movs	r1, #10
 487 004a FFF7FEFF 		bl	__aeabi_uidiv
 488              	.LVL15:
 127:Src/main.c    ****     	TIM2->CR1 = TIM2->CR1 | 1;
 489              		.loc 1 127 16 view .LVU116
 490 004e 8023     		movs	r3, #128
 491 0050 DB05     		lsls	r3, r3, #23
 492 0052 D862     		str	r0, [r3, #44]
 128:Src/main.c    ****     }
 493              		.loc 1 128 6 is_stmt 1 view .LVU117
 128:Src/main.c    ****     }
 494              		.loc 1 128 22 is_stmt 0 view .LVU118
 495 0054 1A68     		ldr	r2, [r3]
 128:Src/main.c    ****     }
 496              		.loc 1 128 28 view .LVU119
 497 0056 0121     		movs	r1, #1
 498 0058 0A43     		orrs	r2, r1
 128:Src/main.c    ****     }
 499              		.loc 1 128 16 view .LVU120
 500 005a 1A60     		str	r2, [r3]
 131:Src/main.c    **** 
 501              		.loc 1 131 1 view .LVU121
 502 005c DAE7     		b	.L14
 503              	.L20:
 504 005e C046     		.align	2
 505              	.L19:
 506 0060 00200040 		.word	1073750016
 507 0064 00400140 		.word	1073823744
 508 0068 00000000 		.word	.LANCHOR0
 509 006c 00000000 		.word	.LANCHOR1
 510              		.cfi_endproc
 511              	.LFE38:
 513              		.section	.text._Error_Handler,"ax",%progbits
 514              		.align	1
 515              		.global	_Error_Handler
 516              		.syntax unified
 517              		.code	16
 518              		.thumb_func
 519              		.fpu softvfp
 521              	_Error_Handler:
 522              	.LFB49:
 677:Src/main.c    **** 
 678:Src/main.c    **** /* USER CODE BEGIN 4 */
 679:Src/main.c    **** 
 680:Src/main.c    **** /* USER CODE END 4 */
 681:Src/main.c    **** 
 682:Src/main.c    **** /**
 683:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 684:Src/main.c    ****   * @param  file: The file name as string.
 685:Src/main.c    ****   * @param  line: The line in file as a number.
 686:Src/main.c    ****   * @retval None
 687:Src/main.c    ****   */
ARM GAS  /tmp/ccF7TYrA.s 			page 44


 688:Src/main.c    **** void _Error_Handler(char *file, int line)
 689:Src/main.c    **** {
 523              		.loc 1 689 1 is_stmt 1 view -0
 524              		.cfi_startproc
 525              		@ Volatile: function does not return.
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 0, uses_anonymous_args = 0
 528              		@ link register save eliminated.
 529              	.LVL16:
 530              	.L22:
 690:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 691:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 692:Src/main.c    ****   while(1)
 531              		.loc 1 692 3 discriminator 1 view .LVU123
 693:Src/main.c    ****   {
 694:Src/main.c    ****   }
 532              		.loc 1 694 3 discriminator 1 view .LVU124
 533 0000 FEE7     		b	.L22
 534              		.cfi_endproc
 535              	.LFE49:
 537              		.section	.text.MX_DAC_Init,"ax",%progbits
 538              		.align	1
 539              		.syntax unified
 540              		.code	16
 541              		.thumb_func
 542              		.fpu softvfp
 544              	MX_DAC_Init:
 545              	.LFB47:
 620:Src/main.c    **** 
 546              		.loc 1 620 1 view -0
 547              		.cfi_startproc
 548              		@ args = 0, pretend = 0, frame = 8
 549              		@ frame_needed = 0, uses_anonymous_args = 0
 550 0000 00B5     		push	{lr}
 551              	.LCFI7:
 552              		.cfi_def_cfa_offset 4
 553              		.cfi_offset 14, -4
 554 0002 83B0     		sub	sp, sp, #12
 555              	.LCFI8:
 556              		.cfi_def_cfa_offset 16
 622:Src/main.c    **** 
 557              		.loc 1 622 3 view .LVU126
 626:Src/main.c    ****   if (HAL_DAC_Init(&hdac) != HAL_OK)
 558              		.loc 1 626 3 view .LVU127
 626:Src/main.c    ****   if (HAL_DAC_Init(&hdac) != HAL_OK)
 559              		.loc 1 626 17 is_stmt 0 view .LVU128
 560 0004 0D48     		ldr	r0, .L28
 561 0006 0E4B     		ldr	r3, .L28+4
 562 0008 0360     		str	r3, [r0]
 627:Src/main.c    ****   {
 563              		.loc 1 627 3 is_stmt 1 view .LVU129
 627:Src/main.c    ****   {
 564              		.loc 1 627 7 is_stmt 0 view .LVU130
 565 000a FFF7FEFF 		bl	HAL_DAC_Init
 566              	.LVL17:
 627:Src/main.c    ****   {
 567              		.loc 1 627 6 view .LVU131
ARM GAS  /tmp/ccF7TYrA.s 			page 45


 568 000e 0028     		cmp	r0, #0
 569 0010 0BD1     		bne	.L26
 634:Src/main.c    ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 570              		.loc 1 634 3 is_stmt 1 view .LVU132
 634:Src/main.c    ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 571              		.loc 1 634 23 is_stmt 0 view .LVU133
 572 0012 0023     		movs	r3, #0
 573 0014 0093     		str	r3, [sp]
 635:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 574              		.loc 1 635 3 is_stmt 1 view .LVU134
 635:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 575              		.loc 1 635 28 is_stmt 0 view .LVU135
 576 0016 0193     		str	r3, [sp, #4]
 636:Src/main.c    ****   {
 577              		.loc 1 636 3 is_stmt 1 view .LVU136
 636:Src/main.c    ****   {
 578              		.loc 1 636 7 is_stmt 0 view .LVU137
 579 0018 0022     		movs	r2, #0
 580 001a 6946     		mov	r1, sp
 581 001c 0748     		ldr	r0, .L28
 582 001e FFF7FEFF 		bl	HAL_DAC_ConfigChannel
 583              	.LVL18:
 636:Src/main.c    ****   {
 584              		.loc 1 636 6 view .LVU138
 585 0022 0028     		cmp	r0, #0
 586 0024 05D1     		bne	.L27
 641:Src/main.c    **** 
 587              		.loc 1 641 1 view .LVU139
 588 0026 03B0     		add	sp, sp, #12
 589              		@ sp needed
 590 0028 00BD     		pop	{pc}
 591              	.L26:
 629:Src/main.c    ****   }
 592              		.loc 1 629 5 is_stmt 1 view .LVU140
 593 002a 0649     		ldr	r1, .L28+8
 594 002c 0648     		ldr	r0, .L28+12
 595 002e FFF7FEFF 		bl	_Error_Handler
 596              	.LVL19:
 597              	.L27:
 638:Src/main.c    ****   }
 598              		.loc 1 638 5 view .LVU141
 599 0032 0649     		ldr	r1, .L28+16
 600 0034 0448     		ldr	r0, .L28+12
 601 0036 FFF7FEFF 		bl	_Error_Handler
 602              	.LVL20:
 603              	.L29:
 604 003a C046     		.align	2
 605              	.L28:
 606 003c 00000000 		.word	hdac
 607 0040 00740040 		.word	1073771520
 608 0044 75020000 		.word	629
 609 0048 00000000 		.word	.LC4
 610 004c 7E020000 		.word	638
 611              		.cfi_endproc
 612              	.LFE47:
 614              		.section	.text.MX_TIM14_Init,"ax",%progbits
 615              		.align	1
ARM GAS  /tmp/ccF7TYrA.s 			page 46


 616              		.syntax unified
 617              		.code	16
 618              		.thumb_func
 619              		.fpu softvfp
 621              	MX_TIM14_Init:
 622              	.LFB43:
 504:Src/main.c    ****   htim14.Instance = TIM14;
 623              		.loc 1 504 1 view -0
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 0
 626              		@ frame_needed = 0, uses_anonymous_args = 0
 627 0000 10B5     		push	{r4, lr}
 628              	.LCFI9:
 629              		.cfi_def_cfa_offset 8
 630              		.cfi_offset 4, -8
 631              		.cfi_offset 14, -4
 505:Src/main.c    ****   htim14.Init.Prescaler = 11;
 632              		.loc 1 505 3 view .LVU143
 505:Src/main.c    ****   htim14.Init.Prescaler = 11;
 633              		.loc 1 505 19 is_stmt 0 view .LVU144
 634 0002 0C48     		ldr	r0, .L33
 635 0004 0C4B     		ldr	r3, .L33+4
 636 0006 0360     		str	r3, [r0]
 506:Src/main.c    ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 637              		.loc 1 506 3 is_stmt 1 view .LVU145
 506:Src/main.c    ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 638              		.loc 1 506 25 is_stmt 0 view .LVU146
 639 0008 0B23     		movs	r3, #11
 640 000a 4360     		str	r3, [r0, #4]
 507:Src/main.c    ****   htim14.Init.Period = 1000;
 641              		.loc 1 507 3 is_stmt 1 view .LVU147
 507:Src/main.c    ****   htim14.Init.Period = 1000;
 642              		.loc 1 507 27 is_stmt 0 view .LVU148
 643 000c 0023     		movs	r3, #0
 644 000e 8360     		str	r3, [r0, #8]
 508:Src/main.c    ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 645              		.loc 1 508 3 is_stmt 1 view .LVU149
 508:Src/main.c    ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 646              		.loc 1 508 22 is_stmt 0 view .LVU150
 647 0010 FA22     		movs	r2, #250
 648 0012 9200     		lsls	r2, r2, #2
 649 0014 C260     		str	r2, [r0, #12]
 509:Src/main.c    ****   htim14.Init.RepetitionCounter = 0;
 650              		.loc 1 509 3 is_stmt 1 view .LVU151
 509:Src/main.c    ****   htim14.Init.RepetitionCounter = 0;
 651              		.loc 1 509 29 is_stmt 0 view .LVU152
 652 0016 E93A     		subs	r2, r2, #233
 653 0018 FF3A     		subs	r2, r2, #255
 654 001a 0261     		str	r2, [r0, #16]
 510:Src/main.c    ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 655              		.loc 1 510 3 is_stmt 1 view .LVU153
 510:Src/main.c    ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 656              		.loc 1 510 33 is_stmt 0 view .LVU154
 657 001c 4361     		str	r3, [r0, #20]
 511:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 658              		.loc 1 511 3 is_stmt 1 view .LVU155
 511:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
ARM GAS  /tmp/ccF7TYrA.s 			page 47


 659              		.loc 1 511 33 is_stmt 0 view .LVU156
 660 001e 8361     		str	r3, [r0, #24]
 512:Src/main.c    ****   {
 661              		.loc 1 512 3 is_stmt 1 view .LVU157
 512:Src/main.c    ****   {
 662              		.loc 1 512 7 is_stmt 0 view .LVU158
 663 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 664              	.LVL21:
 512:Src/main.c    ****   {
 665              		.loc 1 512 6 view .LVU159
 666 0024 0028     		cmp	r0, #0
 667 0026 00D1     		bne	.L32
 516:Src/main.c    **** 
 668              		.loc 1 516 1 view .LVU160
 669              		@ sp needed
 670 0028 10BD     		pop	{r4, pc}
 671              	.L32:
 514:Src/main.c    ****   }
 672              		.loc 1 514 5 is_stmt 1 view .LVU161
 673 002a 0449     		ldr	r1, .L33+8
 674 002c 0448     		ldr	r0, .L33+12
 675 002e FFF7FEFF 		bl	_Error_Handler
 676              	.LVL22:
 677              	.L34:
 678 0032 C046     		.align	2
 679              	.L33:
 680 0034 00000000 		.word	htim14
 681 0038 00200040 		.word	1073750016
 682 003c 02020000 		.word	514
 683 0040 00000000 		.word	.LC4
 684              		.cfi_endproc
 685              	.LFE43:
 687              		.section	.text.MX_TIM15_Init,"ax",%progbits
 688              		.align	1
 689              		.syntax unified
 690              		.code	16
 691              		.thumb_func
 692              		.fpu softvfp
 694              	MX_TIM15_Init:
 695              	.LFB44:
 520:Src/main.c    ****   htim15.Instance = TIM15;
 696              		.loc 1 520 1 view -0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 0
 699              		@ frame_needed = 0, uses_anonymous_args = 0
 700 0000 10B5     		push	{r4, lr}
 701              	.LCFI10:
 702              		.cfi_def_cfa_offset 8
 703              		.cfi_offset 4, -8
 704              		.cfi_offset 14, -4
 521:Src/main.c    ****   htim15.Init.Prescaler = 11;
 705              		.loc 1 521 3 view .LVU163
 521:Src/main.c    ****   htim15.Init.Prescaler = 11;
 706              		.loc 1 521 19 is_stmt 0 view .LVU164
 707 0002 0C48     		ldr	r0, .L38
 708 0004 0C4B     		ldr	r3, .L38+4
 709 0006 0360     		str	r3, [r0]
ARM GAS  /tmp/ccF7TYrA.s 			page 48


 522:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 710              		.loc 1 522 3 is_stmt 1 view .LVU165
 522:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 711              		.loc 1 522 25 is_stmt 0 view .LVU166
 712 0008 0B23     		movs	r3, #11
 713 000a 4360     		str	r3, [r0, #4]
 523:Src/main.c    ****   htim15.Init.Period = 1000;
 714              		.loc 1 523 3 is_stmt 1 view .LVU167
 523:Src/main.c    ****   htim15.Init.Period = 1000;
 715              		.loc 1 523 27 is_stmt 0 view .LVU168
 716 000c 0023     		movs	r3, #0
 717 000e 8360     		str	r3, [r0, #8]
 524:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 718              		.loc 1 524 3 is_stmt 1 view .LVU169
 524:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 719              		.loc 1 524 22 is_stmt 0 view .LVU170
 720 0010 FA22     		movs	r2, #250
 721 0012 9200     		lsls	r2, r2, #2
 722 0014 C260     		str	r2, [r0, #12]
 525:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 723              		.loc 1 525 3 is_stmt 1 view .LVU171
 525:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 724              		.loc 1 525 29 is_stmt 0 view .LVU172
 725 0016 E93A     		subs	r2, r2, #233
 726 0018 FF3A     		subs	r2, r2, #255
 727 001a 0261     		str	r2, [r0, #16]
 526:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 728              		.loc 1 526 3 is_stmt 1 view .LVU173
 526:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 729              		.loc 1 526 33 is_stmt 0 view .LVU174
 730 001c 4361     		str	r3, [r0, #20]
 527:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 731              		.loc 1 527 3 is_stmt 1 view .LVU175
 527:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 732              		.loc 1 527 33 is_stmt 0 view .LVU176
 733 001e 8361     		str	r3, [r0, #24]
 528:Src/main.c    ****   {
 734              		.loc 1 528 3 is_stmt 1 view .LVU177
 528:Src/main.c    ****   {
 735              		.loc 1 528 7 is_stmt 0 view .LVU178
 736 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 737              	.LVL23:
 528:Src/main.c    ****   {
 738              		.loc 1 528 6 view .LVU179
 739 0024 0028     		cmp	r0, #0
 740 0026 00D1     		bne	.L37
 532:Src/main.c    **** 
 741              		.loc 1 532 1 view .LVU180
 742              		@ sp needed
 743 0028 10BD     		pop	{r4, pc}
 744              	.L37:
 530:Src/main.c    ****   }
 745              		.loc 1 530 5 is_stmt 1 view .LVU181
 746 002a 0449     		ldr	r1, .L38+8
 747 002c 0448     		ldr	r0, .L38+12
 748 002e FFF7FEFF 		bl	_Error_Handler
 749              	.LVL24:
ARM GAS  /tmp/ccF7TYrA.s 			page 49


 750              	.L39:
 751 0032 C046     		.align	2
 752              	.L38:
 753 0034 00000000 		.word	htim15
 754 0038 00400140 		.word	1073823744
 755 003c 12020000 		.word	530
 756 0040 00000000 		.word	.LC4
 757              		.cfi_endproc
 758              	.LFE44:
 760              		.section	.text.USER_TIM1_Init,"ax",%progbits
 761              		.align	1
 762              		.syntax unified
 763              		.code	16
 764              		.thumb_func
 765              		.fpu softvfp
 767              	USER_TIM1_Init:
 768              	.LFB46:
 563:Src/main.c    ****   __HAL_RCC_TIM1_CLK_ENABLE();
 769              		.loc 1 563 1 view -0
 770              		.cfi_startproc
 771              		@ args = 0, pretend = 0, frame = 72
 772              		@ frame_needed = 0, uses_anonymous_args = 0
 773 0000 00B5     		push	{lr}
 774              	.LCFI11:
 775              		.cfi_def_cfa_offset 4
 776              		.cfi_offset 14, -4
 777 0002 93B0     		sub	sp, sp, #76
 778              	.LCFI12:
 779              		.cfi_def_cfa_offset 80
 564:Src/main.c    **** 
 780              		.loc 1 564 3 view .LVU183
 781              	.LBB29:
 564:Src/main.c    **** 
 782              		.loc 1 564 3 view .LVU184
 564:Src/main.c    **** 
 783              		.loc 1 564 3 view .LVU185
 784 0004 2C4A     		ldr	r2, .L49
 785 0006 9169     		ldr	r1, [r2, #24]
 786 0008 8020     		movs	r0, #128
 787 000a 0001     		lsls	r0, r0, #4
 788 000c 0143     		orrs	r1, r0
 789 000e 9161     		str	r1, [r2, #24]
 564:Src/main.c    **** 
 790              		.loc 1 564 3 view .LVU186
 791 0010 9369     		ldr	r3, [r2, #24]
 792 0012 0340     		ands	r3, r0
 793 0014 0193     		str	r3, [sp, #4]
 564:Src/main.c    **** 
 794              		.loc 1 564 3 view .LVU187
 795 0016 019B     		ldr	r3, [sp, #4]
 796              	.LBE29:
 566:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 797              		.loc 1 566 3 view .LVU188
 567:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
 798              		.loc 1 567 3 view .LVU189
 568:Src/main.c    **** 
 799              		.loc 1 568 3 view .LVU190
ARM GAS  /tmp/ccF7TYrA.s 			page 50


 570:Src/main.c    ****   htim1.Init.Prescaler = 0;
 800              		.loc 1 570 3 view .LVU191
 570:Src/main.c    ****   htim1.Init.Prescaler = 0;
 801              		.loc 1 570 18 is_stmt 0 view .LVU192
 802 0018 2848     		ldr	r0, .L49+4
 803 001a 294B     		ldr	r3, .L49+8
 804 001c 0360     		str	r3, [r0]
 571:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 805              		.loc 1 571 3 is_stmt 1 view .LVU193
 571:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 806              		.loc 1 571 24 is_stmt 0 view .LVU194
 807 001e 0023     		movs	r3, #0
 808 0020 4360     		str	r3, [r0, #4]
 572:Src/main.c    ****   htim1.Init.Period = 1024;
 809              		.loc 1 572 3 is_stmt 1 view .LVU195
 572:Src/main.c    ****   htim1.Init.Period = 1024;
 810              		.loc 1 572 26 is_stmt 0 view .LVU196
 811 0022 8360     		str	r3, [r0, #8]
 573:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 812              		.loc 1 573 3 is_stmt 1 view .LVU197
 573:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 813              		.loc 1 573 21 is_stmt 0 view .LVU198
 814 0024 8022     		movs	r2, #128
 815 0026 D200     		lsls	r2, r2, #3
 816 0028 C260     		str	r2, [r0, #12]
 574:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 817              		.loc 1 574 3 is_stmt 1 view .LVU199
 574:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 818              		.loc 1 574 28 is_stmt 0 view .LVU200
 819 002a 0361     		str	r3, [r0, #16]
 575:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 820              		.loc 1 575 3 is_stmt 1 view .LVU201
 575:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 821              		.loc 1 575 32 is_stmt 0 view .LVU202
 822 002c 4361     		str	r3, [r0, #20]
 576:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 823              		.loc 1 576 3 is_stmt 1 view .LVU203
 576:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 824              		.loc 1 576 32 is_stmt 0 view .LVU204
 825 002e 8033     		adds	r3, r3, #128
 826 0030 8361     		str	r3, [r0, #24]
 577:Src/main.c    ****   {
 827              		.loc 1 577 3 is_stmt 1 view .LVU205
 577:Src/main.c    ****   {
 828              		.loc 1 577 7 is_stmt 0 view .LVU206
 829 0032 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 830              	.LVL25:
 577:Src/main.c    ****   {
 831              		.loc 1 577 6 view .LVU207
 832 0036 0028     		cmp	r0, #0
 833 0038 2ED1     		bne	.L45
 582:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 834              		.loc 1 582 3 is_stmt 1 view .LVU208
 582:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 835              		.loc 1 582 37 is_stmt 0 view .LVU209
 836 003a 0023     		movs	r3, #0
 837 003c 1093     		str	r3, [sp, #64]
ARM GAS  /tmp/ccF7TYrA.s 			page 51


 583:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 838              		.loc 1 583 3 is_stmt 1 view .LVU210
 583:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 839              		.loc 1 583 33 is_stmt 0 view .LVU211
 840 003e 1193     		str	r3, [sp, #68]
 584:Src/main.c    ****   {
 841              		.loc 1 584 3 is_stmt 1 view .LVU212
 584:Src/main.c    ****   {
 842              		.loc 1 584 7 is_stmt 0 view .LVU213
 843 0040 10A9     		add	r1, sp, #64
 844 0042 1E48     		ldr	r0, .L49+4
 845 0044 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 846              	.LVL26:
 584:Src/main.c    ****   {
 847              		.loc 1 584 6 view .LVU214
 848 0048 0028     		cmp	r0, #0
 849 004a 29D1     		bne	.L46
 589:Src/main.c    ****   sConfigOC.Pulse = 100;
 850              		.loc 1 589 3 is_stmt 1 view .LVU215
 589:Src/main.c    ****   sConfigOC.Pulse = 100;
 851              		.loc 1 589 20 is_stmt 0 view .LVU216
 852 004c 6023     		movs	r3, #96
 853 004e 0993     		str	r3, [sp, #36]
 590:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 854              		.loc 1 590 3 is_stmt 1 view .LVU217
 590:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 855              		.loc 1 590 19 is_stmt 0 view .LVU218
 856 0050 0433     		adds	r3, r3, #4
 857 0052 0A93     		str	r3, [sp, #40]
 591:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 858              		.loc 1 591 3 is_stmt 1 view .LVU219
 591:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 859              		.loc 1 591 24 is_stmt 0 view .LVU220
 860 0054 0023     		movs	r3, #0
 861 0056 0B93     		str	r3, [sp, #44]
 592:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 862              		.loc 1 592 3 is_stmt 1 view .LVU221
 592:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 863              		.loc 1 592 25 is_stmt 0 view .LVU222
 864 0058 0C93     		str	r3, [sp, #48]
 593:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 865              		.loc 1 593 3 is_stmt 1 view .LVU223
 593:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 866              		.loc 1 593 24 is_stmt 0 view .LVU224
 867 005a 0D93     		str	r3, [sp, #52]
 594:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 868              		.loc 1 594 3 is_stmt 1 view .LVU225
 594:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 869              		.loc 1 594 25 is_stmt 0 view .LVU226
 870 005c 0E93     		str	r3, [sp, #56]
 595:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 871              		.loc 1 595 3 is_stmt 1 view .LVU227
 595:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 872              		.loc 1 595 26 is_stmt 0 view .LVU228
 873 005e 0F93     		str	r3, [sp, #60]
 596:Src/main.c    ****   {
 874              		.loc 1 596 3 is_stmt 1 view .LVU229
ARM GAS  /tmp/ccF7TYrA.s 			page 52


 596:Src/main.c    ****   {
 875              		.loc 1 596 7 is_stmt 0 view .LVU230
 876 0060 0022     		movs	r2, #0
 877 0062 09A9     		add	r1, sp, #36
 878 0064 1548     		ldr	r0, .L49+4
 879 0066 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 880              	.LVL27:
 596:Src/main.c    ****   {
 881              		.loc 1 596 6 view .LVU231
 882 006a 0028     		cmp	r0, #0
 883 006c 1CD1     		bne	.L47
 601:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 884              		.loc 1 601 3 is_stmt 1 view .LVU232
 601:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 885              		.loc 1 601 40 is_stmt 0 view .LVU233
 886 006e 0023     		movs	r3, #0
 887 0070 0293     		str	r3, [sp, #8]
 602:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 888              		.loc 1 602 3 is_stmt 1 view .LVU234
 602:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 889              		.loc 1 602 41 is_stmt 0 view .LVU235
 890 0072 0393     		str	r3, [sp, #12]
 603:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 891              		.loc 1 603 3 is_stmt 1 view .LVU236
 603:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 892              		.loc 1 603 34 is_stmt 0 view .LVU237
 893 0074 0493     		str	r3, [sp, #16]
 604:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 894              		.loc 1 604 3 is_stmt 1 view .LVU238
 604:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 895              		.loc 1 604 33 is_stmt 0 view .LVU239
 896 0076 0593     		str	r3, [sp, #20]
 605:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 897              		.loc 1 605 3 is_stmt 1 view .LVU240
 605:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 898              		.loc 1 605 35 is_stmt 0 view .LVU241
 899 0078 0693     		str	r3, [sp, #24]
 606:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 900              		.loc 1 606 3 is_stmt 1 view .LVU242
 606:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 901              		.loc 1 606 38 is_stmt 0 view .LVU243
 902 007a 8022     		movs	r2, #128
 903 007c 9201     		lsls	r2, r2, #6
 904 007e 0792     		str	r2, [sp, #28]
 607:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 905              		.loc 1 607 3 is_stmt 1 view .LVU244
 607:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 906              		.loc 1 607 40 is_stmt 0 view .LVU245
 907 0080 0893     		str	r3, [sp, #32]
 608:Src/main.c    ****   {
 908              		.loc 1 608 3 is_stmt 1 view .LVU246
 608:Src/main.c    ****   {
 909              		.loc 1 608 7 is_stmt 0 view .LVU247
 910 0082 02A9     		add	r1, sp, #8
 911 0084 0D48     		ldr	r0, .L49+4
 912 0086 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 913              	.LVL28:
ARM GAS  /tmp/ccF7TYrA.s 			page 53


 608:Src/main.c    ****   {
 914              		.loc 1 608 6 view .LVU248
 915 008a 0028     		cmp	r0, #0
 916 008c 10D1     		bne	.L48
 613:Src/main.c    **** 
 917              		.loc 1 613 3 is_stmt 1 view .LVU249
 918 008e 0B48     		ldr	r0, .L49+4
 919 0090 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 920              	.LVL29:
 615:Src/main.c    **** 
 921              		.loc 1 615 1 is_stmt 0 view .LVU250
 922 0094 13B0     		add	sp, sp, #76
 923              		@ sp needed
 924 0096 00BD     		pop	{pc}
 925              	.L45:
 579:Src/main.c    ****   }
 926              		.loc 1 579 5 is_stmt 1 view .LVU251
 927 0098 0A49     		ldr	r1, .L49+12
 928 009a 0B48     		ldr	r0, .L49+16
 929 009c FFF7FEFF 		bl	_Error_Handler
 930              	.LVL30:
 931              	.L46:
 586:Src/main.c    ****   }
 932              		.loc 1 586 5 view .LVU252
 933 00a0 0A49     		ldr	r1, .L49+20
 934 00a2 0948     		ldr	r0, .L49+16
 935 00a4 FFF7FEFF 		bl	_Error_Handler
 936              	.LVL31:
 937              	.L47:
 598:Src/main.c    ****   }
 938              		.loc 1 598 5 view .LVU253
 939 00a8 0949     		ldr	r1, .L49+24
 940 00aa 0748     		ldr	r0, .L49+16
 941 00ac FFF7FEFF 		bl	_Error_Handler
 942              	.LVL32:
 943              	.L48:
 610:Src/main.c    ****   }
 944              		.loc 1 610 5 view .LVU254
 945 00b0 0849     		ldr	r1, .L49+28
 946 00b2 0548     		ldr	r0, .L49+16
 947 00b4 FFF7FEFF 		bl	_Error_Handler
 948              	.LVL33:
 949              	.L50:
 950              		.align	2
 951              	.L49:
 952 00b8 00100240 		.word	1073876992
 953 00bc 00000000 		.word	htim1
 954 00c0 002C0140 		.word	1073818624
 955 00c4 43020000 		.word	579
 956 00c8 00000000 		.word	.LC4
 957 00cc 4A020000 		.word	586
 958 00d0 56020000 		.word	598
 959 00d4 62020000 		.word	610
 960              		.cfi_endproc
 961              	.LFE46:
 963              		.section	.text.MX_ADC_Init,"ax",%progbits
 964              		.align	1
ARM GAS  /tmp/ccF7TYrA.s 			page 54


 965              		.syntax unified
 966              		.code	16
 967              		.thumb_func
 968              		.fpu softvfp
 970              	MX_ADC_Init:
 971              	.LFB41:
 432:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 972              		.loc 1 432 1 view -0
 973              		.cfi_startproc
 974              		@ args = 0, pretend = 0, frame = 16
 975              		@ frame_needed = 0, uses_anonymous_args = 0
 976 0000 00B5     		push	{lr}
 977              	.LCFI13:
 978              		.cfi_def_cfa_offset 4
 979              		.cfi_offset 14, -4
 980 0002 85B0     		sub	sp, sp, #20
 981              	.LCFI14:
 982              		.cfi_def_cfa_offset 24
 433:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 983              		.loc 1 433 3 view .LVU256
 984              	.LBB30:
 433:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 985              		.loc 1 433 3 view .LVU257
 433:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 986              		.loc 1 433 3 view .LVU258
 987 0004 2A4A     		ldr	r2, .L60
 988 0006 9169     		ldr	r1, [r2, #24]
 989 0008 8020     		movs	r0, #128
 990 000a 8000     		lsls	r0, r0, #2
 991 000c 0143     		orrs	r1, r0
 992 000e 9161     		str	r1, [r2, #24]
 433:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 993              		.loc 1 433 3 view .LVU259
 994 0010 9369     		ldr	r3, [r2, #24]
 995 0012 0340     		ands	r3, r0
 996 0014 0093     		str	r3, [sp]
 433:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 997              		.loc 1 433 3 view .LVU260
 998 0016 009B     		ldr	r3, [sp]
 999              	.LBE30:
 434:Src/main.c    **** 
 1000              		.loc 1 434 3 view .LVU261
 438:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 1001              		.loc 1 438 3 view .LVU262
 438:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 1002              		.loc 1 438 17 is_stmt 0 view .LVU263
 1003 0018 2648     		ldr	r0, .L60+4
 1004 001a 274B     		ldr	r3, .L60+8
 1005 001c 0360     		str	r3, [r0]
 439:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 1006              		.loc 1 439 3 is_stmt 1 view .LVU264
 439:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 1007              		.loc 1 439 28 is_stmt 0 view .LVU265
 1008 001e 0023     		movs	r3, #0
 1009 0020 4360     		str	r3, [r0, #4]
 440:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1010              		.loc 1 440 3 is_stmt 1 view .LVU266
ARM GAS  /tmp/ccF7TYrA.s 			page 55


 440:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1011              		.loc 1 440 24 is_stmt 0 view .LVU267
 1012 0022 8360     		str	r3, [r0, #8]
 441:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 1013              		.loc 1 441 3 is_stmt 1 view .LVU268
 441:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 1014              		.loc 1 441 23 is_stmt 0 view .LVU269
 1015 0024 C360     		str	r3, [r0, #12]
 442:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 1016              		.loc 1 442 3 is_stmt 1 view .LVU270
 442:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 1017              		.loc 1 442 26 is_stmt 0 view .LVU271
 1018 0026 0122     		movs	r2, #1
 1019 0028 0261     		str	r2, [r0, #16]
 443:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 1020              		.loc 1 443 3 is_stmt 1 view .LVU272
 443:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 1021              		.loc 1 443 26 is_stmt 0 view .LVU273
 1022 002a 0821     		movs	r1, #8
 1023 002c 4161     		str	r1, [r0, #20]
 444:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 1024              		.loc 1 444 3 is_stmt 1 view .LVU274
 444:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 1025              		.loc 1 444 30 is_stmt 0 view .LVU275
 1026 002e 8361     		str	r3, [r0, #24]
 445:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 1027              		.loc 1 445 3 is_stmt 1 view .LVU276
 445:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 1028              		.loc 1 445 34 is_stmt 0 view .LVU277
 1029 0030 C361     		str	r3, [r0, #28]
 446:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 1030              		.loc 1 446 3 is_stmt 1 view .LVU278
 446:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 1031              		.loc 1 446 32 is_stmt 0 view .LVU279
 1032 0032 0362     		str	r3, [r0, #32]
 447:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 1033              		.loc 1 447 3 is_stmt 1 view .LVU280
 447:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 1034              		.loc 1 447 35 is_stmt 0 view .LVU281
 1035 0034 4362     		str	r3, [r0, #36]
 448:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 1036              		.loc 1 448 3 is_stmt 1 view .LVU282
 448:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 1037              		.loc 1 448 30 is_stmt 0 view .LVU283
 1038 0036 8362     		str	r3, [r0, #40]
 449:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 1039              		.loc 1 449 3 is_stmt 1 view .LVU284
 449:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 1040              		.loc 1 449 34 is_stmt 0 view .LVU285
 1041 0038 8023     		movs	r3, #128
 1042 003a DB00     		lsls	r3, r3, #3
 1043 003c C362     		str	r3, [r0, #44]
 450:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 1044              		.loc 1 450 3 is_stmt 1 view .LVU286
 450:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 1045              		.loc 1 450 35 is_stmt 0 view .LVU287
 1046 003e 0263     		str	r2, [r0, #48]
ARM GAS  /tmp/ccF7TYrA.s 			page 56


 451:Src/main.c    ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 1047              		.loc 1 451 3 is_stmt 1 view .LVU288
 451:Src/main.c    ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 1048              		.loc 1 451 21 is_stmt 0 view .LVU289
 1049 0040 4263     		str	r2, [r0, #52]
 452:Src/main.c    ****   {
 1050              		.loc 1 452 3 is_stmt 1 view .LVU290
 452:Src/main.c    ****   {
 1051              		.loc 1 452 7 is_stmt 0 view .LVU291
 1052 0042 FFF7FEFF 		bl	HAL_ADC_Init
 1053              	.LVL34:
 452:Src/main.c    ****   {
 1054              		.loc 1 452 6 view .LVU292
 1055 0046 0028     		cmp	r0, #0
 1056 0048 1ED1     		bne	.L56
 459:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 1057              		.loc 1 459 3 is_stmt 1 view .LVU293
 459:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 1058              		.loc 1 459 19 is_stmt 0 view .LVU294
 1059 004a 0023     		movs	r3, #0
 1060 004c 0193     		str	r3, [sp, #4]
 460:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 1061              		.loc 1 460 3 is_stmt 1 view .LVU295
 460:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 1062              		.loc 1 460 16 is_stmt 0 view .LVU296
 1063 004e 8023     		movs	r3, #128
 1064 0050 5B01     		lsls	r3, r3, #5
 1065 0052 0293     		str	r3, [sp, #8]
 461:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 1066              		.loc 1 461 3 is_stmt 1 view .LVU297
 461:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 1067              		.loc 1 461 24 is_stmt 0 view .LVU298
 1068 0054 0323     		movs	r3, #3
 1069 0056 0393     		str	r3, [sp, #12]
 462:Src/main.c    ****   {
 1070              		.loc 1 462 3 is_stmt 1 view .LVU299
 462:Src/main.c    ****   {
 1071              		.loc 1 462 7 is_stmt 0 view .LVU300
 1072 0058 01A9     		add	r1, sp, #4
 1073 005a 1648     		ldr	r0, .L60+4
 1074 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1075              	.LVL35:
 462:Src/main.c    ****   {
 1076              		.loc 1 462 6 view .LVU301
 1077 0060 0028     		cmp	r0, #0
 1078 0062 16D1     		bne	.L57
 469:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 1079              		.loc 1 469 3 is_stmt 1 view .LVU302
 469:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 1080              		.loc 1 469 19 is_stmt 0 view .LVU303
 1081 0064 0123     		movs	r3, #1
 1082 0066 0193     		str	r3, [sp, #4]
 470:Src/main.c    ****   {
 1083              		.loc 1 470 3 is_stmt 1 view .LVU304
 470:Src/main.c    ****   {
 1084              		.loc 1 470 7 is_stmt 0 view .LVU305
 1085 0068 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccF7TYrA.s 			page 57


 1086 006a 1248     		ldr	r0, .L60+4
 1087 006c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1088              	.LVL36:
 470:Src/main.c    ****   {
 1089              		.loc 1 470 6 view .LVU306
 1090 0070 0028     		cmp	r0, #0
 1091 0072 13D1     		bne	.L58
 477:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 1092              		.loc 1 477 3 is_stmt 1 view .LVU307
 477:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 1093              		.loc 1 477 19 is_stmt 0 view .LVU308
 1094 0074 0223     		movs	r3, #2
 1095 0076 0193     		str	r3, [sp, #4]
 478:Src/main.c    ****   {
 1096              		.loc 1 478 3 is_stmt 1 view .LVU309
 478:Src/main.c    ****   {
 1097              		.loc 1 478 7 is_stmt 0 view .LVU310
 1098 0078 01A9     		add	r1, sp, #4
 1099 007a 0E48     		ldr	r0, .L60+4
 1100 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1101              	.LVL37:
 478:Src/main.c    ****   {
 1102              		.loc 1 478 6 view .LVU311
 1103 0080 0028     		cmp	r0, #0
 1104 0082 10D1     		bne	.L59
 484:Src/main.c    **** 
 1105              		.loc 1 484 1 view .LVU312
 1106 0084 05B0     		add	sp, sp, #20
 1107              		@ sp needed
 1108 0086 00BD     		pop	{pc}
 1109              	.L56:
 454:Src/main.c    ****   }
 1110              		.loc 1 454 5 is_stmt 1 view .LVU313
 1111 0088 E321     		movs	r1, #227
 1112 008a 4900     		lsls	r1, r1, #1
 1113 008c 0B48     		ldr	r0, .L60+12
 1114 008e FFF7FEFF 		bl	_Error_Handler
 1115              	.LVL38:
 1116              	.L57:
 464:Src/main.c    ****   }
 1117              		.loc 1 464 5 view .LVU314
 1118 0092 E821     		movs	r1, #232
 1119 0094 4900     		lsls	r1, r1, #1
 1120 0096 0948     		ldr	r0, .L60+12
 1121 0098 FFF7FEFF 		bl	_Error_Handler
 1122              	.LVL39:
 1123              	.L58:
 472:Src/main.c    ****   }
 1124              		.loc 1 472 5 view .LVU315
 1125 009c EC21     		movs	r1, #236
 1126 009e 4900     		lsls	r1, r1, #1
 1127 00a0 0648     		ldr	r0, .L60+12
 1128 00a2 FFF7FEFF 		bl	_Error_Handler
 1129              	.LVL40:
 1130              	.L59:
 480:Src/main.c    ****   }
 1131              		.loc 1 480 5 view .LVU316
ARM GAS  /tmp/ccF7TYrA.s 			page 58


 1132 00a6 F021     		movs	r1, #240
 1133 00a8 4900     		lsls	r1, r1, #1
 1134 00aa 0448     		ldr	r0, .L60+12
 1135 00ac FFF7FEFF 		bl	_Error_Handler
 1136              	.LVL41:
 1137              	.L61:
 1138              		.align	2
 1139              	.L60:
 1140 00b0 00100240 		.word	1073876992
 1141 00b4 00000000 		.word	hadc
 1142 00b8 00240140 		.word	1073816576
 1143 00bc 00000000 		.word	.LC4
 1144              		.cfi_endproc
 1145              	.LFE41:
 1147              		.section	.text.SystemClock_Config,"ax",%progbits
 1148              		.align	1
 1149              		.global	SystemClock_Config
 1150              		.syntax unified
 1151              		.code	16
 1152              		.thumb_func
 1153              		.fpu softvfp
 1155              	SystemClock_Config:
 1156              	.LFB40:
 379:Src/main.c    **** 
 1157              		.loc 1 379 1 view -0
 1158              		.cfi_startproc
 1159              		@ args = 0, pretend = 0, frame = 96
 1160              		@ frame_needed = 0, uses_anonymous_args = 0
 1161 0000 00B5     		push	{lr}
 1162              	.LCFI15:
 1163              		.cfi_def_cfa_offset 4
 1164              		.cfi_offset 14, -4
 1165 0002 99B0     		sub	sp, sp, #100
 1166              	.LCFI16:
 1167              		.cfi_def_cfa_offset 104
 381:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 1168              		.loc 1 381 3 view .LVU318
 382:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 1169              		.loc 1 382 3 view .LVU319
 383:Src/main.c    **** 
 1170              		.loc 1 383 3 view .LVU320
 387:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 1171              		.loc 1 387 3 view .LVU321
 387:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 1172              		.loc 1 387 36 is_stmt 0 view .LVU322
 1173 0004 3023     		movs	r3, #48
 1174 0006 0B93     		str	r3, [sp, #44]
 388:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 1175              		.loc 1 388 3 is_stmt 1 view .LVU323
 388:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 1176              		.loc 1 388 32 is_stmt 0 view .LVU324
 1177 0008 2F3B     		subs	r3, r3, #47
 1178 000a 1393     		str	r3, [sp, #76]
 389:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 1179              		.loc 1 389 3 is_stmt 1 view .LVU325
 389:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 1180              		.loc 1 389 32 is_stmt 0 view .LVU326
ARM GAS  /tmp/ccF7TYrA.s 			page 59


 1181 000c 1093     		str	r3, [sp, #64]
 390:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1182              		.loc 1 390 3 is_stmt 1 view .LVU327
 390:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1183              		.loc 1 390 43 is_stmt 0 view .LVU328
 1184 000e 0F33     		adds	r3, r3, #15
 1185 0010 1193     		str	r3, [sp, #68]
 391:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1186              		.loc 1 391 3 is_stmt 1 view .LVU329
 391:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1187              		.loc 1 391 34 is_stmt 0 view .LVU330
 1188 0012 0023     		movs	r3, #0
 1189 0014 1493     		str	r3, [sp, #80]
 392:Src/main.c    ****   {
 1190              		.loc 1 392 3 is_stmt 1 view .LVU331
 392:Src/main.c    ****   {
 1191              		.loc 1 392 7 is_stmt 0 view .LVU332
 1192 0016 0BA8     		add	r0, sp, #44
 1193 0018 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1194              	.LVL42:
 392:Src/main.c    ****   {
 1195              		.loc 1 392 6 view .LVU333
 1196 001c 0028     		cmp	r0, #0
 1197 001e 29D1     		bne	.L66
 399:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 1198              		.loc 1 399 3 is_stmt 1 view .LVU334
 399:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 1199              		.loc 1 399 31 is_stmt 0 view .LVU335
 1200 0020 0723     		movs	r3, #7
 1201 0022 0793     		str	r3, [sp, #28]
 401:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1202              		.loc 1 401 3 is_stmt 1 view .LVU336
 401:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1203              		.loc 1 401 34 is_stmt 0 view .LVU337
 1204 0024 043B     		subs	r3, r3, #4
 1205 0026 0893     		str	r3, [sp, #32]
 402:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1206              		.loc 1 402 3 is_stmt 1 view .LVU338
 402:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1207              		.loc 1 402 35 is_stmt 0 view .LVU339
 1208 0028 0023     		movs	r3, #0
 1209 002a 0993     		str	r3, [sp, #36]
 403:Src/main.c    **** 
 1210              		.loc 1 403 3 is_stmt 1 view .LVU340
 403:Src/main.c    **** 
 1211              		.loc 1 403 36 is_stmt 0 view .LVU341
 1212 002c 0A93     		str	r3, [sp, #40]
 405:Src/main.c    ****   {
 1213              		.loc 1 405 3 is_stmt 1 view .LVU342
 405:Src/main.c    ****   {
 1214              		.loc 1 405 7 is_stmt 0 view .LVU343
 1215 002e 0121     		movs	r1, #1
 1216 0030 07A8     		add	r0, sp, #28
 1217 0032 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1218              	.LVL43:
 405:Src/main.c    ****   {
 1219              		.loc 1 405 6 view .LVU344
ARM GAS  /tmp/ccF7TYrA.s 			page 60


 1220 0036 0028     		cmp	r0, #0
 1221 0038 21D1     		bne	.L67
 410:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 1222              		.loc 1 410 3 is_stmt 1 view .LVU345
 410:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 1223              		.loc 1 410 38 is_stmt 0 view .LVU346
 1224 003a 8023     		movs	r3, #128
 1225 003c 9B02     		lsls	r3, r3, #10
 1226 003e 0093     		str	r3, [sp]
 411:Src/main.c    **** 
 1227              		.loc 1 411 3 is_stmt 1 view .LVU347
 411:Src/main.c    **** 
 1228              		.loc 1 411 35 is_stmt 0 view .LVU348
 1229 0040 0023     		movs	r3, #0
 1230 0042 0693     		str	r3, [sp, #24]
 413:Src/main.c    ****   {
 1231              		.loc 1 413 3 is_stmt 1 view .LVU349
 413:Src/main.c    ****   {
 1232              		.loc 1 413 7 is_stmt 0 view .LVU350
 1233 0044 6846     		mov	r0, sp
 1234 0046 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1235              	.LVL44:
 413:Src/main.c    ****   {
 1236              		.loc 1 413 6 view .LVU351
 1237 004a 0028     		cmp	r0, #0
 1238 004c 1CD1     		bne	.L68
 420:Src/main.c    **** 
 1239              		.loc 1 420 3 is_stmt 1 view .LVU352
 420:Src/main.c    **** 
 1240              		.loc 1 420 22 is_stmt 0 view .LVU353
 1241 004e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1242              	.LVL45:
 420:Src/main.c    **** 
 1243              		.loc 1 420 3 view .LVU354
 1244 0052 FA21     		movs	r1, #250
 1245 0054 8900     		lsls	r1, r1, #2
 1246 0056 FFF7FEFF 		bl	__aeabi_uidiv
 1247              	.LVL46:
 1248 005a FFF7FEFF 		bl	HAL_SYSTICK_Config
 1249              	.LVL47:
 424:Src/main.c    **** 
 1250              		.loc 1 424 3 is_stmt 1 view .LVU355
 1251 005e 0420     		movs	r0, #4
 1252 0060 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1253              	.LVL48:
 427:Src/main.c    **** }
 1254              		.loc 1 427 3 view .LVU356
 1255 0064 0120     		movs	r0, #1
 1256 0066 0022     		movs	r2, #0
 1257 0068 0021     		movs	r1, #0
 1258 006a 4042     		rsbs	r0, r0, #0
 1259 006c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1260              	.LVL49:
 428:Src/main.c    **** 
 1261              		.loc 1 428 1 is_stmt 0 view .LVU357
 1262 0070 19B0     		add	sp, sp, #100
 1263              		@ sp needed
ARM GAS  /tmp/ccF7TYrA.s 			page 61


 1264 0072 00BD     		pop	{pc}
 1265              	.L66:
 394:Src/main.c    ****   }
 1266              		.loc 1 394 5 is_stmt 1 view .LVU358
 1267 0074 C521     		movs	r1, #197
 1268 0076 4900     		lsls	r1, r1, #1
 1269 0078 0648     		ldr	r0, .L69
 1270 007a FFF7FEFF 		bl	_Error_Handler
 1271              	.LVL50:
 1272              	.L67:
 407:Src/main.c    ****   }
 1273              		.loc 1 407 5 view .LVU359
 1274 007e 9821     		movs	r1, #152
 1275 0080 FF31     		adds	r1, r1, #255
 1276 0082 0448     		ldr	r0, .L69
 1277 0084 FFF7FEFF 		bl	_Error_Handler
 1278              	.LVL51:
 1279              	.L68:
 415:Src/main.c    ****   }
 1280              		.loc 1 415 5 view .LVU360
 1281 0088 A021     		movs	r1, #160
 1282 008a FF31     		adds	r1, r1, #255
 1283 008c 0148     		ldr	r0, .L69
 1284 008e FFF7FEFF 		bl	_Error_Handler
 1285              	.LVL52:
 1286              	.L70:
 1287 0092 C046     		.align	2
 1288              	.L69:
 1289 0094 00000000 		.word	.LC4
 1290              		.cfi_endproc
 1291              	.LFE40:
 1293              		.global	__aeabi_ui2f
 1294              		.global	__aeabi_fmul
 1295              		.global	__aeabi_fcmpgt
 1296              		.global	__aeabi_i2d
 1297              		.global	__aeabi_ddiv
 1298              		.global	__aeabi_dmul
 1299              		.global	__aeabi_d2uiz
 1300              		.section	.text.main,"ax",%progbits
 1301              		.align	1
 1302              		.global	main
 1303              		.syntax unified
 1304              		.code	16
 1305              		.thumb_func
 1306              		.fpu softvfp
 1308              	main:
 1309              	.LFB39:
 156:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1310              		.loc 1 156 1 view -0
 1311              		.cfi_startproc
 1312              		@ args = 0, pretend = 0, frame = 0
 1313              		@ frame_needed = 0, uses_anonymous_args = 0
 1314 0000 70B5     		push	{r4, r5, r6, lr}
 1315              	.LCFI17:
 1316              		.cfi_def_cfa_offset 16
 1317              		.cfi_offset 4, -16
 1318              		.cfi_offset 5, -12
ARM GAS  /tmp/ccF7TYrA.s 			page 62


 1319              		.cfi_offset 6, -8
 1320              		.cfi_offset 14, -4
 164:Src/main.c    **** 
 1321              		.loc 1 164 3 view .LVU362
 1322 0002 FFF7FEFF 		bl	HAL_Init
 1323              	.LVL53:
 171:Src/main.c    **** 
 1324              		.loc 1 171 3 view .LVU363
 1325 0006 FFF7FEFF 		bl	SystemClock_Config
 1326              	.LVL54:
 178:Src/main.c    **** 	MX_DAC_Init();
 1327              		.loc 1 178 3 view .LVU364
 1328 000a FFF7FEFF 		bl	MX_GPIO_Init
 1329              	.LVL55:
 179:Src/main.c    **** 
 1330              		.loc 1 179 2 view .LVU365
 1331 000e FFF7FEFF 		bl	MX_DAC_Init
 1332              	.LVL56:
 181:Src/main.c    **** 	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 1333              		.loc 1 181 2 view .LVU366
 1334 0012 CF4C     		ldr	r4, .L107
 1335 0014 0021     		movs	r1, #0
 1336 0016 2000     		movs	r0, r4
 1337 0018 FFF7FEFF 		bl	HAL_DAC_Start
 1338              	.LVL57:
 182:Src/main.c    **** 
 1339              		.loc 1 182 2 view .LVU367
 1340 001c 8023     		movs	r3, #128
 1341 001e 1B01     		lsls	r3, r3, #4
 1342 0020 0022     		movs	r2, #0
 1343 0022 0021     		movs	r1, #0
 1344 0024 2000     		movs	r0, r4
 1345 0026 FFF7FEFF 		bl	HAL_DAC_SetValue
 1346              	.LVL58:
 184:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim14);
 1347              		.loc 1 184 2 view .LVU368
 1348 002a FFF7FEFF 		bl	MX_TIM14_Init
 1349              	.LVL59:
 185:Src/main.c    **** 	TIM14->CR1 &= ~(1UL);
 1350              		.loc 1 185 2 view .LVU369
 1351 002e C948     		ldr	r0, .L107+4
 1352 0030 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1353              	.LVL60:
 186:Src/main.c    **** 
 1354              		.loc 1 186 2 view .LVU370
 186:Src/main.c    **** 
 1355              		.loc 1 186 13 is_stmt 0 view .LVU371
 1356 0034 C84A     		ldr	r2, .L107+8
 1357 0036 1368     		ldr	r3, [r2]
 1358 0038 0124     		movs	r4, #1
 1359 003a A343     		bics	r3, r4
 1360 003c 1360     		str	r3, [r2]
 188:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim15);
 1361              		.loc 1 188 2 is_stmt 1 view .LVU372
 1362 003e FFF7FEFF 		bl	MX_TIM15_Init
 1363              	.LVL61:
 189:Src/main.c    **** 	TIM15->CR1 &= ~(1UL);
ARM GAS  /tmp/ccF7TYrA.s 			page 63


 1364              		.loc 1 189 2 view .LVU373
 1365 0042 C648     		ldr	r0, .L107+12
 1366 0044 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1367              	.LVL62:
 190:Src/main.c    **** 
 1368              		.loc 1 190 2 view .LVU374
 190:Src/main.c    **** 
 1369              		.loc 1 190 13 is_stmt 0 view .LVU375
 1370 0048 C54A     		ldr	r2, .L107+16
 1371 004a 1368     		ldr	r3, [r2]
 1372 004c A343     		bics	r3, r4
 1373 004e 1360     		str	r3, [r2]
 192:Src/main.c    **** 
 1374              		.loc 1 192 2 is_stmt 1 view .LVU376
 1375 0050 FFF7FEFF 		bl	USER_TIM1_Init
 1376              	.LVL63:
 195:Src/main.c    **** 
 1377              		.loc 1 195 3 view .LVU377
 1378 0054 0021     		movs	r1, #0
 1379 0056 C348     		ldr	r0, .L107+20
 1380 0058 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1381              	.LVL64:
 199:Src/main.c    **** 
 1382              		.loc 1 199 3 view .LVU378
 1383 005c FFF7FEFF 		bl	USER_TIM2_Init
 1384              	.LVL65:
 201:Src/main.c    **** 	HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 1385              		.loc 1 201 2 view .LVU379
 1386 0060 C14C     		ldr	r4, .L107+24
 1387 0062 2000     		movs	r0, r4
 1388 0064 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1389              	.LVL66:
 202:Src/main.c    **** 
 1390              		.loc 1 202 2 view .LVU380
 1391 0068 0421     		movs	r1, #4
 1392 006a 2000     		movs	r0, r4
 1393 006c FFF7FEFF 		bl	HAL_TIM_OnePulse_Start
 1394              	.LVL67:
 204:Src/main.c    ****   MX_ADC_Init();
 1395              		.loc 1 204 3 view .LVU381
 1396 0070 FFF7FEFF 		bl	MX_DMA_Init
 1397              	.LVL68:
 205:Src/main.c    **** 
 1398              		.loc 1 205 3 view .LVU382
 1399 0074 FFF7FEFF 		bl	MX_ADC_Init
 1400              	.LVL69:
 207:Src/main.c    **** 
 1401              		.loc 1 207 3 view .LVU383
 1402 0078 0322     		movs	r2, #3
 1403 007a BC49     		ldr	r1, .L107+28
 1404 007c BC48     		ldr	r0, .L107+32
 1405 007e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1406              	.LVL70:
 216:Src/main.c    **** #endif
 1407              		.loc 1 216 3 view .LVU384
 1408 0082 FFF7FEFF 		bl	MX_USB_MIDI_INIT
 1409              	.LVL71:
ARM GAS  /tmp/ccF7TYrA.s 			page 64


 220:Src/main.c    **** 	  while(1){
 1410              		.loc 1 220 3 view .LVU385
 220:Src/main.c    **** 	  while(1){
 1411              		.loc 1 220 20 is_stmt 0 view .LVU386
 1412 0086 FFF7FEFF 		bl	midiInit
 1413              	.LVL72:
 220:Src/main.c    **** 	  while(1){
 1414              		.loc 1 220 5 view .LVU387
 1415 008a 0028     		cmp	r0, #0
 1416 008c 16D1     		bne	.L72
 1417              	.L73:
 221:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 1418              		.loc 1 221 4 is_stmt 1 discriminator 1 view .LVU388
 222:Src/main.c    **** 		  HAL_Delay(500);
 1419              		.loc 1 222 5 discriminator 1 view .LVU389
 1420 008e 8026     		movs	r6, #128
 1421 0090 3602     		lsls	r6, r6, #8
 1422 0092 9025     		movs	r5, #144
 1423 0094 ED05     		lsls	r5, r5, #23
 1424 0096 0122     		movs	r2, #1
 1425 0098 3100     		movs	r1, r6
 1426 009a 2800     		movs	r0, r5
 1427 009c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1428              	.LVL73:
 223:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 1429              		.loc 1 223 5 discriminator 1 view .LVU390
 1430 00a0 FA24     		movs	r4, #250
 1431 00a2 6400     		lsls	r4, r4, #1
 1432 00a4 2000     		movs	r0, r4
 1433 00a6 FFF7FEFF 		bl	HAL_Delay
 1434              	.LVL74:
 224:Src/main.c    **** 		  HAL_Delay(500);
 1435              		.loc 1 224 5 discriminator 1 view .LVU391
 1436 00aa 0022     		movs	r2, #0
 1437 00ac 3100     		movs	r1, r6
 1438 00ae 2800     		movs	r0, r5
 1439 00b0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1440              	.LVL75:
 225:Src/main.c    **** 	  }
 1441              		.loc 1 225 5 discriminator 1 view .LVU392
 1442 00b4 2000     		movs	r0, r4
 1443 00b6 FFF7FEFF 		bl	HAL_Delay
 1444              	.LVL76:
 1445 00ba E8E7     		b	.L73
 1446              	.L72:
 230:Src/main.c    **** 	  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 1447              		.loc 1 230 3 view .LVU393
 231:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 1448              		.loc 1 231 4 view .LVU394
 231:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 1449              		.loc 1 231 44 is_stmt 0 view .LVU395
 1450 00bc AD4A     		ldr	r2, .L107+36
 1451 00be FE23     		movs	r3, #254
 1452 00c0 5B00     		lsls	r3, r3, #1
 1453 00c2 D35C     		ldrb	r3, [r2, r3]
 231:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 1454              		.loc 1 231 6 view .LVU396
ARM GAS  /tmp/ccF7TYrA.s 			page 65


 1455 00c4 032B     		cmp	r3, #3
 1456 00c6 07D0     		beq	.L97
 235:Src/main.c    **** 	  }
 1457              		.loc 1 235 5 is_stmt 1 view .LVU397
 1458 00c8 8021     		movs	r1, #128
 1459 00ca 9020     		movs	r0, #144
 1460 00cc 0022     		movs	r2, #0
 1461 00ce 0902     		lsls	r1, r1, #8
 1462 00d0 C005     		lsls	r0, r0, #23
 1463 00d2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1464              	.LVL77:
 231:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 1465              		.loc 1 231 6 is_stmt 0 view .LVU398
 1466 00d6 F1E7     		b	.L72
 1467              	.L97:
 232:Src/main.c    **** 		  break;
 1468              		.loc 1 232 5 is_stmt 1 view .LVU399
 1469 00d8 8021     		movs	r1, #128
 1470 00da 9020     		movs	r0, #144
 1471 00dc 0122     		movs	r2, #1
 1472 00de 0902     		lsls	r1, r1, #8
 1473 00e0 C005     		lsls	r0, r0, #23
 1474 00e2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1475              	.LVL78:
 233:Src/main.c    **** 	  }else{
 1476              		.loc 1 233 5 view .LVU400
 1477 00e6 7CE0     		b	.L75
 1478              	.L103:
 1479              	.LBB31:
 267:Src/main.c    ****     }
 1480              		.loc 1 267 7 view .LVU401
 1481 00e8 FFF7FEFF 		bl	dfu_otter_bootloader
 1482              	.LVL79:
 1483              	.L96:
 275:Src/main.c    ****     }
 1484              		.loc 1 275 7 view .LVU402
 1485 00ec 8021     		movs	r1, #128
 1486 00ee 9020     		movs	r0, #144
 1487 00f0 0122     		movs	r2, #1
 1488 00f2 0902     		lsls	r1, r1, #8
 1489 00f4 C005     		lsls	r0, r0, #23
 1490 00f6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1491              	.LVL80:
 1492 00fa 92E0     		b	.L79
 1493              	.LVL81:
 1494              	.L81:
 1495              	.LBB32:
 286:Src/main.c    **** 	          curTone1 = freqs[i];
 1496              		.loc 1 286 13 view .LVU403
 286:Src/main.c    **** 	          curTone1 = freqs[i];
 1497              		.loc 1 286 26 is_stmt 0 view .LVU404
 1498 00fc 9E49     		ldr	r1, .L107+40
 1499 00fe 0988     		ldrh	r1, [r1]
 286:Src/main.c    **** 	          curTone1 = freqs[i];
 1500              		.loc 1 286 15 view .LVU405
 1501 0100 8A42     		cmp	r2, r1
 1502 0102 01D9     		bls	.L82
ARM GAS  /tmp/ccF7TYrA.s 			page 66


 287:Src/main.c    **** 	      }
 1503              		.loc 1 287 12 is_stmt 1 view .LVU406
 287:Src/main.c    **** 	      }
 1504              		.loc 1 287 21 is_stmt 0 view .LVU407
 1505 0104 9C49     		ldr	r1, .L107+40
 1506 0106 0A80     		strh	r2, [r1]
 1507              	.L82:
 281:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 1508              		.loc 1 281 29 discriminator 2 view .LVU408
 1509 0108 0133     		adds	r3, r3, #1
 1510              	.LVL82:
 1511              	.L80:
 281:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 1512              		.loc 1 281 4 discriminator 1 view .LVU409
 1513 010a 0F2B     		cmp	r3, #15
 1514 010c 0BDC     		bgt	.L98
 282:Src/main.c    **** 	          curTone1 = curTone0;
 1515              		.loc 1 282 8 is_stmt 1 view .LVU410
 282:Src/main.c    **** 	          curTone1 = curTone0;
 1516              		.loc 1 282 17 is_stmt 0 view .LVU411
 1517 010e 5A00     		lsls	r2, r3, #1
 1518 0110 9A49     		ldr	r1, .L107+44
 1519 0112 525A     		ldrh	r2, [r2, r1]
 282:Src/main.c    **** 	          curTone1 = curTone0;
 1520              		.loc 1 282 21 view .LVU412
 1521 0114 9A49     		ldr	r1, .L107+48
 1522 0116 0988     		ldrh	r1, [r1]
 282:Src/main.c    **** 	          curTone1 = curTone0;
 1523              		.loc 1 282 10 view .LVU413
 1524 0118 8A42     		cmp	r2, r1
 1525 011a EFD9     		bls	.L81
 283:Src/main.c    **** 	          curTone0 = freqs[i];
 1526              		.loc 1 283 12 is_stmt 1 view .LVU414
 283:Src/main.c    **** 	          curTone0 = freqs[i];
 1527              		.loc 1 283 21 is_stmt 0 view .LVU415
 1528 011c 9648     		ldr	r0, .L107+40
 1529 011e 0180     		strh	r1, [r0]
 284:Src/main.c    **** 	      }
 1530              		.loc 1 284 12 is_stmt 1 view .LVU416
 284:Src/main.c    **** 	      }
 1531              		.loc 1 284 21 is_stmt 0 view .LVU417
 1532 0120 9749     		ldr	r1, .L107+48
 1533 0122 0A80     		strh	r2, [r1]
 1534 0124 F0E7     		b	.L82
 1535              	.L98:
 1536              	.LBE32:
 291:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 1537              		.loc 1 291 3 is_stmt 1 view .LVU418
 291:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 1538              		.loc 1 291 16 is_stmt 0 view .LVU419
 1539 0126 964B     		ldr	r3, .L107+48
 1540              	.LVL83:
 291:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 1541              		.loc 1 291 16 view .LVU420
 1542 0128 1988     		ldrh	r1, [r3]
 291:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 1543              		.loc 1 291 6 view .LVU421
ARM GAS  /tmp/ccF7TYrA.s 			page 67


 1544 012a 1429     		cmp	r1, #20
 1545 012c 03D9     		bls	.L84
 291:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 1546              		.loc 1 291 33 discriminator 1 view .LVU422
 1547 012e 954B     		ldr	r3, .L107+52
 1548 0130 1B88     		ldrh	r3, [r3]
 291:Src/main.c    **** 			curPeriode0 = (uint32_t)1000000 / (uint32_t)(curTone0);
 1549              		.loc 1 291 21 discriminator 1 view .LVU423
 1550 0132 9942     		cmp	r1, r3
 1551 0134 14D1     		bne	.L99
 1552              	.L84:
 300:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1553              		.loc 1 300 10 is_stmt 1 view .LVU424
 300:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1554              		.loc 1 300 13 is_stmt 0 view .LVU425
 1555 0136 1329     		cmp	r1, #19
 1556 0138 2ED8     		bhi	.L85
 300:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1557              		.loc 1 300 40 discriminator 1 view .LVU426
 1558 013a 924B     		ldr	r3, .L107+52
 1559 013c 1B88     		ldrh	r3, [r3]
 300:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1560              		.loc 1 300 28 discriminator 1 view .LVU427
 1561 013e 9942     		cmp	r1, r3
 1562 0140 2AD0     		beq	.L85
 301:Src/main.c    ****       curPeriode0 = 0;
 1563              		.loc 1 301 4 is_stmt 1 view .LVU428
 301:Src/main.c    ****       curPeriode0 = 0;
 1564              		.loc 1 301 15 is_stmt 0 view .LVU429
 1565 0142 854A     		ldr	r2, .L107+8
 1566 0144 1368     		ldr	r3, [r2]
 1567 0146 0121     		movs	r1, #1
 1568 0148 8B43     		bics	r3, r1
 1569 014a 1360     		str	r3, [r2]
 302:Src/main.c    **** 
 1570              		.loc 1 302 7 is_stmt 1 view .LVU430
 302:Src/main.c    **** 
 1571              		.loc 1 302 19 is_stmt 0 view .LVU431
 1572 014c 8E4B     		ldr	r3, .L107+56
 1573 014e 0022     		movs	r2, #0
 1574 0150 1A60     		str	r2, [r3]
 304:Src/main.c    **** 		}
 1575              		.loc 1 304 4 is_stmt 1 view .LVU432
 1576 0152 7F31     		adds	r1, r1, #127
 1577 0154 9020     		movs	r0, #144
 1578 0156 C900     		lsls	r1, r1, #3
 1579 0158 C005     		lsls	r0, r0, #23
 1580 015a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1581              	.LVL84:
 1582 015e 1BE0     		b	.L85
 1583              	.L99:
 292:Src/main.c    **** 			TIM14->CNT = 0;
 1584              		.loc 1 292 4 view .LVU433
 292:Src/main.c    **** 			TIM14->CNT = 0;
 1585              		.loc 1 292 36 is_stmt 0 view .LVU434
 1586 0160 8A48     		ldr	r0, .L107+60
 1587 0162 FFF7FEFF 		bl	__aeabi_uidiv
ARM GAS  /tmp/ccF7TYrA.s 			page 68


 1588              	.LVL85:
 292:Src/main.c    **** 			TIM14->CNT = 0;
 1589              		.loc 1 292 16 view .LVU435
 1590 0166 884B     		ldr	r3, .L107+56
 1591 0168 1860     		str	r0, [r3]
 293:Src/main.c    **** 			TIM14->ARR = curPeriode0;
 1592              		.loc 1 293 4 is_stmt 1 view .LVU436
 293:Src/main.c    **** 			TIM14->ARR = curPeriode0;
 1593              		.loc 1 293 15 is_stmt 0 view .LVU437
 1594 016a 7B4B     		ldr	r3, .L107+8
 1595 016c 0022     		movs	r2, #0
 1596 016e 5A62     		str	r2, [r3, #36]
 294:Src/main.c    **** 			TIM14->CR1 = TIM14->CR1 | 1;
 1597              		.loc 1 294 4 is_stmt 1 view .LVU438
 294:Src/main.c    **** 			TIM14->CR1 = TIM14->CR1 | 1;
 1598              		.loc 1 294 15 is_stmt 0 view .LVU439
 1599 0170 D862     		str	r0, [r3, #44]
 295:Src/main.c    **** 			lastTone0 = curTone0;
 1600              		.loc 1 295 4 is_stmt 1 view .LVU440
 295:Src/main.c    **** 			lastTone0 = curTone0;
 1601              		.loc 1 295 22 is_stmt 0 view .LVU441
 1602 0172 1A68     		ldr	r2, [r3]
 295:Src/main.c    **** 			lastTone0 = curTone0;
 1603              		.loc 1 295 28 view .LVU442
 1604 0174 0121     		movs	r1, #1
 1605 0176 0A43     		orrs	r2, r1
 295:Src/main.c    **** 			lastTone0 = curTone0;
 1606              		.loc 1 295 15 view .LVU443
 1607 0178 1A60     		str	r2, [r3]
 296:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 1608              		.loc 1 296 4 is_stmt 1 view .LVU444
 296:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 1609              		.loc 1 296 14 is_stmt 0 view .LVU445
 1610 017a 814B     		ldr	r3, .L107+48
 1611 017c 1A88     		ldrh	r2, [r3]
 1612 017e 814B     		ldr	r3, .L107+52
 1613 0180 1A80     		strh	r2, [r3]
 297:Src/main.c    **** 
 1614              		.loc 1 297 4 is_stmt 1 view .LVU446
 297:Src/main.c    **** 
 1615              		.loc 1 297 18 is_stmt 0 view .LVU447
 1616 0182 FFF7FEFF 		bl	HAL_GetTick
 1617              	.LVL86:
 297:Src/main.c    **** 
 1618              		.loc 1 297 16 view .LVU448
 1619 0186 824B     		ldr	r3, .L107+64
 1620 0188 1860     		str	r0, [r3]
 299:Src/main.c    **** 		} else if (curTone0 < 20 && curTone0 != lastTone0) {
 1621              		.loc 1 299 4 is_stmt 1 view .LVU449
 1622 018a 8021     		movs	r1, #128
 1623 018c 9020     		movs	r0, #144
 1624 018e 0122     		movs	r2, #1
 1625 0190 C900     		lsls	r1, r1, #3
 1626 0192 C005     		lsls	r0, r0, #23
 1627 0194 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1628              	.LVL87:
 1629              	.L85:
ARM GAS  /tmp/ccF7TYrA.s 			page 69


 307:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 1630              		.loc 1 307 3 view .LVU450
 307:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 1631              		.loc 1 307 16 is_stmt 0 view .LVU451
 1632 0198 774B     		ldr	r3, .L107+40
 1633 019a 1988     		ldrh	r1, [r3]
 307:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 1634              		.loc 1 307 6 view .LVU452
 1635 019c 1429     		cmp	r1, #20
 1636 019e 03D9     		bls	.L86
 307:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 1637              		.loc 1 307 33 discriminator 1 view .LVU453
 1638 01a0 7C4B     		ldr	r3, .L107+68
 1639 01a2 1B88     		ldrh	r3, [r3]
 307:Src/main.c    **** 			curPeriode1 = (uint32_t)1000000 / (uint32_t)(curTone1);
 1640              		.loc 1 307 21 discriminator 1 view .LVU454
 1641 01a4 9942     		cmp	r1, r3
 1642 01a6 42D1     		bne	.L100
 1643              	.L86:
 314:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 1644              		.loc 1 314 10 is_stmt 1 view .LVU455
 314:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 1645              		.loc 1 314 13 is_stmt 0 view .LVU456
 1646 01a8 1329     		cmp	r1, #19
 1647 01aa 0BD8     		bhi	.L87
 314:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 1648              		.loc 1 314 40 discriminator 1 view .LVU457
 1649 01ac 794B     		ldr	r3, .L107+68
 1650 01ae 1B88     		ldrh	r3, [r3]
 314:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 1651              		.loc 1 314 28 discriminator 1 view .LVU458
 1652 01b0 9942     		cmp	r1, r3
 1653 01b2 07D0     		beq	.L87
 315:Src/main.c    ****       curPeriode1 = 0;
 1654              		.loc 1 315 4 is_stmt 1 view .LVU459
 315:Src/main.c    ****       curPeriode1 = 0;
 1655              		.loc 1 315 15 is_stmt 0 view .LVU460
 1656 01b4 6A4A     		ldr	r2, .L107+16
 1657 01b6 1368     		ldr	r3, [r2]
 1658 01b8 0121     		movs	r1, #1
 1659 01ba 8B43     		bics	r3, r1
 1660 01bc 1360     		str	r3, [r2]
 316:Src/main.c    **** 		}
 1661              		.loc 1 316 7 is_stmt 1 view .LVU461
 316:Src/main.c    **** 		}
 1662              		.loc 1 316 19 is_stmt 0 view .LVU462
 1663 01be 764B     		ldr	r3, .L107+72
 1664 01c0 0022     		movs	r2, #0
 1665 01c2 1A60     		str	r2, [r3]
 1666              	.L87:
 319:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1667              		.loc 1 319 3 is_stmt 1 view .LVU463
 319:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1668              		.loc 1 319 8 is_stmt 0 view .LVU464
 1669 01c4 FFF7FEFF 		bl	HAL_GetTick
 1670              	.LVL88:
 319:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
ARM GAS  /tmp/ccF7TYrA.s 			page 70


 1671              		.loc 1 319 22 view .LVU465
 1672 01c8 714B     		ldr	r3, .L107+64
 1673 01ca 1B68     		ldr	r3, [r3]
 1674 01cc C01A     		subs	r0, r0, r3
 319:Src/main.c    **** 			TIM14->CR1 &= ~(1UL);
 1675              		.loc 1 319 6 view .LVU466
 1676 01ce FA23     		movs	r3, #250
 1677 01d0 9B00     		lsls	r3, r3, #2
 1678 01d2 9842     		cmp	r0, r3
 1679 01d4 41D8     		bhi	.L101
 1680              	.L88:
 332:Src/main.c    **** 			if (uart_tx_dat >> 7 == 1) {
 1681              		.loc 1 332 3 is_stmt 1 view .LVU467
 332:Src/main.c    **** 			if (uart_tx_dat >> 7 == 1) {
 1682              		.loc 1 332 23 is_stmt 0 view .LVU468
 1683 01d6 7149     		ldr	r1, .L107+76
 1684 01d8 0020     		movs	r0, #0
 1685 01da FFF7FEFF 		bl	midiGetFromUsbRx
 1686              	.LVL89:
 332:Src/main.c    **** 			if (uart_tx_dat >> 7 == 1) {
 1687              		.loc 1 332 5 view .LVU469
 1688 01de 0128     		cmp	r0, #1
 1689 01e0 55D0     		beq	.L102
 1690              	.L75:
 332:Src/main.c    **** 			if (uart_tx_dat >> 7 == 1) {
 1691              		.loc 1 332 5 view .LVU470
 1692              	.LBE31:
 240:Src/main.c    ****   {
 1693              		.loc 1 240 3 is_stmt 1 view .LVU471
 1694              	.LBB37:
 266:Src/main.c    ****       dfu_otter_bootloader();
 1695              		.loc 1 266 5 view .LVU472
 266:Src/main.c    ****       dfu_otter_bootloader();
 1696              		.loc 1 266 9 is_stmt 0 view .LVU473
 1697 01e2 9020     		movs	r0, #144
 1698 01e4 8021     		movs	r1, #128
 1699 01e6 C005     		lsls	r0, r0, #23
 1700 01e8 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1701              	.LVL90:
 266:Src/main.c    ****       dfu_otter_bootloader();
 1702              		.loc 1 266 8 view .LVU474
 1703 01ec 0028     		cmp	r0, #0
 1704 01ee 00D0     		beq	.LCB1352
 1705 01f0 7AE7     		b	.L103	@long jump
 1706              	.LCB1352:
 270:Src/main.c    **** 
 1707              		.loc 1 270 5 is_stmt 1 view .LVU475
 270:Src/main.c    **** 
 1708              		.loc 1 270 35 is_stmt 0 view .LVU476
 1709 01f2 5E4B     		ldr	r3, .L107+28
 1710 01f4 5888     		ldrh	r0, [r3, #2]
 270:Src/main.c    **** 
 1711              		.loc 1 270 19 view .LVU477
 1712 01f6 FFF7FEFF 		bl	__aeabi_ui2f
 1713              	.LVL91:
 270:Src/main.c    **** 
 1714              		.loc 1 270 39 view .LVU478
ARM GAS  /tmp/ccF7TYrA.s 			page 71


 1715 01fa E621     		movs	r1, #230
 1716 01fc 8905     		lsls	r1, r1, #22
 1717 01fe FFF7FEFF 		bl	__aeabi_fmul
 1718              	.LVL92:
 270:Src/main.c    **** 
 1719              		.loc 1 270 11 view .LVU479
 1720 0202 6749     		ldr	r1, .L107+80
 1721 0204 FFF7FEFF 		bl	__aeabi_fmul
 1722              	.LVL93:
 272:Src/main.c    ****       HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 1723              		.loc 1 272 5 is_stmt 1 view .LVU480
 272:Src/main.c    ****       HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 1724              		.loc 1 272 8 is_stmt 0 view .LVU481
 1725 0208 6649     		ldr	r1, .L107+84
 1726 020a FFF7FEFF 		bl	__aeabi_fcmpgt
 1727              	.LVL94:
 272:Src/main.c    ****       HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 1728              		.loc 1 272 8 view .LVU482
 1729 020e 0028     		cmp	r0, #0
 1730 0210 00D1     		bne	.LCB1368
 1731 0212 6BE7     		b	.L96	@long jump
 1732              	.LCB1368:
 273:Src/main.c    ****     } else {
 1733              		.loc 1 273 7 is_stmt 1 view .LVU483
 1734 0214 8021     		movs	r1, #128
 1735 0216 9020     		movs	r0, #144
 1736 0218 0022     		movs	r2, #0
 1737 021a 0902     		lsls	r1, r1, #8
 1738 021c C005     		lsls	r0, r0, #23
 1739 021e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1740              	.LVL95:
 1741              	.L79:
 278:Src/main.c    **** 		curTone1 = 0;
 1742              		.loc 1 278 3 view .LVU484
 278:Src/main.c    **** 		curTone1 = 0;
 1743              		.loc 1 278 12 is_stmt 0 view .LVU485
 1744 0222 0023     		movs	r3, #0
 1745 0224 564A     		ldr	r2, .L107+48
 1746 0226 1380     		strh	r3, [r2]
 279:Src/main.c    **** 
 1747              		.loc 1 279 3 is_stmt 1 view .LVU486
 279:Src/main.c    **** 
 1748              		.loc 1 279 12 is_stmt 0 view .LVU487
 1749 0228 534A     		ldr	r2, .L107+40
 1750 022a 1380     		strh	r3, [r2]
 281:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 1751              		.loc 1 281 4 is_stmt 1 view .LVU488
 1752              	.LBB33:
 281:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 1753              		.loc 1 281 9 view .LVU489
 1754              	.LVL96:
 281:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
 1755              		.loc 1 281 4 is_stmt 0 view .LVU490
 1756 022c 6DE7     		b	.L80
 1757              	.LVL97:
 1758              	.L100:
 281:Src/main.c    **** 	      if( freqs[i] > curTone0 ) {
ARM GAS  /tmp/ccF7TYrA.s 			page 72


 1759              		.loc 1 281 4 view .LVU491
 1760              	.LBE33:
 308:Src/main.c    **** 			TIM15->CNT = 0;
 1761              		.loc 1 308 4 is_stmt 1 view .LVU492
 308:Src/main.c    **** 			TIM15->CNT = 0;
 1762              		.loc 1 308 36 is_stmt 0 view .LVU493
 1763 022e 5748     		ldr	r0, .L107+60
 1764 0230 FFF7FEFF 		bl	__aeabi_uidiv
 1765              	.LVL98:
 308:Src/main.c    **** 			TIM15->CNT = 0;
 1766              		.loc 1 308 16 view .LVU494
 1767 0234 584B     		ldr	r3, .L107+72
 1768 0236 1860     		str	r0, [r3]
 309:Src/main.c    **** 			TIM15->ARR = curPeriode1;
 1769              		.loc 1 309 4 is_stmt 1 view .LVU495
 309:Src/main.c    **** 			TIM15->ARR = curPeriode1;
 1770              		.loc 1 309 15 is_stmt 0 view .LVU496
 1771 0238 494B     		ldr	r3, .L107+16
 1772 023a 0022     		movs	r2, #0
 1773 023c 5A62     		str	r2, [r3, #36]
 310:Src/main.c    **** 			TIM15->CR1 = TIM15->CR1 | 1;
 1774              		.loc 1 310 4 is_stmt 1 view .LVU497
 310:Src/main.c    **** 			TIM15->CR1 = TIM15->CR1 | 1;
 1775              		.loc 1 310 15 is_stmt 0 view .LVU498
 1776 023e D862     		str	r0, [r3, #44]
 311:Src/main.c    **** 			lastTone1 = curTone1;
 1777              		.loc 1 311 4 is_stmt 1 view .LVU499
 311:Src/main.c    **** 			lastTone1 = curTone1;
 1778              		.loc 1 311 22 is_stmt 0 view .LVU500
 1779 0240 1A68     		ldr	r2, [r3]
 311:Src/main.c    **** 			lastTone1 = curTone1;
 1780              		.loc 1 311 28 view .LVU501
 1781 0242 0121     		movs	r1, #1
 1782 0244 0A43     		orrs	r2, r1
 311:Src/main.c    **** 			lastTone1 = curTone1;
 1783              		.loc 1 311 15 view .LVU502
 1784 0246 1A60     		str	r2, [r3]
 312:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 1785              		.loc 1 312 4 is_stmt 1 view .LVU503
 312:Src/main.c    **** 			noteTimeout = HAL_GetTick();
 1786              		.loc 1 312 14 is_stmt 0 view .LVU504
 1787 0248 4B4B     		ldr	r3, .L107+40
 1788 024a 1A88     		ldrh	r2, [r3]
 1789 024c 514B     		ldr	r3, .L107+68
 1790 024e 1A80     		strh	r2, [r3]
 313:Src/main.c    **** 		} else if (curTone1 < 20 && curTone1 != lastTone1) {
 1791              		.loc 1 313 4 is_stmt 1 view .LVU505
 313:Src/main.c    **** 		} else if (curTone1 < 20 && curTone1 != lastTone1) {
 1792              		.loc 1 313 18 is_stmt 0 view .LVU506
 1793 0250 FFF7FEFF 		bl	HAL_GetTick
 1794              	.LVL99:
 313:Src/main.c    **** 		} else if (curTone1 < 20 && curTone1 != lastTone1) {
 1795              		.loc 1 313 16 view .LVU507
 1796 0254 4E4B     		ldr	r3, .L107+64
 1797 0256 1860     		str	r0, [r3]
 1798 0258 B4E7     		b	.L87
 1799              	.L101:
ARM GAS  /tmp/ccF7TYrA.s 			page 73


 320:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 1800              		.loc 1 320 4 is_stmt 1 view .LVU508
 320:Src/main.c    **** 			TIM15->CR1 &= ~(1UL);
 1801              		.loc 1 320 15 is_stmt 0 view .LVU509
 1802 025a 3F4A     		ldr	r2, .L107+8
 1803 025c 1368     		ldr	r3, [r2]
 1804 025e 0121     		movs	r1, #1
 1805 0260 8B43     		bics	r3, r1
 1806 0262 1360     		str	r3, [r2]
 321:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 1807              		.loc 1 321 4 is_stmt 1 view .LVU510
 321:Src/main.c    **** 			for (int i = 0; i < 16; i++) {
 1808              		.loc 1 321 15 is_stmt 0 view .LVU511
 1809 0264 3E4A     		ldr	r2, .L107+16
 1810 0266 1368     		ldr	r3, [r2]
 1811 0268 8B43     		bics	r3, r1
 1812 026a 1360     		str	r3, [r2]
 322:Src/main.c    **** 				freqs[i] = 0;
 1813              		.loc 1 322 4 is_stmt 1 view .LVU512
 1814              	.LBB34:
 322:Src/main.c    **** 				freqs[i] = 0;
 1815              		.loc 1 322 9 view .LVU513
 1816              	.LVL100:
 322:Src/main.c    **** 				freqs[i] = 0;
 1817              		.loc 1 322 13 is_stmt 0 view .LVU514
 1818 026c 0023     		movs	r3, #0
 322:Src/main.c    **** 				freqs[i] = 0;
 1819              		.loc 1 322 4 view .LVU515
 1820 026e 04E0     		b	.L89
 1821              	.LVL101:
 1822              	.L90:
 323:Src/main.c    **** 			}
 1823              		.loc 1 323 5 is_stmt 1 discriminator 3 view .LVU516
 323:Src/main.c    **** 			}
 1824              		.loc 1 323 14 is_stmt 0 discriminator 3 view .LVU517
 1825 0270 5900     		lsls	r1, r3, #1
 1826 0272 424A     		ldr	r2, .L107+44
 1827 0274 0020     		movs	r0, #0
 1828 0276 8852     		strh	r0, [r1, r2]
 322:Src/main.c    **** 				freqs[i] = 0;
 1829              		.loc 1 322 29 discriminator 3 view .LVU518
 1830 0278 0133     		adds	r3, r3, #1
 1831              	.LVL102:
 1832              	.L89:
 322:Src/main.c    **** 				freqs[i] = 0;
 1833              		.loc 1 322 4 discriminator 1 view .LVU519
 1834 027a 0F2B     		cmp	r3, #15
 1835 027c F8DD     		ble	.L90
 1836              	.LBE34:
 326:Src/main.c    **** 		}
 1837              		.loc 1 326 4 is_stmt 1 view .LVU520
 1838 027e 8021     		movs	r1, #128
 1839 0280 9020     		movs	r0, #144
 1840 0282 0022     		movs	r2, #0
 1841 0284 C900     		lsls	r1, r1, #3
 1842 0286 C005     		lsls	r0, r0, #23
 1843 0288 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccF7TYrA.s 			page 74


 1844              	.LVL103:
 326:Src/main.c    **** 		}
 1845              		.loc 1 326 4 is_stmt 0 view .LVU521
 1846 028c A3E7     		b	.L88
 1847              	.L102:
 333:Src/main.c    **** 				midiBuffer[0] = uart_tx_dat;
 1848              		.loc 1 333 4 is_stmt 1 view .LVU522
 333:Src/main.c    **** 				midiBuffer[0] = uart_tx_dat;
 1849              		.loc 1 333 25 is_stmt 0 view .LVU523
 1850 028e 434B     		ldr	r3, .L107+76
 1851 0290 1B78     		ldrb	r3, [r3]
 1852 0292 DA09     		lsrs	r2, r3, #7
 333:Src/main.c    **** 				midiBuffer[0] = uart_tx_dat;
 1853              		.loc 1 333 7 view .LVU524
 1854 0294 012A     		cmp	r2, #1
 1855 0296 2DD0     		beq	.L104
 338:Src/main.c    **** 				midiBuffer[1] = uart_tx_dat;
 1856              		.loc 1 338 11 is_stmt 1 view .LVU525
 338:Src/main.c    **** 				midiBuffer[1] = uart_tx_dat;
 1857              		.loc 1 338 25 is_stmt 0 view .LVU526
 1858 0298 434A     		ldr	r2, .L107+88
 1859 029a 1278     		ldrb	r2, [r2]
 338:Src/main.c    **** 				midiBuffer[1] = uart_tx_dat;
 1860              		.loc 1 338 14 view .LVU527
 1861 029c 012A     		cmp	r2, #1
 1862 029e 32D0     		beq	.L105
 341:Src/main.c    **** 				midiBuffer[2] = uart_tx_dat;
 1863              		.loc 1 341 11 is_stmt 1 view .LVU528
 341:Src/main.c    **** 				midiBuffer[2] = uart_tx_dat;
 1864              		.loc 1 341 14 is_stmt 0 view .LVU529
 1865 02a0 022A     		cmp	r2, #2
 1866 02a2 9ED1     		bne	.L75
 342:Src/main.c    **** 				midiState = 3;
 1867              		.loc 1 342 5 is_stmt 1 view .LVU530
 342:Src/main.c    **** 				midiState = 3;
 1868              		.loc 1 342 19 is_stmt 0 view .LVU531
 1869 02a4 414A     		ldr	r2, .L107+92
 1870 02a6 9370     		strb	r3, [r2, #2]
 343:Src/main.c    **** 
 1871              		.loc 1 343 5 is_stmt 1 view .LVU532
 343:Src/main.c    **** 
 1872              		.loc 1 343 15 is_stmt 0 view .LVU533
 1873 02a8 3F4B     		ldr	r3, .L107+88
 1874 02aa 0321     		movs	r1, #3
 1875 02ac 1970     		strb	r1, [r3]
 345:Src/main.c    **** 					char key = midiBuffer[1];
 1876              		.loc 1 345 5 is_stmt 1 view .LVU534
 345:Src/main.c    **** 					char key = midiBuffer[1];
 1877              		.loc 1 345 20 is_stmt 0 view .LVU535
 1878 02ae 1378     		ldrb	r3, [r2]
 345:Src/main.c    **** 					char key = midiBuffer[1];
 1879              		.loc 1 345 8 view .LVU536
 1880 02b0 0F22     		movs	r2, #15
 1881 02b2 9343     		bics	r3, r2
 1882 02b4 902B     		cmp	r3, #144
 1883 02b6 2CD0     		beq	.L106
 1884              	.L94:
ARM GAS  /tmp/ccF7TYrA.s 			page 75


 354:Src/main.c    **** 					char key = midiBuffer[1];
 1885              		.loc 1 354 7 is_stmt 1 view .LVU537
 354:Src/main.c    **** 					char key = midiBuffer[1];
 1886              		.loc 1 354 22 is_stmt 0 view .LVU538
 1887 02b8 3C4B     		ldr	r3, .L107+92
 1888 02ba 1B78     		ldrb	r3, [r3]
 354:Src/main.c    **** 					char key = midiBuffer[1];
 1889              		.loc 1 354 10 view .LVU539
 1890 02bc 0F22     		movs	r2, #15
 1891 02be 9343     		bics	r3, r2
 1892 02c0 802B     		cmp	r3, #128
 1893 02c2 8ED1     		bne	.L75
 1894              	.LBB35:
 355:Src/main.c    **** 					char vel = midiBuffer[2];
 1895              		.loc 1 355 6 is_stmt 1 view .LVU540
 355:Src/main.c    **** 					char vel = midiBuffer[2];
 1896              		.loc 1 355 11 is_stmt 0 view .LVU541
 1897 02c4 394C     		ldr	r4, .L107+92
 1898 02c6 6078     		ldrb	r0, [r4, #1]
 1899              	.LVL104:
 356:Src/main.c    **** 
 1900              		.loc 1 356 6 is_stmt 1 view .LVU542
 358:Src/main.c    **** 
 1901              		.loc 1 358 6 view .LVU543
 358:Src/main.c    **** 
 1902              		.loc 1 358 32 is_stmt 0 view .LVU544
 1903 02c8 4538     		subs	r0, r0, #69
 1904              	.LVL105:
 358:Src/main.c    **** 
 1905              		.loc 1 358 22 view .LVU545
 1906 02ca FFF7FEFF 		bl	__aeabi_i2d
 1907              	.LVL106:
 358:Src/main.c    **** 
 1908              		.loc 1 358 22 view .LVU546
 1909 02ce 0022     		movs	r2, #0
 1910 02d0 374B     		ldr	r3, .L107+96
 1911 02d2 FFF7FEFF 		bl	__aeabi_ddiv
 1912              	.LVL107:
 1913 02d6 0200     		movs	r2, r0
 1914 02d8 0B00     		movs	r3, r1
 1915 02da 0020     		movs	r0, #0
 1916 02dc 8021     		movs	r1, #128
 1917 02de C905     		lsls	r1, r1, #23
 1918 02e0 FFF7FEFF 		bl	pow
 1919              	.LVL108:
 361:Src/main.c    **** 					//}
 1920              		.loc 1 361 6 is_stmt 1 view .LVU547
 361:Src/main.c    **** 					//}
 1921              		.loc 1 361 22 is_stmt 0 view .LVU548
 1922 02e4 2378     		ldrb	r3, [r4]
 361:Src/main.c    **** 					//}
 1923              		.loc 1 361 26 view .LVU549
 1924 02e6 0F22     		movs	r2, #15
 1925 02e8 1340     		ands	r3, r2
 361:Src/main.c    **** 					//}
 1926              		.loc 1 361 33 view .LVU550
 1927 02ea 5B00     		lsls	r3, r3, #1
ARM GAS  /tmp/ccF7TYrA.s 			page 76


 1928 02ec 234A     		ldr	r2, .L107+44
 1929 02ee 0021     		movs	r1, #0
 1930 02f0 9952     		strh	r1, [r3, r2]
 1931 02f2 76E7     		b	.L75
 1932              	.L104:
 361:Src/main.c    **** 					//}
 1933              		.loc 1 361 33 view .LVU551
 1934              	.LBE35:
 334:Src/main.c    **** 				midiBuffer[1] = 0;
 1935              		.loc 1 334 5 is_stmt 1 view .LVU552
 334:Src/main.c    **** 				midiBuffer[1] = 0;
 1936              		.loc 1 334 19 is_stmt 0 view .LVU553
 1937 02f4 2D4A     		ldr	r2, .L107+92
 1938 02f6 1370     		strb	r3, [r2]
 335:Src/main.c    **** 				midiBuffer[2] = 0;
 1939              		.loc 1 335 5 is_stmt 1 view .LVU554
 335:Src/main.c    **** 				midiBuffer[2] = 0;
 1940              		.loc 1 335 19 is_stmt 0 view .LVU555
 1941 02f8 0023     		movs	r3, #0
 1942 02fa 5370     		strb	r3, [r2, #1]
 336:Src/main.c    **** 				midiState = 1;
 1943              		.loc 1 336 5 is_stmt 1 view .LVU556
 336:Src/main.c    **** 				midiState = 1;
 1944              		.loc 1 336 19 is_stmt 0 view .LVU557
 1945 02fc 9370     		strb	r3, [r2, #2]
 337:Src/main.c    **** 			} else if (midiState == 1) {
 1946              		.loc 1 337 5 is_stmt 1 view .LVU558
 337:Src/main.c    **** 			} else if (midiState == 1) {
 1947              		.loc 1 337 15 is_stmt 0 view .LVU559
 1948 02fe 2A4B     		ldr	r3, .L107+88
 1949 0300 0122     		movs	r2, #1
 1950 0302 1A70     		strb	r2, [r3]
 1951 0304 6DE7     		b	.L75
 1952              	.L105:
 339:Src/main.c    **** 				midiState = 2;
 1953              		.loc 1 339 5 is_stmt 1 view .LVU560
 339:Src/main.c    **** 				midiState = 2;
 1954              		.loc 1 339 19 is_stmt 0 view .LVU561
 1955 0306 294A     		ldr	r2, .L107+92
 1956 0308 5370     		strb	r3, [r2, #1]
 340:Src/main.c    **** 			} else if (midiState == 2) {
 1957              		.loc 1 340 5 is_stmt 1 view .LVU562
 340:Src/main.c    **** 			} else if (midiState == 2) {
 1958              		.loc 1 340 15 is_stmt 0 view .LVU563
 1959 030a 274B     		ldr	r3, .L107+88
 1960 030c 0222     		movs	r2, #2
 1961 030e 1A70     		strb	r2, [r3]
 1962 0310 67E7     		b	.L75
 1963              	.L106:
 1964              	.LBB36:
 346:Src/main.c    **** 					char vel = midiBuffer[2];
 1965              		.loc 1 346 6 is_stmt 1 view .LVU564
 346:Src/main.c    **** 					char vel = midiBuffer[2];
 1966              		.loc 1 346 11 is_stmt 0 view .LVU565
 1967 0312 264C     		ldr	r4, .L107+92
 1968 0314 6078     		ldrb	r0, [r4, #1]
 1969              	.LVL109:
ARM GAS  /tmp/ccF7TYrA.s 			page 77


 347:Src/main.c    **** 
 1970              		.loc 1 347 6 is_stmt 1 view .LVU566
 349:Src/main.c    **** 					curChannel = midiBuffer[0] & 0xF;
 1971              		.loc 1 349 6 view .LVU567
 349:Src/main.c    **** 					curChannel = midiBuffer[0] & 0xF;
 1972              		.loc 1 349 32 is_stmt 0 view .LVU568
 1973 0316 4538     		subs	r0, r0, #69
 1974              	.LVL110:
 349:Src/main.c    **** 					curChannel = midiBuffer[0] & 0xF;
 1975              		.loc 1 349 22 view .LVU569
 1976 0318 FFF7FEFF 		bl	__aeabi_i2d
 1977              	.LVL111:
 349:Src/main.c    **** 					curChannel = midiBuffer[0] & 0xF;
 1978              		.loc 1 349 22 view .LVU570
 1979 031c 0022     		movs	r2, #0
 1980 031e 244B     		ldr	r3, .L107+96
 1981 0320 FFF7FEFF 		bl	__aeabi_ddiv
 1982              	.LVL112:
 1983 0324 0200     		movs	r2, r0
 1984 0326 0B00     		movs	r3, r1
 1985 0328 0020     		movs	r0, #0
 1986 032a 8021     		movs	r1, #128
 1987 032c C905     		lsls	r1, r1, #23
 1988 032e FFF7FEFF 		bl	pow
 1989              	.LVL113:
 349:Src/main.c    **** 					curChannel = midiBuffer[0] & 0xF;
 1990              		.loc 1 349 44 view .LVU571
 1991 0332 0022     		movs	r2, #0
 1992 0334 1F4B     		ldr	r3, .L107+100
 1993 0336 FFF7FEFF 		bl	__aeabi_dmul
 1994              	.LVL114:
 349:Src/main.c    **** 					curChannel = midiBuffer[0] & 0xF;
 1995              		.loc 1 349 15 view .LVU572
 1996 033a FFF7FEFF 		bl	__aeabi_d2uiz
 1997              	.LVL115:
 350:Src/main.c    **** 					freqs[curChannel] = freq;
 1998              		.loc 1 350 6 is_stmt 1 view .LVU573
 350:Src/main.c    **** 					freqs[curChannel] = freq;
 1999              		.loc 1 350 29 is_stmt 0 view .LVU574
 2000 033e 2378     		ldrb	r3, [r4]
 350:Src/main.c    **** 					freqs[curChannel] = freq;
 2001              		.loc 1 350 33 view .LVU575
 2002 0340 0F22     		movs	r2, #15
 2003 0342 1340     		ands	r3, r2
 350:Src/main.c    **** 					freqs[curChannel] = freq;
 2004              		.loc 1 350 17 view .LVU576
 2005 0344 1C4A     		ldr	r2, .L107+104
 2006 0346 1380     		strh	r3, [r2]
 351:Src/main.c    **** 
 2007              		.loc 1 351 6 is_stmt 1 view .LVU577
 351:Src/main.c    **** 
 2008              		.loc 1 351 24 is_stmt 0 view .LVU578
 2009 0348 5B00     		lsls	r3, r3, #1
 2010 034a 0C4A     		ldr	r2, .L107+44
 2011 034c D052     		strh	r0, [r2, r3]
 2012 034e B3E7     		b	.L94
 2013              	.L108:
ARM GAS  /tmp/ccF7TYrA.s 			page 78


 2014              		.align	2
 2015              	.L107:
 2016 0350 00000000 		.word	hdac
 2017 0354 00000000 		.word	htim14
 2018 0358 00200040 		.word	1073750016
 2019 035c 00000000 		.word	htim15
 2020 0360 00400140 		.word	1073823744
 2021 0364 00000000 		.word	htim1
 2022 0368 00000000 		.word	htim2
 2023 036c 00000000 		.word	adcBuffer
 2024 0370 00000000 		.word	hadc
 2025 0374 00000000 		.word	hUsbDeviceFS
 2026 0378 00000000 		.word	.LANCHOR3
 2027 037c 00000000 		.word	.LANCHOR4
 2028 0380 00000000 		.word	.LANCHOR2
 2029 0384 00000000 		.word	.LANCHOR5
 2030 0388 00000000 		.word	.LANCHOR0
 2031 038c 40420F00 		.word	1000000
 2032 0390 00000000 		.word	.LANCHOR6
 2033 0394 00000000 		.word	.LANCHOR7
 2034 0398 00000000 		.word	.LANCHOR1
 2035 039c 00000000 		.word	uart_tx_dat
 2036 03a0 00008842 		.word	1116209152
 2037 03a4 0000A041 		.word	1101004800
 2038 03a8 00000000 		.word	.LANCHOR8
 2039 03ac 00000000 		.word	midiBuffer
 2040 03b0 00002840 		.word	1076363264
 2041 03b4 00807B40 		.word	1081835520
 2042 03b8 00000000 		.word	.LANCHOR9
 2043              	.LBE36:
 2044              	.LBE37:
 2045              		.cfi_endproc
 2046              	.LFE39:
 2048              		.global	freqs
 2049              		.global	noteTimeout
 2050              		.global	lastTone1
 2051              		.global	lastTone0
 2052              		.global	curChannel
 2053              		.global	curTone1
 2054              		.global	curTone0
 2055              		.global	midiState
 2056              		.comm	midiBuffer,4,4
 2057              		.global	curPeriode1
 2058              		.global	curPeriode0
 2059              		.comm	uart_tx_dat,1,1
 2060              		.comm	adcBuffer,6,4
 2061              		.comm	hdma_adc,68,4
 2062              		.comm	hadc,76,4
 2063              		.comm	hdac,20,4
 2064              		.comm	htim1,64,4
 2065              		.comm	htim2,64,4
 2066              		.comm	htim15,64,4
 2067              		.comm	htim14,64,4
 2068              		.section	.bss.curChannel,"aw",%nobits
 2069              		.align	1
 2070              		.set	.LANCHOR9,. + 0
 2073              	curChannel:
ARM GAS  /tmp/ccF7TYrA.s 			page 79


 2074 0000 0000     		.space	2
 2075              		.section	.bss.curPeriode0,"aw",%nobits
 2076              		.align	2
 2077              		.set	.LANCHOR0,. + 0
 2080              	curPeriode0:
 2081 0000 00000000 		.space	4
 2082              		.section	.bss.curPeriode1,"aw",%nobits
 2083              		.align	2
 2084              		.set	.LANCHOR1,. + 0
 2087              	curPeriode1:
 2088 0000 00000000 		.space	4
 2089              		.section	.bss.curTone0,"aw",%nobits
 2090              		.align	1
 2091              		.set	.LANCHOR2,. + 0
 2094              	curTone0:
 2095 0000 0000     		.space	2
 2096              		.section	.bss.curTone1,"aw",%nobits
 2097              		.align	1
 2098              		.set	.LANCHOR3,. + 0
 2101              	curTone1:
 2102 0000 0000     		.space	2
 2103              		.section	.bss.freqs,"aw",%nobits
 2104              		.align	2
 2105              		.set	.LANCHOR4,. + 0
 2108              	freqs:
 2109 0000 00000000 		.space	32
 2109      00000000 
 2109      00000000 
 2109      00000000 
 2109      00000000 
 2110              		.section	.bss.lastTone0,"aw",%nobits
 2111              		.align	1
 2112              		.set	.LANCHOR5,. + 0
 2115              	lastTone0:
 2116 0000 0000     		.space	2
 2117              		.section	.bss.lastTone1,"aw",%nobits
 2118              		.align	1
 2119              		.set	.LANCHOR7,. + 0
 2122              	lastTone1:
 2123 0000 0000     		.space	2
 2124              		.section	.bss.midiState,"aw",%nobits
 2125              		.set	.LANCHOR8,. + 0
 2128              	midiState:
 2129 0000 00       		.space	1
 2130              		.section	.bss.noteTimeout,"aw",%nobits
 2131              		.align	2
 2132              		.set	.LANCHOR6,. + 0
 2135              	noteTimeout:
 2136 0000 00000000 		.space	4
 2137              		.section	.rodata.MX_DAC_Init.str1.4,"aMS",%progbits,1
 2138              		.align	2
 2139              	.LC4:
 2140 0000 5372632F 		.ascii	"Src/main.c\000"
 2140      6D61696E 
 2140      2E6300
 2141              		.text
 2142              	.Letext0:
ARM GAS  /tmp/ccF7TYrA.s 			page 80


 2143              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2144              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2145              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 2146              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2147              		.file 8 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 2148              		.file 9 "/usr/arm-none-eabi/include/sys/lock.h"
 2149              		.file 10 "/usr/arm-none-eabi/include/sys/_types.h"
 2150              		.file 11 "/usr/lib/gcc/arm-none-eabi/8.3.0/include/stddef.h"
 2151              		.file 12 "/usr/arm-none-eabi/include/sys/reent.h"
 2152              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2153              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2154              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 2155              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2156              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2157              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 2158              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dac.h"
 2159              		.file 20 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2160              		.file 21 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 2161              		.file 22 "/usr/arm-none-eabi/include/stdlib.h"
 2162              		.file 23 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 2163              		.file 24 "Inc/usb_device.h"
 2164              		.file 25 "Inc/curelib_inc/curemisc.h"
 2165              		.file 26 "Middlewares/USBMIDI/Inc/usbd_midi.h"
 2166              		.file 27 "Inc/usbd_desc.h"
 2167              		.file 28 "Inc/usbd_midi_if.h"
 2168              		.file 29 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 2169              		.file 30 "Inc/usbd_cdc_if.h"
 2170              		.file 31 "/usr/arm-none-eabi/include/math.h"
 2171              		.file 32 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 2172              		.file 33 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /tmp/ccF7TYrA.s 			page 81


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccF7TYrA.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccF7TYrA.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccF7TYrA.s:125    .text.MX_GPIO_Init:0000000000000068 $d
     /tmp/ccF7TYrA.s:130    .text.USER_TIM2_Init:0000000000000000 $t
     /tmp/ccF7TYrA.s:136    .text.USER_TIM2_Init:0000000000000000 USER_TIM2_Init
     /tmp/ccF7TYrA.s:245    .text.USER_TIM2_Init:000000000000006c $d
                            *COM*:0000000000000040 htim2
     /tmp/ccF7TYrA.s:251    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccF7TYrA.s:257    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccF7TYrA.s:303    .text.MX_DMA_Init:000000000000002c $d
     /tmp/ccF7TYrA.s:308    .text.dfu_otter_bootloader:0000000000000000 $t
     /tmp/ccF7TYrA.s:315    .text.dfu_otter_bootloader:0000000000000000 dfu_otter_bootloader
     /tmp/ccF7TYrA.s:386    .text.dfu_otter_bootloader:0000000000000018 $d
     /tmp/ccF7TYrA.s:399    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccF7TYrA.s:406    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccF7TYrA.s:506    .text.HAL_TIM_PeriodElapsedCallback:0000000000000060 $d
     /tmp/ccF7TYrA.s:514    .text._Error_Handler:0000000000000000 $t
     /tmp/ccF7TYrA.s:521    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccF7TYrA.s:538    .text.MX_DAC_Init:0000000000000000 $t
     /tmp/ccF7TYrA.s:544    .text.MX_DAC_Init:0000000000000000 MX_DAC_Init
     /tmp/ccF7TYrA.s:606    .text.MX_DAC_Init:000000000000003c $d
                            *COM*:0000000000000014 hdac
     /tmp/ccF7TYrA.s:615    .text.MX_TIM14_Init:0000000000000000 $t
     /tmp/ccF7TYrA.s:621    .text.MX_TIM14_Init:0000000000000000 MX_TIM14_Init
     /tmp/ccF7TYrA.s:680    .text.MX_TIM14_Init:0000000000000034 $d
                            *COM*:0000000000000040 htim14
     /tmp/ccF7TYrA.s:688    .text.MX_TIM15_Init:0000000000000000 $t
     /tmp/ccF7TYrA.s:694    .text.MX_TIM15_Init:0000000000000000 MX_TIM15_Init
     /tmp/ccF7TYrA.s:753    .text.MX_TIM15_Init:0000000000000034 $d
                            *COM*:0000000000000040 htim15
     /tmp/ccF7TYrA.s:761    .text.USER_TIM1_Init:0000000000000000 $t
     /tmp/ccF7TYrA.s:767    .text.USER_TIM1_Init:0000000000000000 USER_TIM1_Init
     /tmp/ccF7TYrA.s:952    .text.USER_TIM1_Init:00000000000000b8 $d
                            *COM*:0000000000000040 htim1
     /tmp/ccF7TYrA.s:964    .text.MX_ADC_Init:0000000000000000 $t
     /tmp/ccF7TYrA.s:970    .text.MX_ADC_Init:0000000000000000 MX_ADC_Init
     /tmp/ccF7TYrA.s:1140   .text.MX_ADC_Init:00000000000000b0 $d
                            *COM*:000000000000004c hadc
     /tmp/ccF7TYrA.s:1148   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccF7TYrA.s:1155   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccF7TYrA.s:1289   .text.SystemClock_Config:0000000000000094 $d
     /tmp/ccF7TYrA.s:1301   .text.main:0000000000000000 $t
     /tmp/ccF7TYrA.s:1308   .text.main:0000000000000000 main
     /tmp/ccF7TYrA.s:2016   .text.main:0000000000000350 $d
                            *COM*:0000000000000006 adcBuffer
                            *COM*:0000000000000001 uart_tx_dat
                            *COM*:0000000000000004 midiBuffer
     /tmp/ccF7TYrA.s:2108   .bss.freqs:0000000000000000 freqs
     /tmp/ccF7TYrA.s:2135   .bss.noteTimeout:0000000000000000 noteTimeout
     /tmp/ccF7TYrA.s:2122   .bss.lastTone1:0000000000000000 lastTone1
     /tmp/ccF7TYrA.s:2115   .bss.lastTone0:0000000000000000 lastTone0
     /tmp/ccF7TYrA.s:2073   .bss.curChannel:0000000000000000 curChannel
     /tmp/ccF7TYrA.s:2101   .bss.curTone1:0000000000000000 curTone1
     /tmp/ccF7TYrA.s:2094   .bss.curTone0:0000000000000000 curTone0
     /tmp/ccF7TYrA.s:2128   .bss.midiState:0000000000000000 midiState
ARM GAS  /tmp/ccF7TYrA.s 			page 82


     /tmp/ccF7TYrA.s:2087   .bss.curPeriode1:0000000000000000 curPeriode1
     /tmp/ccF7TYrA.s:2080   .bss.curPeriode0:0000000000000000 curPeriode0
                            *COM*:0000000000000044 hdma_adc
     /tmp/ccF7TYrA.s:2069   .bss.curChannel:0000000000000000 $d
     /tmp/ccF7TYrA.s:2076   .bss.curPeriode0:0000000000000000 $d
     /tmp/ccF7TYrA.s:2083   .bss.curPeriode1:0000000000000000 $d
     /tmp/ccF7TYrA.s:2090   .bss.curTone0:0000000000000000 $d
     /tmp/ccF7TYrA.s:2097   .bss.curTone1:0000000000000000 $d
     /tmp/ccF7TYrA.s:2104   .bss.freqs:0000000000000000 $d
     /tmp/ccF7TYrA.s:2111   .bss.lastTone0:0000000000000000 $d
     /tmp/ccF7TYrA.s:2118   .bss.lastTone1:0000000000000000 $d
     /tmp/ccF7TYrA.s:2129   .bss.midiState:0000000000000000 $d
     /tmp/ccF7TYrA.s:2131   .bss.noteTimeout:0000000000000000 $d
     /tmp/ccF7TYrA.s:2138   .rodata.MX_DAC_Init.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_OnePulse_Init
HAL_TIM_MspPostInit
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
__aeabi_uidiv
HAL_DAC_Init
HAL_DAC_ConfigChannel
HAL_TIM_PWM_Init
HAL_TIMEx_ConfigBreakDeadTime
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
__aeabi_ui2f
__aeabi_fmul
__aeabi_fcmpgt
__aeabi_i2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2uiz
HAL_Init
HAL_DAC_Start
HAL_DAC_SetValue
HAL_TIM_Base_Start_IT
HAL_TIM_PWM_Start
HAL_TIM_Base_Start
HAL_TIM_OnePulse_Start
HAL_ADC_Start_DMA
MX_USB_MIDI_INIT
midiInit
HAL_Delay
HAL_GetTick
ARM GAS  /tmp/ccF7TYrA.s 			page 83


midiGetFromUsbRx
HAL_GPIO_ReadPin
pow
hUsbDeviceFS
