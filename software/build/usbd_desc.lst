ARM GAS  /tmp/ccZka3eD.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"usbd_desc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.USBD_FS_DeviceDescriptor,"ax",%progbits
  18              		.align	2
  19              		.global	USBD_FS_DeviceDescriptor
  20              		.code	16
  21              		.thumb_func
  23              	USBD_FS_DeviceDescriptor:
  24              	.LFB34:
  25              		.file 1 "Src/usbd_desc.c"
   1:Src/usbd_desc.c **** /**
   2:Src/usbd_desc.c ****   ******************************************************************************
   3:Src/usbd_desc.c ****   * @file           : usbd_desc.c
   4:Src/usbd_desc.c ****   * @version        : v2.0_Cube
   5:Src/usbd_desc.c ****   * @brief          : This file implements the USB device descriptors.
   6:Src/usbd_desc.c ****   ******************************************************************************
   7:Src/usbd_desc.c ****   * This notice applies to any and all portions of this file
   8:Src/usbd_desc.c ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/usbd_desc.c ****   * USER CODE END. Other portions of this file, whether
  10:Src/usbd_desc.c ****   * inserted by the user or by software development tools
  11:Src/usbd_desc.c ****   * are owned by their respective copyright owners.
  12:Src/usbd_desc.c ****   *
  13:Src/usbd_desc.c ****   * Copyright (c) 2018 STMicroelectronics International N.V.
  14:Src/usbd_desc.c ****   * All rights reserved.
  15:Src/usbd_desc.c ****   *
  16:Src/usbd_desc.c ****   * Redistribution and use in source and binary forms, with or without
  17:Src/usbd_desc.c ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/usbd_desc.c ****   *
  19:Src/usbd_desc.c ****   * 1. Redistribution of source code must retain the above copyright notice,
  20:Src/usbd_desc.c ****   *    this list of conditions and the following disclaimer.
  21:Src/usbd_desc.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/usbd_desc.c ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/usbd_desc.c ****   *    and/or other materials provided with the distribution.
  24:Src/usbd_desc.c ****   * 3. Neither the name of STMicroelectronics nor the names of other
  25:Src/usbd_desc.c ****   *    contributors to this software may be used to endorse or promote products
  26:Src/usbd_desc.c ****   *    derived from this software without specific written permission.
  27:Src/usbd_desc.c ****   * 4. This software, including modifications and/or derivative works of this
  28:Src/usbd_desc.c ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/usbd_desc.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/usbd_desc.c ****   * 5. Redistribution and use of this software other than as permitted under
  31:Src/usbd_desc.c ****   *    this license is void and will automatically terminate your rights under
  32:Src/usbd_desc.c ****   *    this license.
  33:Src/usbd_desc.c ****   *
ARM GAS  /tmp/ccZka3eD.s 			page 2


  34:Src/usbd_desc.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS"
  35:Src/usbd_desc.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT
  36:Src/usbd_desc.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  37:Src/usbd_desc.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/usbd_desc.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT
  39:Src/usbd_desc.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/usbd_desc.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/usbd_desc.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  42:Src/usbd_desc.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  43:Src/usbd_desc.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  44:Src/usbd_desc.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/usbd_desc.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/usbd_desc.c ****   *
  47:Src/usbd_desc.c ****   ******************************************************************************
  48:Src/usbd_desc.c ****   */
  49:Src/usbd_desc.c **** 
  50:Src/usbd_desc.c **** /* Includes ------------------------------------------------------------------*/
  51:Src/usbd_desc.c **** #include "usbd_core.h"
  52:Src/usbd_desc.c **** #include "usbd_desc.h"
  53:Src/usbd_desc.c **** #include "usbd_conf.h"
  54:Src/usbd_desc.c **** 
  55:Src/usbd_desc.c **** /* USER CODE BEGIN INCLUDE */
  56:Src/usbd_desc.c **** 
  57:Src/usbd_desc.c **** /* USER CODE END INCLUDE */
  58:Src/usbd_desc.c **** 
  59:Src/usbd_desc.c **** /* Private typedef -----------------------------------------------------------*/
  60:Src/usbd_desc.c **** /* Private define ------------------------------------------------------------*/
  61:Src/usbd_desc.c **** /* Private macro -------------------------------------------------------------*/
  62:Src/usbd_desc.c **** 
  63:Src/usbd_desc.c **** /* USER CODE BEGIN PV */
  64:Src/usbd_desc.c **** /* Private variables ---------------------------------------------------------*/
  65:Src/usbd_desc.c **** 
  66:Src/usbd_desc.c **** /* USER CODE END PV */
  67:Src/usbd_desc.c **** 
  68:Src/usbd_desc.c **** /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
  69:Src/usbd_desc.c ****   * @{
  70:Src/usbd_desc.c ****   */
  71:Src/usbd_desc.c **** 
  72:Src/usbd_desc.c **** /** @addtogroup USBD_DESC
  73:Src/usbd_desc.c ****   * @{
  74:Src/usbd_desc.c ****   */
  75:Src/usbd_desc.c **** 
  76:Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_TypesDefinitions USBD_DESC_Private_TypesDefinitions
  77:Src/usbd_desc.c ****   * @brief Private types.
  78:Src/usbd_desc.c ****   * @{
  79:Src/usbd_desc.c ****   */
  80:Src/usbd_desc.c **** 
  81:Src/usbd_desc.c **** /* USER CODE BEGIN PRIVATE_TYPES */
  82:Src/usbd_desc.c **** 
  83:Src/usbd_desc.c **** /* USER CODE END PRIVATE_TYPES */
  84:Src/usbd_desc.c **** 
  85:Src/usbd_desc.c **** /**
  86:Src/usbd_desc.c ****   * @}
  87:Src/usbd_desc.c ****   */
  88:Src/usbd_desc.c **** 
  89:Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Defines USBD_DESC_Private_Defines
  90:Src/usbd_desc.c ****   * @brief Private defines.
ARM GAS  /tmp/ccZka3eD.s 			page 3


  91:Src/usbd_desc.c ****   * @{
  92:Src/usbd_desc.c ****   */
  93:Src/usbd_desc.c **** 
  94:Src/usbd_desc.c **** /*
  95:Src/usbd_desc.c ****  *************************************************[ATTENTION]**************************************
  96:Src/usbd_desc.c ****  *
  97:Src/usbd_desc.c ****  * VID 0x1209 and PID 0x0001 is experimental IDs from http://pid.codes .
  98:Src/usbd_desc.c ****  * You must get your own IDs, and change to your own IDs in order to avoid conflicting to other USB
  99:Src/usbd_desc.c ****  *
 100:Src/usbd_desc.c ****  **************************************************************************************************
 101:Src/usbd_desc.c **** */
 102:Src/usbd_desc.c **** 
 103:Src/usbd_desc.c **** #define USBD_VID     0x1209		//MUST BE CHANGED.
 104:Src/usbd_desc.c **** #define USBD_LANGID_STRING     1041
 105:Src/usbd_desc.c **** #define USBD_MANUFACTURER_STRING     "Otter Scientific"
 106:Src/usbd_desc.c **** #define USBD_PID_FS     0x0001	//MUST BE CHANGED.
 107:Src/usbd_desc.c **** #define USBD_PRODUCT_STRING_FS     "PCB MIDI Tesla Coil"
 108:Src/usbd_desc.c **** #define USBD_SERIALNUMBER_STRING_FS     "00000000001A"
 109:Src/usbd_desc.c **** #define USBD_CONFIGURATION_STRING_FS     "MIDI Config"
 110:Src/usbd_desc.c **** #define USBD_INTERFACE_STRING_FS     "MIDI Interface"
 111:Src/usbd_desc.c **** 
 112:Src/usbd_desc.c **** 
 113:Src/usbd_desc.c **** 
 114:Src/usbd_desc.c **** /* USER CODE BEGIN PRIVATE_DEFINES */
 115:Src/usbd_desc.c **** 
 116:Src/usbd_desc.c **** /* USER CODE END PRIVATE_DEFINES */
 117:Src/usbd_desc.c **** 
 118:Src/usbd_desc.c **** /**
 119:Src/usbd_desc.c ****   * @}
 120:Src/usbd_desc.c ****   */
 121:Src/usbd_desc.c **** 
 122:Src/usbd_desc.c **** /* USER CODE BEGIN 0 */
 123:Src/usbd_desc.c **** 
 124:Src/usbd_desc.c **** /* USER CODE END 0 */
 125:Src/usbd_desc.c **** 
 126:Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Macros USBD_DESC_Private_Macros
 127:Src/usbd_desc.c ****   * @brief Private macros.
 128:Src/usbd_desc.c ****   * @{
 129:Src/usbd_desc.c ****   */
 130:Src/usbd_desc.c **** 
 131:Src/usbd_desc.c **** /* USER CODE BEGIN PRIVATE_MACRO */
 132:Src/usbd_desc.c **** 
 133:Src/usbd_desc.c **** /* USER CODE END PRIVATE_MACRO */
 134:Src/usbd_desc.c **** 
 135:Src/usbd_desc.c **** /**
 136:Src/usbd_desc.c ****   * @}
 137:Src/usbd_desc.c ****   */
 138:Src/usbd_desc.c **** 
 139:Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_FunctionPrototypes USBD_DESC_Private_FunctionPrototypes
 140:Src/usbd_desc.c ****   * @brief Private functions declaration.
 141:Src/usbd_desc.c ****   * @{
 142:Src/usbd_desc.c ****   */
 143:Src/usbd_desc.c **** 
 144:Src/usbd_desc.c **** uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 145:Src/usbd_desc.c **** uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 146:Src/usbd_desc.c **** uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 147:Src/usbd_desc.c **** uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
ARM GAS  /tmp/ccZka3eD.s 			page 4


 148:Src/usbd_desc.c **** uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 149:Src/usbd_desc.c **** uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 150:Src/usbd_desc.c **** uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 151:Src/usbd_desc.c **** 
 152:Src/usbd_desc.c **** #ifdef USB_SUPPORT_USER_STRING_DESC
 153:Src/usbd_desc.c **** uint8_t * USBD_FS_USRStringDesc(USBD_SpeedTypeDef speed, uint8_t idx, uint16_t *length);
 154:Src/usbd_desc.c **** #endif /* USB_SUPPORT_USER_STRING_DESC */
 155:Src/usbd_desc.c **** 
 156:Src/usbd_desc.c **** /**
 157:Src/usbd_desc.c ****   * @}
 158:Src/usbd_desc.c ****   */
 159:Src/usbd_desc.c **** 
 160:Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Variables USBD_DESC_Private_Variables
 161:Src/usbd_desc.c ****   * @brief Private variables.
 162:Src/usbd_desc.c ****   * @{
 163:Src/usbd_desc.c ****   */
 164:Src/usbd_desc.c **** 
 165:Src/usbd_desc.c **** USBD_DescriptorsTypeDef FS_Desc =
 166:Src/usbd_desc.c **** {
 167:Src/usbd_desc.c ****   USBD_FS_DeviceDescriptor
 168:Src/usbd_desc.c **** , USBD_FS_LangIDStrDescriptor
 169:Src/usbd_desc.c **** , USBD_FS_ManufacturerStrDescriptor
 170:Src/usbd_desc.c **** , USBD_FS_ProductStrDescriptor
 171:Src/usbd_desc.c **** , USBD_FS_SerialStrDescriptor
 172:Src/usbd_desc.c **** , USBD_FS_ConfigStrDescriptor
 173:Src/usbd_desc.c **** , USBD_FS_InterfaceStrDescriptor
 174:Src/usbd_desc.c **** };
 175:Src/usbd_desc.c **** 
 176:Src/usbd_desc.c **** #if defined ( __ICCARM__ ) /* IAR Compiler */
 177:Src/usbd_desc.c ****   #pragma data_alignment=4
 178:Src/usbd_desc.c **** #endif /* defined ( __ICCARM__ ) */
 179:Src/usbd_desc.c **** /** USB standard device descriptor. */
 180:Src/usbd_desc.c **** __ALIGN_BEGIN uint8_t USBD_FS_DeviceDesc[USB_LEN_DEV_DESC] __ALIGN_END =
 181:Src/usbd_desc.c **** {
 182:Src/usbd_desc.c ****   0x12,                       /*bLength */
 183:Src/usbd_desc.c ****   USB_DESC_TYPE_DEVICE,       /*bDescriptorType*/
 184:Src/usbd_desc.c ****   0x00,                       /*bcdUSB */
 185:Src/usbd_desc.c ****   0x02,
 186:Src/usbd_desc.c ****   0x02,                       /*bDeviceClass*/
 187:Src/usbd_desc.c ****   0x02,                       /*bDeviceSubClass*/
 188:Src/usbd_desc.c ****   0x00,                       /*bDeviceProtocol*/
 189:Src/usbd_desc.c ****   USB_MAX_EP0_SIZE,           /*bMaxPacketSize*/
 190:Src/usbd_desc.c ****   LOBYTE(USBD_VID),           /*idVendor*/
 191:Src/usbd_desc.c ****   HIBYTE(USBD_VID),           /*idVendor*/
 192:Src/usbd_desc.c ****   LOBYTE(USBD_PID_FS),        /*idProduct*/
 193:Src/usbd_desc.c ****   HIBYTE(USBD_PID_FS),        /*idProduct*/
 194:Src/usbd_desc.c ****   0x00,                       /*bcdDevice rel. 2.00*/
 195:Src/usbd_desc.c ****   0x02,
 196:Src/usbd_desc.c ****   USBD_IDX_MFC_STR,           /*Index of manufacturer  string*/
 197:Src/usbd_desc.c ****   USBD_IDX_PRODUCT_STR,       /*Index of product string*/
 198:Src/usbd_desc.c ****   USBD_IDX_SERIAL_STR,        /*Index of serial number string*/
 199:Src/usbd_desc.c ****   USBD_MAX_NUM_CONFIGURATION  /*bNumConfigurations*/
 200:Src/usbd_desc.c **** };
 201:Src/usbd_desc.c **** 
 202:Src/usbd_desc.c **** /* USB_DeviceDescriptor */
 203:Src/usbd_desc.c **** 
 204:Src/usbd_desc.c **** /**
ARM GAS  /tmp/ccZka3eD.s 			page 5


 205:Src/usbd_desc.c ****   * @}
 206:Src/usbd_desc.c ****   */
 207:Src/usbd_desc.c **** 
 208:Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Variables USBD_DESC_Private_Variables
 209:Src/usbd_desc.c ****   * @brief Private variables.
 210:Src/usbd_desc.c ****   * @{
 211:Src/usbd_desc.c ****   */
 212:Src/usbd_desc.c **** 
 213:Src/usbd_desc.c **** #if defined ( __ICCARM__ ) /* IAR Compiler */
 214:Src/usbd_desc.c ****   #pragma data_alignment=4
 215:Src/usbd_desc.c **** #endif /* defined ( __ICCARM__ ) */
 216:Src/usbd_desc.c **** 
 217:Src/usbd_desc.c **** /** USB lang indentifier descriptor. */
 218:Src/usbd_desc.c **** __ALIGN_BEGIN uint8_t USBD_LangIDDesc[USB_LEN_LANGID_STR_DESC] __ALIGN_END =
 219:Src/usbd_desc.c **** {
 220:Src/usbd_desc.c ****      USB_LEN_LANGID_STR_DESC,
 221:Src/usbd_desc.c ****      USB_DESC_TYPE_STRING,
 222:Src/usbd_desc.c ****      LOBYTE(USBD_LANGID_STRING),
 223:Src/usbd_desc.c ****      HIBYTE(USBD_LANGID_STRING)
 224:Src/usbd_desc.c **** };
 225:Src/usbd_desc.c **** 
 226:Src/usbd_desc.c **** #if defined ( __ICCARM__ ) /* IAR Compiler */
 227:Src/usbd_desc.c ****   #pragma data_alignment=4
 228:Src/usbd_desc.c **** #endif /* defined ( __ICCARM__ ) */
 229:Src/usbd_desc.c **** /* Internal string descriptor. */
 230:Src/usbd_desc.c **** __ALIGN_BEGIN uint8_t USBD_StrDesc[USBD_MAX_STR_DESC_SIZ] __ALIGN_END;
 231:Src/usbd_desc.c **** 
 232:Src/usbd_desc.c **** /**
 233:Src/usbd_desc.c ****   * @}
 234:Src/usbd_desc.c ****   */
 235:Src/usbd_desc.c **** 
 236:Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Functions USBD_DESC_Private_Functions
 237:Src/usbd_desc.c ****   * @brief Private functions.
 238:Src/usbd_desc.c ****   * @{
 239:Src/usbd_desc.c ****   */
 240:Src/usbd_desc.c **** 
 241:Src/usbd_desc.c **** /**
 242:Src/usbd_desc.c ****   * @brief  Return the device descriptor
 243:Src/usbd_desc.c ****   * @param  speed : Current device speed
 244:Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 245:Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 246:Src/usbd_desc.c ****   */
 247:Src/usbd_desc.c **** uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 248:Src/usbd_desc.c **** {
  26              		.loc 1 248 0
  27              		.cfi_startproc
  28              	.LVL0:
 249:Src/usbd_desc.c ****   *length = sizeof(USBD_FS_DeviceDesc);
  29              		.loc 1 249 0
  30 0000 1223     		mov	r3, #18
  31 0002 0B80     		strh	r3, [r1]
 250:Src/usbd_desc.c ****   return USBD_FS_DeviceDesc;
 251:Src/usbd_desc.c **** }
  32              		.loc 1 251 0
  33 0004 0048     		ldr	r0, .L2
  34              	.LVL1:
  35              		@ sp needed
ARM GAS  /tmp/ccZka3eD.s 			page 6


  36 0006 7047     		bx	lr
  37              	.L3:
  38              		.align	2
  39              	.L2:
  40 0008 00000000 		.word	.LANCHOR0
  41              		.cfi_endproc
  42              	.LFE34:
  44              		.section	.text.USBD_FS_LangIDStrDescriptor,"ax",%progbits
  45              		.align	2
  46              		.global	USBD_FS_LangIDStrDescriptor
  47              		.code	16
  48              		.thumb_func
  50              	USBD_FS_LangIDStrDescriptor:
  51              	.LFB35:
 252:Src/usbd_desc.c **** 
 253:Src/usbd_desc.c **** /**
 254:Src/usbd_desc.c ****   * @brief  Return the LangID string descriptor
 255:Src/usbd_desc.c ****   * @param  speed : Current device speed
 256:Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 257:Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 258:Src/usbd_desc.c ****   */
 259:Src/usbd_desc.c **** uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 260:Src/usbd_desc.c **** {
  52              		.loc 1 260 0
  53              		.cfi_startproc
  54              	.LVL2:
 261:Src/usbd_desc.c ****   *length = sizeof(USBD_LangIDDesc);
  55              		.loc 1 261 0
  56 0000 0423     		mov	r3, #4
  57 0002 0B80     		strh	r3, [r1]
 262:Src/usbd_desc.c ****   return USBD_LangIDDesc;
 263:Src/usbd_desc.c **** }
  58              		.loc 1 263 0
  59 0004 0048     		ldr	r0, .L5
  60              	.LVL3:
  61              		@ sp needed
  62 0006 7047     		bx	lr
  63              	.L6:
  64              		.align	2
  65              	.L5:
  66 0008 00000000 		.word	.LANCHOR1
  67              		.cfi_endproc
  68              	.LFE35:
  70              		.section	.text.USBD_FS_ProductStrDescriptor,"ax",%progbits
  71              		.align	2
  72              		.global	USBD_FS_ProductStrDescriptor
  73              		.code	16
  74              		.thumb_func
  76              	USBD_FS_ProductStrDescriptor:
  77              	.LFB36:
 264:Src/usbd_desc.c **** 
 265:Src/usbd_desc.c **** /**
 266:Src/usbd_desc.c ****   * @brief  Return the product string descriptor
 267:Src/usbd_desc.c ****   * @param  speed : Current device speed
 268:Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 269:Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 270:Src/usbd_desc.c ****   */
ARM GAS  /tmp/ccZka3eD.s 			page 7


 271:Src/usbd_desc.c **** uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 272:Src/usbd_desc.c **** {
  78              		.loc 1 272 0
  79              		.cfi_startproc
  80              	.LVL4:
  81 0000 08B5     		push	{r3, lr}
  82              	.LCFI0:
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 3, -8
  85              		.cfi_offset 14, -4
  86 0002 0A1C     		mov	r2, r1
 273:Src/usbd_desc.c ****   if(speed == 0)
  87              		.loc 1 273 0
  88 0004 0028     		cmp	r0, #0
  89 0006 04D1     		bne	.L8
 274:Src/usbd_desc.c ****   {
 275:Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
  90              		.loc 1 275 0
  91 0008 0548     		ldr	r0, .L10
  92              	.LVL5:
  93 000a 0649     		ldr	r1, .L10+4
  94              	.LVL6:
  95 000c FFF7FEFF 		bl	USBD_GetString
  96              	.LVL7:
  97 0010 03E0     		b	.L9
  98              	.LVL8:
  99              	.L8:
 276:Src/usbd_desc.c ****   }
 277:Src/usbd_desc.c ****   else
 278:Src/usbd_desc.c ****   {
 279:Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 100              		.loc 1 279 0
 101 0012 0348     		ldr	r0, .L10
 102              	.LVL9:
 103 0014 0349     		ldr	r1, .L10+4
 104              	.LVL10:
 105 0016 FFF7FEFF 		bl	USBD_GetString
 106              	.LVL11:
 107              	.L9:
 280:Src/usbd_desc.c ****   }
 281:Src/usbd_desc.c ****   return USBD_StrDesc;
 282:Src/usbd_desc.c **** }
 108              		.loc 1 282 0
 109 001a 0248     		ldr	r0, .L10+4
 110              		@ sp needed
 111 001c 08BD     		pop	{r3, pc}
 112              	.L11:
 113 001e C046     		.align	2
 114              	.L10:
 115 0020 00000000 		.word	.LC2
 116 0024 00000000 		.word	USBD_StrDesc
 117              		.cfi_endproc
 118              	.LFE36:
 120              		.section	.text.USBD_FS_ManufacturerStrDescriptor,"ax",%progbits
 121              		.align	2
 122              		.global	USBD_FS_ManufacturerStrDescriptor
 123              		.code	16
ARM GAS  /tmp/ccZka3eD.s 			page 8


 124              		.thumb_func
 126              	USBD_FS_ManufacturerStrDescriptor:
 127              	.LFB37:
 283:Src/usbd_desc.c **** 
 284:Src/usbd_desc.c **** /**
 285:Src/usbd_desc.c ****   * @brief  Return the manufacturer string descriptor
 286:Src/usbd_desc.c ****   * @param  speed : Current device speed
 287:Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 288:Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 289:Src/usbd_desc.c ****   */
 290:Src/usbd_desc.c **** uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 291:Src/usbd_desc.c **** {
 128              		.loc 1 291 0
 129              		.cfi_startproc
 130              	.LVL12:
 131 0000 10B5     		push	{r4, lr}
 132              	.LCFI1:
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 4, -8
 135              		.cfi_offset 14, -4
 136 0002 0A1C     		mov	r2, r1
 292:Src/usbd_desc.c ****   USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 137              		.loc 1 292 0
 138 0004 034C     		ldr	r4, .L13
 139 0006 0448     		ldr	r0, .L13+4
 140              	.LVL13:
 141 0008 211C     		mov	r1, r4
 142              	.LVL14:
 143 000a FFF7FEFF 		bl	USBD_GetString
 144              	.LVL15:
 293:Src/usbd_desc.c ****   return USBD_StrDesc;
 294:Src/usbd_desc.c **** }
 145              		.loc 1 294 0
 146 000e 201C     		mov	r0, r4
 147              		@ sp needed
 148 0010 10BD     		pop	{r4, pc}
 149              	.L14:
 150 0012 C046     		.align	2
 151              	.L13:
 152 0014 00000000 		.word	USBD_StrDesc
 153 0018 14000000 		.word	.LC5
 154              		.cfi_endproc
 155              	.LFE37:
 157              		.section	.text.USBD_FS_SerialStrDescriptor,"ax",%progbits
 158              		.align	2
 159              		.global	USBD_FS_SerialStrDescriptor
 160              		.code	16
 161              		.thumb_func
 163              	USBD_FS_SerialStrDescriptor:
 164              	.LFB38:
 295:Src/usbd_desc.c **** 
 296:Src/usbd_desc.c **** /**
 297:Src/usbd_desc.c ****   * @brief  Return the serial number string descriptor
 298:Src/usbd_desc.c ****   * @param  speed : Current device speed
 299:Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 300:Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 301:Src/usbd_desc.c ****   */
ARM GAS  /tmp/ccZka3eD.s 			page 9


 302:Src/usbd_desc.c **** uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 303:Src/usbd_desc.c **** {
 165              		.loc 1 303 0
 166              		.cfi_startproc
 167              	.LVL16:
 168 0000 08B5     		push	{r3, lr}
 169              	.LCFI2:
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 3, -8
 172              		.cfi_offset 14, -4
 173 0002 0A1C     		mov	r2, r1
 304:Src/usbd_desc.c ****   if(speed == USBD_SPEED_HIGH)
 174              		.loc 1 304 0
 175 0004 0028     		cmp	r0, #0
 176 0006 04D1     		bne	.L16
 305:Src/usbd_desc.c ****   {
 306:Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 177              		.loc 1 306 0
 178 0008 0548     		ldr	r0, .L18
 179              	.LVL17:
 180 000a 0649     		ldr	r1, .L18+4
 181              	.LVL18:
 182 000c FFF7FEFF 		bl	USBD_GetString
 183              	.LVL19:
 184 0010 03E0     		b	.L17
 185              	.LVL20:
 186              	.L16:
 307:Src/usbd_desc.c ****   }
 308:Src/usbd_desc.c ****   else
 309:Src/usbd_desc.c ****   {
 310:Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 187              		.loc 1 310 0
 188 0012 0348     		ldr	r0, .L18
 189              	.LVL21:
 190 0014 0349     		ldr	r1, .L18+4
 191              	.LVL22:
 192 0016 FFF7FEFF 		bl	USBD_GetString
 193              	.LVL23:
 194              	.L17:
 311:Src/usbd_desc.c ****   }
 312:Src/usbd_desc.c ****   return USBD_StrDesc;
 313:Src/usbd_desc.c **** }
 195              		.loc 1 313 0
 196 001a 0248     		ldr	r0, .L18+4
 197              		@ sp needed
 198 001c 08BD     		pop	{r3, pc}
 199              	.L19:
 200 001e C046     		.align	2
 201              	.L18:
 202 0020 28000000 		.word	.LC8
 203 0024 00000000 		.word	USBD_StrDesc
 204              		.cfi_endproc
 205              	.LFE38:
 207              		.section	.text.USBD_FS_ConfigStrDescriptor,"ax",%progbits
 208              		.align	2
 209              		.global	USBD_FS_ConfigStrDescriptor
 210              		.code	16
ARM GAS  /tmp/ccZka3eD.s 			page 10


 211              		.thumb_func
 213              	USBD_FS_ConfigStrDescriptor:
 214              	.LFB39:
 314:Src/usbd_desc.c **** 
 315:Src/usbd_desc.c **** /**
 316:Src/usbd_desc.c ****   * @brief  Return the configuration string descriptor
 317:Src/usbd_desc.c ****   * @param  speed : Current device speed
 318:Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 319:Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 320:Src/usbd_desc.c ****   */
 321:Src/usbd_desc.c **** uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 322:Src/usbd_desc.c **** {
 215              		.loc 1 322 0
 216              		.cfi_startproc
 217              	.LVL24:
 218 0000 08B5     		push	{r3, lr}
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 3, -8
 222              		.cfi_offset 14, -4
 223 0002 0A1C     		mov	r2, r1
 323:Src/usbd_desc.c ****   if(speed == USBD_SPEED_HIGH)
 224              		.loc 1 323 0
 225 0004 0028     		cmp	r0, #0
 226 0006 04D1     		bne	.L21
 324:Src/usbd_desc.c ****   {
 325:Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 227              		.loc 1 325 0
 228 0008 0548     		ldr	r0, .L23
 229              	.LVL25:
 230 000a 0649     		ldr	r1, .L23+4
 231              	.LVL26:
 232 000c FFF7FEFF 		bl	USBD_GetString
 233              	.LVL27:
 234 0010 03E0     		b	.L22
 235              	.LVL28:
 236              	.L21:
 326:Src/usbd_desc.c ****   }
 327:Src/usbd_desc.c ****   else
 328:Src/usbd_desc.c ****   {
 329:Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 237              		.loc 1 329 0
 238 0012 0348     		ldr	r0, .L23
 239              	.LVL29:
 240 0014 0349     		ldr	r1, .L23+4
 241              	.LVL30:
 242 0016 FFF7FEFF 		bl	USBD_GetString
 243              	.LVL31:
 244              	.L22:
 330:Src/usbd_desc.c ****   }
 331:Src/usbd_desc.c ****   return USBD_StrDesc;
 332:Src/usbd_desc.c **** }
 245              		.loc 1 332 0
 246 001a 0248     		ldr	r0, .L23+4
 247              		@ sp needed
 248 001c 08BD     		pop	{r3, pc}
 249              	.L24:
ARM GAS  /tmp/ccZka3eD.s 			page 11


 250 001e C046     		.align	2
 251              	.L23:
 252 0020 38000000 		.word	.LC11
 253 0024 00000000 		.word	USBD_StrDesc
 254              		.cfi_endproc
 255              	.LFE39:
 257              		.section	.text.USBD_FS_InterfaceStrDescriptor,"ax",%progbits
 258              		.align	2
 259              		.global	USBD_FS_InterfaceStrDescriptor
 260              		.code	16
 261              		.thumb_func
 263              	USBD_FS_InterfaceStrDescriptor:
 264              	.LFB40:
 333:Src/usbd_desc.c **** 
 334:Src/usbd_desc.c **** /**
 335:Src/usbd_desc.c ****   * @brief  Return the interface string descriptor
 336:Src/usbd_desc.c ****   * @param  speed : Current device speed
 337:Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 338:Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 339:Src/usbd_desc.c ****   */
 340:Src/usbd_desc.c **** uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 341:Src/usbd_desc.c **** {
 265              		.loc 1 341 0
 266              		.cfi_startproc
 267              	.LVL32:
 268 0000 08B5     		push	{r3, lr}
 269              	.LCFI4:
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 3, -8
 272              		.cfi_offset 14, -4
 273 0002 0A1C     		mov	r2, r1
 342:Src/usbd_desc.c ****   if(speed == 0)
 274              		.loc 1 342 0
 275 0004 0028     		cmp	r0, #0
 276 0006 04D1     		bne	.L26
 343:Src/usbd_desc.c ****   {
 344:Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 277              		.loc 1 344 0
 278 0008 0548     		ldr	r0, .L28
 279              	.LVL33:
 280 000a 0649     		ldr	r1, .L28+4
 281              	.LVL34:
 282 000c FFF7FEFF 		bl	USBD_GetString
 283              	.LVL35:
 284 0010 03E0     		b	.L27
 285              	.LVL36:
 286              	.L26:
 345:Src/usbd_desc.c ****   }
 346:Src/usbd_desc.c ****   else
 347:Src/usbd_desc.c ****   {
 348:Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 287              		.loc 1 348 0
 288 0012 0348     		ldr	r0, .L28
 289              	.LVL37:
 290 0014 0349     		ldr	r1, .L28+4
 291              	.LVL38:
 292 0016 FFF7FEFF 		bl	USBD_GetString
ARM GAS  /tmp/ccZka3eD.s 			page 12


 293              	.LVL39:
 294              	.L27:
 349:Src/usbd_desc.c ****   }
 350:Src/usbd_desc.c ****   return USBD_StrDesc;
 351:Src/usbd_desc.c **** }
 295              		.loc 1 351 0
 296 001a 0248     		ldr	r0, .L28+4
 297              		@ sp needed
 298 001c 08BD     		pop	{r3, pc}
 299              	.L29:
 300 001e C046     		.align	2
 301              	.L28:
 302 0020 44000000 		.word	.LC14
 303 0024 00000000 		.word	USBD_StrDesc
 304              		.cfi_endproc
 305              	.LFE40:
 307              		.comm	USBD_StrDesc,512,4
 308              		.global	USBD_LangIDDesc
 309              		.global	USBD_FS_DeviceDesc
 310              		.global	FS_Desc
 311              		.section	.data.FS_Desc,"aw",%progbits
 312              		.align	2
 315              	FS_Desc:
 316 0000 00000000 		.word	USBD_FS_DeviceDescriptor
 317 0004 00000000 		.word	USBD_FS_LangIDStrDescriptor
 318 0008 00000000 		.word	USBD_FS_ManufacturerStrDescriptor
 319 000c 00000000 		.word	USBD_FS_ProductStrDescriptor
 320 0010 00000000 		.word	USBD_FS_SerialStrDescriptor
 321 0014 00000000 		.word	USBD_FS_ConfigStrDescriptor
 322 0018 00000000 		.word	USBD_FS_InterfaceStrDescriptor
 323              		.section	.data.USBD_LangIDDesc,"aw",%progbits
 324              		.align	2
 325              		.set	.LANCHOR1,. + 0
 328              	USBD_LangIDDesc:
 329 0000 04       		.byte	4
 330 0001 03       		.byte	3
 331 0002 11       		.byte	17
 332 0003 04       		.byte	4
 333              		.section	.rodata.str1.4,"aMS",%progbits,1
 334              		.align	2
 335              	.LC2:
 336 0000 50434220 		.ascii	"PCB MIDI Tesla Coil\000"
 336      4D494449 
 336      20546573 
 336      6C612043 
 336      6F696C00 
 337              	.LC5:
 338 0014 4F747465 		.ascii	"Otter Scientific\000"
 338      72205363 
 338      69656E74 
 338      69666963 
 338      00
 339 0025 000000   		.space	3
 340              	.LC8:
 341 0028 30303030 		.ascii	"00000000001A\000"
 341      30303030 
 341      30303141 
ARM GAS  /tmp/ccZka3eD.s 			page 13


 341      00
 342 0035 000000   		.space	3
 343              	.LC11:
 344 0038 4D494449 		.ascii	"MIDI Config\000"
 344      20436F6E 
 344      66696700 
 345              	.LC14:
 346 0044 4D494449 		.ascii	"MIDI Interface\000"
 346      20496E74 
 346      65726661 
 346      636500
 347 0053 00       		.section	.data.USBD_FS_DeviceDesc,"aw",%progbits
 348              		.align	2
 349              		.set	.LANCHOR0,. + 0
 352              	USBD_FS_DeviceDesc:
 353 0000 12       		.byte	18
 354 0001 01       		.byte	1
 355 0002 00       		.byte	0
 356 0003 02       		.byte	2
 357 0004 02       		.byte	2
 358 0005 02       		.byte	2
 359 0006 00       		.byte	0
 360 0007 40       		.byte	64
 361 0008 09       		.byte	9
 362 0009 12       		.byte	18
 363 000a 01       		.byte	1
 364 000b 00       		.byte	0
 365 000c 00       		.byte	0
 366 000d 02       		.byte	2
 367 000e 01       		.byte	1
 368 000f 02       		.byte	2
 369 0010 03       		.byte	3
 370 0011 01       		.byte	1
 371 0012 0000     		.text
 372              	.Letext0:
 373              		.file 2 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_defaul
 374              		.file 3 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 375              		.file 4 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 376              		.file 5 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ctlreq.h"
ARM GAS  /tmp/ccZka3eD.s 			page 14


DEFINED SYMBOLS
                            *ABS*:00000000 usbd_desc.c
     /tmp/ccZka3eD.s:18     .text.USBD_FS_DeviceDescriptor:00000000 $t
     /tmp/ccZka3eD.s:23     .text.USBD_FS_DeviceDescriptor:00000000 USBD_FS_DeviceDescriptor
     /tmp/ccZka3eD.s:40     .text.USBD_FS_DeviceDescriptor:00000008 $d
     /tmp/ccZka3eD.s:45     .text.USBD_FS_LangIDStrDescriptor:00000000 $t
     /tmp/ccZka3eD.s:50     .text.USBD_FS_LangIDStrDescriptor:00000000 USBD_FS_LangIDStrDescriptor
     /tmp/ccZka3eD.s:66     .text.USBD_FS_LangIDStrDescriptor:00000008 $d
     /tmp/ccZka3eD.s:71     .text.USBD_FS_ProductStrDescriptor:00000000 $t
     /tmp/ccZka3eD.s:76     .text.USBD_FS_ProductStrDescriptor:00000000 USBD_FS_ProductStrDescriptor
     /tmp/ccZka3eD.s:115    .text.USBD_FS_ProductStrDescriptor:00000020 $d
                            *COM*:00000200 USBD_StrDesc
     /tmp/ccZka3eD.s:121    .text.USBD_FS_ManufacturerStrDescriptor:00000000 $t
     /tmp/ccZka3eD.s:126    .text.USBD_FS_ManufacturerStrDescriptor:00000000 USBD_FS_ManufacturerStrDescriptor
     /tmp/ccZka3eD.s:152    .text.USBD_FS_ManufacturerStrDescriptor:00000014 $d
     /tmp/ccZka3eD.s:158    .text.USBD_FS_SerialStrDescriptor:00000000 $t
     /tmp/ccZka3eD.s:163    .text.USBD_FS_SerialStrDescriptor:00000000 USBD_FS_SerialStrDescriptor
     /tmp/ccZka3eD.s:202    .text.USBD_FS_SerialStrDescriptor:00000020 $d
     /tmp/ccZka3eD.s:208    .text.USBD_FS_ConfigStrDescriptor:00000000 $t
     /tmp/ccZka3eD.s:213    .text.USBD_FS_ConfigStrDescriptor:00000000 USBD_FS_ConfigStrDescriptor
     /tmp/ccZka3eD.s:252    .text.USBD_FS_ConfigStrDescriptor:00000020 $d
     /tmp/ccZka3eD.s:258    .text.USBD_FS_InterfaceStrDescriptor:00000000 $t
     /tmp/ccZka3eD.s:263    .text.USBD_FS_InterfaceStrDescriptor:00000000 USBD_FS_InterfaceStrDescriptor
     /tmp/ccZka3eD.s:302    .text.USBD_FS_InterfaceStrDescriptor:00000020 $d
     /tmp/ccZka3eD.s:328    .data.USBD_LangIDDesc:00000000 USBD_LangIDDesc
     /tmp/ccZka3eD.s:352    .data.USBD_FS_DeviceDesc:00000000 USBD_FS_DeviceDesc
     /tmp/ccZka3eD.s:315    .data.FS_Desc:00000000 FS_Desc
     /tmp/ccZka3eD.s:312    .data.FS_Desc:00000000 $d
     /tmp/ccZka3eD.s:324    .data.USBD_LangIDDesc:00000000 $d
     /tmp/ccZka3eD.s:334    .rodata.str1.4:00000000 $d
     /tmp/ccZka3eD.s:348    .data.USBD_FS_DeviceDesc:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
USBD_GetString
