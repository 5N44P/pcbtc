ARM GAS  /tmp/ccq08EEq.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"led_blink.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ledInit,"ax",%progbits
  18              		.align	2
  19              		.global	ledInit
  20              		.code	16
  21              		.thumb_func
  23              	ledInit:
  24              	.LFB34:
  25              		.file 1 "Src/led_blink.c"
   1:Src/led_blink.c **** /*
   2:Src/led_blink.c ****  *******************************************************************************
   3:Src/led_blink.c ****  *  [led_blink.c]
   4:Src/led_blink.c ****  *  This module manages led blinking.
   5:Src/led_blink.c ****  *
   6:Src/led_blink.c ****  *  This program is under the terms of the GPLv3.
   7:Src/led_blink.c ****  *  https://www.gnu.org/licenses/gpl-3.0.html
   8:Src/led_blink.c ****  *
   9:Src/led_blink.c ****  *  Copyright(c) 2018 Keshikan (www.keshikan.net)
  10:Src/led_blink.c ****  *******************************************************************************
  11:Src/led_blink.c ****  */
  12:Src/led_blink.c **** 
  13:Src/led_blink.c **** #include <led_blink.h>
  14:Src/led_blink.c **** 
  15:Src/led_blink.c **** uint32_t cnt[LED_NUM];
  16:Src/led_blink.c **** bool isActivate[LED_NUM];
  17:Src/led_blink.c **** 
  18:Src/led_blink.c **** GPIO_TypeDef* led_gpio[LED_NUM]={LED_IN1_GPIO, LED_IN2_GPIO, LED_OUT1_GPIO, LED_OUT2_GPIO, LED_POW_
  19:Src/led_blink.c **** 
  20:Src/led_blink.c **** uint16_t led_pin[LED_NUM]={LED_IN1_PIN, LED_IN2_PIN, LED_OUT1_PIN, LED_OUT2_PIN, LED_POW_PIN};
  21:Src/led_blink.c **** 
  22:Src/led_blink.c **** //call before calling other methods.
  23:Src/led_blink.c **** void ledInit()
  24:Src/led_blink.c **** {
  26              		.loc 1 24 0
  27              		.cfi_startproc
  28 0000 10B5     		push	{r4, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 4, -8
  32              		.cfi_offset 14, -4
  33              	.LVL0:
  34              	.LBB2:
ARM GAS  /tmp/ccq08EEq.s 			page 2


  25:Src/led_blink.c **** 	for(uint32_t i=0; i<LED_NUM; i++){
  35              		.loc 1 25 0
  36 0002 0023     		mov	r3, #0
  26:Src/led_blink.c **** 		cnt[i] = 0;
  37              		.loc 1 26 0
  38 0004 054C     		ldr	r4, .L4
  39 0006 0022     		mov	r2, #0
  27:Src/led_blink.c **** 		isActivate[i] = false;
  40              		.loc 1 27 0
  41 0008 0548     		ldr	r0, .L4+4
  25:Src/led_blink.c **** 	for(uint32_t i=0; i<LED_NUM; i++){
  42              		.loc 1 25 0
  43 000a 03E0     		b	.L2
  44              	.LVL1:
  45              	.L3:
  26:Src/led_blink.c **** 		cnt[i] = 0;
  46              		.loc 1 26 0 discriminator 2
  47 000c 9900     		lsl	r1, r3, #2
  48 000e 0A51     		str	r2, [r1, r4]
  49              		.loc 1 27 0 discriminator 2
  50 0010 C254     		strb	r2, [r0, r3]
  25:Src/led_blink.c **** 	for(uint32_t i=0; i<LED_NUM; i++){
  51              		.loc 1 25 0 discriminator 2
  52 0012 0133     		add	r3, r3, #1
  53              	.LVL2:
  54              	.L2:
  25:Src/led_blink.c **** 	for(uint32_t i=0; i<LED_NUM; i++){
  55              		.loc 1 25 0 is_stmt 0 discriminator 1
  56 0014 042B     		cmp	r3, #4
  57 0016 F9D9     		bls	.L3
  58              	.LBE2:
  28:Src/led_blink.c **** 	}
  29:Src/led_blink.c **** }
  59              		.loc 1 29 0 is_stmt 1
  60              		@ sp needed
  61 0018 10BD     		pop	{r4, pc}
  62              	.L5:
  63 001a C046     		.align	2
  64              	.L4:
  65 001c 00000000 		.word	cnt
  66 0020 00000000 		.word	isActivate
  67              		.cfi_endproc
  68              	.LFE34:
  70              		.section	.text.ledActivate,"ax",%progbits
  71              		.align	2
  72              		.global	ledActivate
  73              		.code	16
  74              		.thumb_func
  76              	ledActivate:
  77              	.LFB35:
  30:Src/led_blink.c **** 
  31:Src/led_blink.c **** void ledActivate(uint32_t led_num)
  32:Src/led_blink.c **** {
  78              		.loc 1 32 0
  79              		.cfi_startproc
  80              	.LVL3:
  81 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccq08EEq.s 			page 3


  82              	.LCFI1:
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 3, -8
  85              		.cfi_offset 14, -4
  33:Src/led_blink.c **** 	if(led_num >= LED_NUM){
  86              		.loc 1 33 0
  87 0002 0428     		cmp	r0, #4
  88 0004 0CD8     		bhi	.L6
  34:Src/led_blink.c **** 		return;
  35:Src/led_blink.c **** 	}
  36:Src/led_blink.c **** 
  37:Src/led_blink.c **** 	isActivate[led_num] = true;
  89              		.loc 1 37 0
  90 0006 0122     		mov	r2, #1
  91 0008 064B     		ldr	r3, .L8
  92 000a 1A54     		strb	r2, [r3, r0]
  38:Src/led_blink.c **** 	HAL_GPIO_WritePin(led_gpio[led_num], led_pin[led_num], SET);
  93              		.loc 1 38 0
  94 000c 8200     		lsl	r2, r0, #2
  95 000e 064B     		ldr	r3, .L8+4
  96 0010 D358     		ldr	r3, [r2, r3]
  97 0012 4000     		lsl	r0, r0, #1
  98              	.LVL4:
  99 0014 054A     		ldr	r2, .L8+8
 100 0016 815A     		ldrh	r1, [r0, r2]
 101 0018 181C     		mov	r0, r3
 102 001a 0122     		mov	r2, #1
 103 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 104              	.LVL5:
 105              	.L6:
  39:Src/led_blink.c **** }
 106              		.loc 1 39 0
 107              		@ sp needed
 108 0020 08BD     		pop	{r3, pc}
 109              	.L9:
 110 0022 C046     		.align	2
 111              	.L8:
 112 0024 00000000 		.word	isActivate
 113 0028 00000000 		.word	.LANCHOR0
 114 002c 00000000 		.word	.LANCHOR1
 115              		.cfi_endproc
 116              	.LFE35:
 118              		.section	.text.ledIncrementState,"ax",%progbits
 119              		.align	2
 120              		.global	ledIncrementState
 121              		.code	16
 122              		.thumb_func
 124              	ledIncrementState:
 125              	.LFB36:
  40:Src/led_blink.c **** 
  41:Src/led_blink.c **** // Call from timer
  42:Src/led_blink.c **** void ledIncrementState()
  43:Src/led_blink.c **** {
 126              		.loc 1 43 0
 127              		.cfi_startproc
 128 0000 10B5     		push	{r4, lr}
 129              	.LCFI2:
ARM GAS  /tmp/ccq08EEq.s 			page 4


 130              		.cfi_def_cfa_offset 8
 131              		.cfi_offset 4, -8
 132              		.cfi_offset 14, -4
 133              	.LVL6:
 134              	.LBB3:
  44:Src/led_blink.c **** 	for(uint32_t i=0; i<LED_NUM; i++){
 135              		.loc 1 44 0
 136 0002 0023     		mov	r3, #0
  45:Src/led_blink.c **** 		if(isActivate[i]){
 137              		.loc 1 45 0
 138 0004 0649     		ldr	r1, .L14
  46:Src/led_blink.c **** 			cnt[i]++;
 139              		.loc 1 46 0
 140 0006 0748     		ldr	r0, .L14+4
  44:Src/led_blink.c **** 	for(uint32_t i=0; i<LED_NUM; i++){
 141              		.loc 1 44 0
 142 0008 07E0     		b	.L11
 143              	.LVL7:
 144              	.L13:
  45:Src/led_blink.c **** 		if(isActivate[i]){
 145              		.loc 1 45 0
 146 000a CA5C     		ldrb	r2, [r1, r3]
 147 000c 002A     		cmp	r2, #0
 148 000e 03D0     		beq	.L12
 149              		.loc 1 46 0
 150 0010 9A00     		lsl	r2, r3, #2
 151 0012 1458     		ldr	r4, [r2, r0]
 152 0014 0134     		add	r4, r4, #1
 153 0016 1450     		str	r4, [r2, r0]
 154              	.L12:
  44:Src/led_blink.c **** 	for(uint32_t i=0; i<LED_NUM; i++){
 155              		.loc 1 44 0
 156 0018 0133     		add	r3, r3, #1
 157              	.LVL8:
 158              	.L11:
  44:Src/led_blink.c **** 	for(uint32_t i=0; i<LED_NUM; i++){
 159              		.loc 1 44 0 is_stmt 0 discriminator 1
 160 001a 042B     		cmp	r3, #4
 161 001c F5D9     		bls	.L13
 162              	.LBE3:
  47:Src/led_blink.c **** 		}
  48:Src/led_blink.c **** 	}
  49:Src/led_blink.c **** }
 163              		.loc 1 49 0 is_stmt 1
 164              		@ sp needed
 165 001e 10BD     		pop	{r4, pc}
 166              	.L15:
 167              		.align	2
 168              	.L14:
 169 0020 00000000 		.word	isActivate
 170 0024 00000000 		.word	cnt
 171              		.cfi_endproc
 172              	.LFE36:
 174              		.section	.text.ledMain,"ax",%progbits
 175              		.align	2
 176              		.global	ledMain
 177              		.code	16
ARM GAS  /tmp/ccq08EEq.s 			page 5


 178              		.thumb_func
 180              	ledMain:
 181              	.LFB37:
  50:Src/led_blink.c **** 
  51:Src/led_blink.c **** // Call from main()
  52:Src/led_blink.c **** void ledMain()
  53:Src/led_blink.c **** {
 182              		.loc 1 53 0
 183              		.cfi_startproc
 184 0000 38B5     		push	{r3, r4, r5, lr}
 185              	.LCFI3:
 186              		.cfi_def_cfa_offset 16
 187              		.cfi_offset 3, -16
 188              		.cfi_offset 4, -12
 189              		.cfi_offset 5, -8
 190              		.cfi_offset 14, -4
 191              	.LVL9:
 192              	.LBB4:
  54:Src/led_blink.c **** 	for(uint32_t i=0; i<LED_NUM; i++){
 193              		.loc 1 54 0
 194 0002 0024     		mov	r4, #0
  55:Src/led_blink.c **** 		if(cnt[i] >= LED_CNT_THR){
 195              		.loc 1 55 0
 196 0004 0B4D     		ldr	r5, .L20
  54:Src/led_blink.c **** 	for(uint32_t i=0; i<LED_NUM; i++){
 197              		.loc 1 54 0
 198 0006 12E0     		b	.L17
 199              	.LVL10:
 200              	.L19:
 201              		.loc 1 55 0
 202 0008 A300     		lsl	r3, r4, #2
 203 000a 5B59     		ldr	r3, [r3, r5]
 204 000c 042B     		cmp	r3, #4
 205 000e 0DD9     		bls	.L18
  56:Src/led_blink.c **** 			isActivate[i] = false;
 206              		.loc 1 56 0
 207 0010 0022     		mov	r2, #0
 208 0012 0949     		ldr	r1, .L20+4
 209 0014 0A55     		strb	r2, [r1, r4]
  57:Src/led_blink.c **** 			cnt[i] = 0;
 210              		.loc 1 57 0
 211 0016 A300     		lsl	r3, r4, #2
 212 0018 0649     		ldr	r1, .L20
 213 001a 5A50     		str	r2, [r3, r1]
  58:Src/led_blink.c **** 			HAL_GPIO_WritePin(led_gpio[i], led_pin[i], RESET);
 214              		.loc 1 58 0
 215 001c 074A     		ldr	r2, .L20+8
 216 001e 9858     		ldr	r0, [r3, r2]
 217 0020 6300     		lsl	r3, r4, #1
 218 0022 074A     		ldr	r2, .L20+12
 219 0024 995A     		ldrh	r1, [r3, r2]
 220 0026 0022     		mov	r2, #0
 221 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 222              	.LVL11:
 223              	.L18:
  54:Src/led_blink.c **** 	for(uint32_t i=0; i<LED_NUM; i++){
 224              		.loc 1 54 0
ARM GAS  /tmp/ccq08EEq.s 			page 6


 225 002c 0134     		add	r4, r4, #1
 226              	.LVL12:
 227              	.L17:
  54:Src/led_blink.c **** 	for(uint32_t i=0; i<LED_NUM; i++){
 228              		.loc 1 54 0 is_stmt 0 discriminator 1
 229 002e 042C     		cmp	r4, #4
 230 0030 EAD9     		bls	.L19
 231              	.LBE4:
  59:Src/led_blink.c **** 		}
  60:Src/led_blink.c **** 	}
  61:Src/led_blink.c **** }
 232              		.loc 1 61 0 is_stmt 1
 233              		@ sp needed
 234              	.LVL13:
 235 0032 38BD     		pop	{r3, r4, r5, pc}
 236              	.L21:
 237              		.align	2
 238              	.L20:
 239 0034 00000000 		.word	cnt
 240 0038 00000000 		.word	isActivate
 241 003c 00000000 		.word	.LANCHOR0
 242 0040 00000000 		.word	.LANCHOR1
 243              		.cfi_endproc
 244              	.LFE37:
 246              		.global	led_pin
 247              		.global	led_gpio
 248              		.comm	isActivate,5,4
 249              		.comm	cnt,20,4
 250              		.section	.data.led_gpio,"aw",%progbits
 251              		.align	2
 252              		.set	.LANCHOR0,. + 0
 255              	led_gpio:
 256 0000 00000048 		.word	1207959552
 257 0004 00000048 		.word	1207959552
 258 0008 00000048 		.word	1207959552
 259 000c 00000048 		.word	1207959552
 260 0010 00040048 		.word	1207960576
 261              		.section	.data.led_pin,"aw",%progbits
 262              		.align	2
 263              		.set	.LANCHOR1,. + 0
 266              	led_pin:
 267 0000 1000     		.short	16
 268 0002 2000     		.short	32
 269 0004 4000     		.short	64
 270 0006 8000     		.short	128
 271 0008 0800     		.short	8
 272 000a 0000     		.text
 273              	.Letext0:
 274              		.file 2 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_defaul
 275              		.file 3 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 276              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 277              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 278              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
ARM GAS  /tmp/ccq08EEq.s 			page 7


DEFINED SYMBOLS
                            *ABS*:00000000 led_blink.c
     /tmp/ccq08EEq.s:18     .text.ledInit:00000000 $t
     /tmp/ccq08EEq.s:23     .text.ledInit:00000000 ledInit
     /tmp/ccq08EEq.s:65     .text.ledInit:0000001c $d
                            *COM*:00000014 cnt
                            *COM*:00000005 isActivate
     /tmp/ccq08EEq.s:71     .text.ledActivate:00000000 $t
     /tmp/ccq08EEq.s:76     .text.ledActivate:00000000 ledActivate
     /tmp/ccq08EEq.s:112    .text.ledActivate:00000024 $d
     /tmp/ccq08EEq.s:119    .text.ledIncrementState:00000000 $t
     /tmp/ccq08EEq.s:124    .text.ledIncrementState:00000000 ledIncrementState
     /tmp/ccq08EEq.s:169    .text.ledIncrementState:00000020 $d
     /tmp/ccq08EEq.s:175    .text.ledMain:00000000 $t
     /tmp/ccq08EEq.s:180    .text.ledMain:00000000 ledMain
     /tmp/ccq08EEq.s:239    .text.ledMain:00000034 $d
     /tmp/ccq08EEq.s:266    .data.led_pin:00000000 led_pin
     /tmp/ccq08EEq.s:255    .data.led_gpio:00000000 led_gpio
     /tmp/ccq08EEq.s:251    .data.led_gpio:00000000 $d
     /tmp/ccq08EEq.s:262    .data.led_pin:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
