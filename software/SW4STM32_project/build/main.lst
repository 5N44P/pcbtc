ARM GAS  /tmp/cc1sYoNU.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	2
  19              		.code	16
  20              		.thumb_func
  22              	MX_GPIO_Init:
  23              	.LFB39:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2018 STMicroelectronics International N.V.
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice,
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under
  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under
  32:Src/main.c    ****   *    this license.
  33:Src/main.c    ****   *
  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS"
ARM GAS  /tmp/cc1sYoNU.s 			page 2


  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f0xx_hal.h"
  52:Src/main.c    **** #include "usb_device.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN Includes */
  55:Src/main.c    **** #include "device_conf.h"
  56:Src/main.c    **** #include "led_blink.h"
  57:Src/main.c    **** #include "curemisc.h"
  58:Src/main.c    **** #include "curebuffer.h"
  59:Src/main.c    **** #include "usbd_midi_if.h"
  60:Src/main.c    **** #include "math.h"
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END Includes */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** TIM_HandleTypeDef htim17;
  66:Src/main.c    **** 
  67:Src/main.c    **** TIM_HandleTypeDef htim2;
  68:Src/main.c    **** /*
  69:Src/main.c    **** UART_HandleTypeDef huart1;
  70:Src/main.c    **** UART_HandleTypeDef huart2;
  71:Src/main.c    **** DMA_HandleTypeDef hdma_usart1_rx;
  72:Src/main.c    **** DMA_HandleTypeDef hdma_usart2_rx;
  73:Src/main.c    **** */
  74:Src/main.c    **** /* USER CODE BEGIN PV */
  75:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  76:Src/main.c    **** /*
  77:Src/main.c    **** bool isUartReady[2] = {true, true};
  78:Src/main.c    **** UART_HandleTypeDef* uart_handler[2] = {&huart1, &huart2};
  79:Src/main.c    **** 
  80:Src/main.c    **** uint8_t uart_tx_dat;
  81:Src/main.c    **** 
  82:Src/main.c    **** uint8_t uart_rx_dat[MIDI_IN_JACK_NUM];
  83:Src/main.c    **** */
  84:Src/main.c    **** 
  85:Src/main.c    **** uint8_t uart_tx_dat;
  86:Src/main.c    **** /* USER CODE END PV */
  87:Src/main.c    **** 
  88:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  89:Src/main.c    **** void SystemClock_Config(void);
  90:Src/main.c    **** static void MX_GPIO_Init(void);
  91:Src/main.c    **** //static void MX_DMA_Init(void);
ARM GAS  /tmp/cc1sYoNU.s 			page 3


  92:Src/main.c    **** //static void MX_USART1_UART_Init(void);
  93:Src/main.c    **** //static void MX_USART2_UART_Init(void);
  94:Src/main.c    **** static void MX_TIM17_Init(void);
  95:Src/main.c    **** static void USER_TIM2_Init(void);
  96:Src/main.c    **** 
  97:Src/main.c    **** /* USER CODE BEGIN PFP */
  98:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  99:Src/main.c    **** 
 100:Src/main.c    **** /* USER CODE END PFP */
 101:Src/main.c    **** 
 102:Src/main.c    **** /* USER CODE BEGIN 0 */
 103:Src/main.c    **** 
 104:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 105:Src/main.c    **** {
 106:Src/main.c    **** 
 107:Src/main.c    **** 	if(htim->Instance == TIM17)
 108:Src/main.c    **** 	{
 109:Src/main.c    **** 		ledIncrementState();
 110:Src/main.c    **** 	}
 111:Src/main.c    **** 
 112:Src/main.c    **** }
 113:Src/main.c    **** /*
 114:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 115:Src/main.c    **** {
 116:Src/main.c    **** 	if(huart->Instance == USART1)
 117:Src/main.c    **** 	{
 118:Src/main.c    **** 		ledActivate(0);
 119:Src/main.c    **** 		midiSetFromJackRx(0, &uart_rx_dat[0]);
 120:Src/main.c    **** 		HAL_UART_Receive_DMA(&huart1, &uart_rx_dat[0],1);
 121:Src/main.c    **** 
 122:Src/main.c    **** 	}else if(huart->Instance == USART2)
 123:Src/main.c    **** 	{
 124:Src/main.c    **** 		ledActivate(1);
 125:Src/main.c    **** 		midiSetFromJackRx(1, &uart_rx_dat[1]);
 126:Src/main.c    **** 		HAL_UART_Receive_DMA(&huart2, &uart_rx_dat[1],1);
 127:Src/main.c    **** 
 128:Src/main.c    **** 	}
 129:Src/main.c    **** }
 130:Src/main.c    **** 
 131:Src/main.c    **** void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 132:Src/main.c    **** {
 133:Src/main.c    **** 	if(huart->Instance == USART1){
 134:Src/main.c    **** 		ledActivate(2);
 135:Src/main.c    **** 		isUartReady[0] = true;
 136:Src/main.c    **** 	}else if(huart->Instance == USART2){
 137:Src/main.c    **** 		ledActivate(3);
 138:Src/main.c    **** 		isUartReady[1] = true;
 139:Src/main.c    **** 	}
 140:Src/main.c    **** }
 141:Src/main.c    **** 
 142:Src/main.c    **** void sendUart(uint8_t ch, uint8_t* dat)
 143:Src/main.c    **** {
 144:Src/main.c    **** 	isUartReady[ch] = false;
 145:Src/main.c    **** 	HAL_UART_Transmit_IT(uart_handler[ch], dat,1);
 146:Src/main.c    **** }
 147:Src/main.c    **** */
 148:Src/main.c    **** /* USER CODE END 0 */
ARM GAS  /tmp/cc1sYoNU.s 			page 4


 149:Src/main.c    **** 
 150:Src/main.c    **** /**
 151:Src/main.c    ****   * @brief  The application entry point.
 152:Src/main.c    ****   *
 153:Src/main.c    ****   * @retval None
 154:Src/main.c    ****   */
 155:Src/main.c    **** 
 156:Src/main.c    **** 
 157:Src/main.c    **** uint8_t midiBuffer[4];
 158:Src/main.c    **** uint8_t midiState = 0;
 159:Src/main.c    **** 
 160:Src/main.c    **** uint16_t curTone = 0;
 161:Src/main.c    **** uint16_t curChannel = 0;
 162:Src/main.c    **** uint16_t lastTone = 0;
 163:Src/main.c    **** uint32_t curPeriode = 0;
 164:Src/main.c    **** uint32_t noteTimeout = 0;
 165:Src/main.c    **** 
 166:Src/main.c    **** uint16_t freqs[16] = {0};
 167:Src/main.c    **** bool lit = true;
 168:Src/main.c    **** int chordingPeriod = 60; // ms
 169:Src/main.c    **** long unsigned int lastNoteT = 0;
 170:Src/main.c    **** int16_t pitchBend = 0;
 171:Src/main.c    **** 
 172:Src/main.c    **** 
 173:Src/main.c    **** int main(void)
 174:Src/main.c    **** {
 175:Src/main.c    ****   /* USER CODE BEGIN 1 */
 176:Src/main.c    **** 
 177:Src/main.c    ****   /* USER CODE END 1 */
 178:Src/main.c    **** 
 179:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 180:Src/main.c    **** 
 181:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 182:Src/main.c    ****   HAL_Init();
 183:Src/main.c    **** 
 184:Src/main.c    ****   /* USER CODE BEGIN Init */
 185:Src/main.c    **** 
 186:Src/main.c    ****   /* USER CODE END Init */
 187:Src/main.c    **** 
 188:Src/main.c    ****   /* Configure the system clock */
 189:Src/main.c    ****   SystemClock_Config();
 190:Src/main.c    **** 
 191:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 192:Src/main.c    **** 
 193:Src/main.c    ****   /* USER CODE END SysInit */
 194:Src/main.c    **** 
 195:Src/main.c    ****   /* Initialize all configured peripherals */
 196:Src/main.c    ****   MX_GPIO_Init();
 197:Src/main.c    **** 
 198:Src/main.c    ****   //MX_DMA_Init();
 199:Src/main.c    ****   //MX_USART1_UART_Init();
 200:Src/main.c    ****   //MX_USART2_UART_Init();
 201:Src/main.c    ****   MX_TIM17_Init();
 202:Src/main.c    **** 	USER_TIM2_Init();
 203:Src/main.c    **** 
 204:Src/main.c    **** 	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 205:Src/main.c    **** 	TIM2->CR1 &= ~(1UL);
ARM GAS  /tmp/cc1sYoNU.s 			page 5


 206:Src/main.c    **** 
 207:Src/main.c    ****   /* USER CODE BEGIN 2 */
 208:Src/main.c    **** 
 209:Src/main.c    ****   //USB-MIDI Init
 210:Src/main.c    ****   MX_USB_MIDI_INIT();
 211:Src/main.c    **** 
 212:Src/main.c    ****   //Init misc
 213:Src/main.c    ****   //ledInit();
 214:Src/main.c    **** 
 215:Src/main.c    ****   if(FUNC_ERROR == midiInit() ){
 216:Src/main.c    **** 	  while(1){
 217:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 218:Src/main.c    **** 		  HAL_Delay(500);
 219:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 220:Src/main.c    **** 		  HAL_Delay(500);
 221:Src/main.c    **** 	  }
 222:Src/main.c    ****   }
 223:Src/main.c    **** 
 224:Src/main.c    ****   //Wait usb configuration.
 225:Src/main.c    ****   while(1){
 226:Src/main.c    **** 	  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 227:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 228:Src/main.c    **** 		  break;
 229:Src/main.c    **** 	  }else{
 230:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 231:Src/main.c    **** 	  }
 232:Src/main.c    ****   }
 233:Src/main.c    **** 
 234:Src/main.c    ****   //start led-blinking timer
 235:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim17);
 236:Src/main.c    **** 
 237:Src/main.c    ****   //Start MIDI Receive from IN Jack
 238:Src/main.c    ****   //HAL_UART_Receive_DMA(&huart1, &uart_rx_dat[0],1);
 239:Src/main.c    ****   //HAL_UART_Receive_DMA(&huart2, &uart_rx_dat[1],1);
 240:Src/main.c    **** 
 241:Src/main.c    ****   /* USER CODE END 2 */
 242:Src/main.c    **** 
 243:Src/main.c    ****   /* Infinite loop */
 244:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 245:Src/main.c    ****   while (1)
 246:Src/main.c    ****   {
 247:Src/main.c    **** 
 248:Src/main.c    ****   /* USER CODE END WHILE */
 249:Src/main.c    **** 
 250:Src/main.c    ****   /* USER CODE BEGIN 3 */
 251:Src/main.c    **** 
 252:Src/main.c    ****   //Wait USB configuration when USB connection error has occurred.
 253:Src/main.c    ****   while(1){
 254:Src/main.c    **** 	  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 255:Src/main.c    **** 		  //HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 256:Src/main.c    **** 		  break;
 257:Src/main.c    **** 	  }else{
 258:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 259:Src/main.c    **** 		  HAL_Delay(200);
 260:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 261:Src/main.c    **** 		  HAL_Delay(200);
 262:Src/main.c    **** 	  }
ARM GAS  /tmp/cc1sYoNU.s 			page 6


 263:Src/main.c    ****   }
 264:Src/main.c    **** 
 265:Src/main.c    **** 	curTone = 0;
 266:Src/main.c    **** 
 267:Src/main.c    **** 	for (int i = 0; i < 16; i++) {
 268:Src/main.c    **** 		if (freqs[i] > curTone) {
 269:Src/main.c    **** 			curTone = freqs[i];
 270:Src/main.c    **** 		}
 271:Src/main.c    **** 	}
 272:Src/main.c    **** 	//curTone = freqs[0];
 273:Src/main.c    **** 
 274:Src/main.c    **** 	if (curTone > 20 && curTone != lastTone) {
 275:Src/main.c    **** 		curPeriode = (uint32_t)12000000 / (uint32_t)(curTone);
 276:Src/main.c    **** 		TIM2->CR1 = TIM2->CR1 | 1;
 277:Src/main.c    **** 		TIM2->CNT = 0;
 278:Src/main.c    **** 		TIM2->ARR = curPeriode;
 279:Src/main.c    **** 		lastTone = curTone;
 280:Src/main.c    **** 		noteTimeout = HAL_GetTick();
 281:Src/main.c    **** 	} else if ((curTone < 20 && curTone != lastTone) || (HAL_GetTick() - noteTimeout) > 2000) {
 282:Src/main.c    **** 		TIM2->CNT = 0;
 283:Src/main.c    **** 		TIM2->ARR = curPeriode;
 284:Src/main.c    **** 		TIM2->CR1 &= ~(1UL);
 285:Src/main.c    **** 	}
 286:Src/main.c    **** 
 287:Src/main.c    **** 
 288:Src/main.c    **** 	//[USB-MIDI IN] to [MIDI JACK OUT]
 289:Src/main.c    **** 
 290:Src/main.c    **** 	if( FUNC_SUCCESS == midiGetFromUsbRx(0, &uart_tx_dat)){
 291:Src/main.c    **** 		if (uart_tx_dat >> 7 == 1) {
 292:Src/main.c    **** 			midiBuffer[0] = uart_tx_dat;
 293:Src/main.c    **** 			midiBuffer[1] = 0;
 294:Src/main.c    **** 			midiBuffer[2] = 0;
 295:Src/main.c    **** 			midiState = 1;
 296:Src/main.c    **** 		} else if (midiState == 1) {
 297:Src/main.c    **** 			midiBuffer[1] = uart_tx_dat;
 298:Src/main.c    **** 			midiState = 2;
 299:Src/main.c    **** 		} else if (midiState == 2) {
 300:Src/main.c    **** 			midiBuffer[2] = uart_tx_dat;
 301:Src/main.c    **** 			midiState = 3;
 302:Src/main.c    **** 
 303:Src/main.c    **** 			if ((midiBuffer[0] & 0xF0) == 0x90) { // Note on, 2 data bytes
 304:Src/main.c    **** 				char key = midiBuffer[1];
 305:Src/main.c    **** 				char vel = midiBuffer[2];
 306:Src/main.c    **** 
 307:Src/main.c    **** 				uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 308:Src/main.c    **** 				curChannel = midiBuffer[0] & 0xF;
 309:Src/main.c    **** 				freqs[curChannel] = freq;
 310:Src/main.c    **** 
 311:Src/main.c    **** 
 312:Src/main.c    **** 			} if ((midiBuffer[0] &0xF0) == 0x80) { // Note off, 2 data bytes
 313:Src/main.c    **** 				char key = midiBuffer[1];
 314:Src/main.c    **** 				char vel = midiBuffer[2];
 315:Src/main.c    **** 
 316:Src/main.c    **** 				uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 317:Src/main.c    **** 
 318:Src/main.c    **** 				//if (freqs[midiBuffer[0] & 0xF] == freq) {
 319:Src/main.c    **** 					freqs[midiBuffer[0] & 0xF] = 0;
ARM GAS  /tmp/cc1sYoNU.s 			page 7


 320:Src/main.c    **** 				//}
 321:Src/main.c    **** 			}
 322:Src/main.c    **** 		}
 323:Src/main.c    **** 	}
 324:Src/main.c    **** 
 325:Src/main.c    **** 	//[MIDI JACK IN] to [USB-MIDI OUT]
 326:Src/main.c    **** 	//midiProcess();
 327:Src/main.c    **** 
 328:Src/main.c    **** 
 329:Src/main.c    ****   }
 330:Src/main.c    ****   /* USER CODE END 3 */
 331:Src/main.c    **** 
 332:Src/main.c    **** }
 333:Src/main.c    **** 
 334:Src/main.c    **** /** System Clock Configuration
 335:Src/main.c    **** */
 336:Src/main.c    **** void SystemClock_Config(void)
 337:Src/main.c    **** {
 338:Src/main.c    **** 
 339:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 340:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 341:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 342:Src/main.c    **** 
 343:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 344:Src/main.c    ****     */
 345:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 346:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 347:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 348:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 349:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 350:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 351:Src/main.c    ****   {
 352:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 353:Src/main.c    ****   }
 354:Src/main.c    **** 
 355:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 356:Src/main.c    ****     */
 357:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 358:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 359:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 360:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 361:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 362:Src/main.c    **** 
 363:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 364:Src/main.c    ****   {
 365:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 366:Src/main.c    ****   }
 367:Src/main.c    **** 
 368:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 369:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 370:Src/main.c    **** 
 371:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 372:Src/main.c    ****   {
 373:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 374:Src/main.c    ****   }
 375:Src/main.c    **** 
 376:Src/main.c    ****     /**Configure the Systick interrupt time
ARM GAS  /tmp/cc1sYoNU.s 			page 8


 377:Src/main.c    ****     */
 378:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 379:Src/main.c    **** 
 380:Src/main.c    ****     /**Configure the Systick
 381:Src/main.c    ****     */
 382:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 383:Src/main.c    **** 
 384:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 385:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 386:Src/main.c    **** }
 387:Src/main.c    **** 
 388:Src/main.c    **** /* TIM17 init function */
 389:Src/main.c    **** static void MX_TIM17_Init(void)
 390:Src/main.c    **** {
 391:Src/main.c    **** 
 392:Src/main.c    ****   htim17.Instance = TIM17;
 393:Src/main.c    ****   htim17.Init.Prescaler = 999;
 394:Src/main.c    ****   htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 395:Src/main.c    ****   htim17.Init.Period = 47;
 396:Src/main.c    ****   htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 397:Src/main.c    ****   htim17.Init.RepetitionCounter = 0;
 398:Src/main.c    ****   htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 399:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 400:Src/main.c    ****   {
 401:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 402:Src/main.c    ****   }
 403:Src/main.c    **** 
 404:Src/main.c    **** }
 405:Src/main.c    **** 
 406:Src/main.c    **** static void USER_TIM2_Init(void) {
 407:Src/main.c    **** 	__HAL_RCC_TIM2_CLK_ENABLE();
 408:Src/main.c    **** 
 409:Src/main.c    **** 	TIM_ClockConfigTypeDef sClockSourceConfig;
 410:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig;
 411:Src/main.c    **** 	TIM_OC_InitTypeDef sConfigOC;
 412:Src/main.c    **** 
 413:Src/main.c    **** 	htim2.Instance = TIM2;
 414:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 415:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 416:Src/main.c    **** 	htim2.Init.Period = 60000;
 417:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 418:Src/main.c    **** 	HAL_TIM_PWM_Init(&htim2);
 419:Src/main.c    **** 
 420:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 421:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 422:Src/main.c    **** 	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 423:Src/main.c    **** 
 424:Src/main.c    **** 	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 425:Src/main.c    **** 	sConfigOC.Pulse = 3000;
 426:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 427:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 428:Src/main.c    **** 	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 429:Src/main.c    **** 	HAL_TIM_MspPostInit(&htim2);
 430:Src/main.c    **** }
 431:Src/main.c    **** 
 432:Src/main.c    **** /* USART1 init function */
 433:Src/main.c    **** /*static void MX_USART1_UART_Init(void)
ARM GAS  /tmp/cc1sYoNU.s 			page 9


 434:Src/main.c    **** {
 435:Src/main.c    **** 
 436:Src/main.c    ****   huart1.Instance = USART1;
 437:Src/main.c    ****   huart1.Init.BaudRate = 31250;
 438:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 439:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 440:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 441:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 442:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 443:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 444:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 445:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 446:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 447:Src/main.c    ****   {
 448:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 449:Src/main.c    ****   }
 450:Src/main.c    **** 
 451:Src/main.c    **** }*/
 452:Src/main.c    **** 
 453:Src/main.c    **** /* USART2 init function */
 454:Src/main.c    **** /*static void MX_USART2_UART_Init(void)
 455:Src/main.c    **** {
 456:Src/main.c    **** 
 457:Src/main.c    ****   huart2.Instance = USART2;
 458:Src/main.c    ****   huart2.Init.BaudRate = 31250;
 459:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 460:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 461:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 462:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 463:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 464:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 465:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 466:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 467:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 468:Src/main.c    ****   {
 469:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 470:Src/main.c    ****   }
 471:Src/main.c    **** 
 472:Src/main.c    **** }*/
 473:Src/main.c    **** 
 474:Src/main.c    **** /**
 475:Src/main.c    ****   * Enable DMA controller clock
 476:Src/main.c    ****   */
 477:Src/main.c    **** 
 478:Src/main.c    **** 
 479:Src/main.c    **** /** Configure pins as
 480:Src/main.c    ****         * Analog
 481:Src/main.c    ****         * Input
 482:Src/main.c    ****         * Output
 483:Src/main.c    ****         * EVENT_OUT
 484:Src/main.c    ****         * EXTI
 485:Src/main.c    **** */
 486:Src/main.c    **** static void MX_GPIO_Init(void)
 487:Src/main.c    **** {
  25              		.loc 1 487 0
  26              		.cfi_startproc
  27 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  /tmp/cc1sYoNU.s 			page 10


  28              	.LCFI0:
  29              		.cfi_def_cfa_offset 20
  30              		.cfi_offset 4, -20
  31              		.cfi_offset 5, -16
  32              		.cfi_offset 6, -12
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 89B0     		sub	sp, sp, #36
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 56
  38              	.LBB2:
 488:Src/main.c    **** 
 489:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 490:Src/main.c    **** 
 491:Src/main.c    ****   /* GPIO Ports Clock Enable */
 492:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  39              		.loc 1 492 0
  40 0004 1E4B     		ldr	r3, .L2
  41 0006 5969     		ldr	r1, [r3, #20]
  42 0008 8022     		mov	r2, #128
  43 000a D203     		lsl	r2, r2, #15
  44 000c 1143     		orr	r1, r2
  45 000e 5961     		str	r1, [r3, #20]
  46 0010 5969     		ldr	r1, [r3, #20]
  47 0012 0A40     		and	r2, r1
  48 0014 0092     		str	r2, [sp]
  49 0016 009A     		ldr	r2, [sp]
  50              	.LBE2:
  51              	.LBB3:
 493:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  52              		.loc 1 493 0
  53 0018 5969     		ldr	r1, [r3, #20]
  54 001a 8022     		mov	r2, #128
  55 001c 9202     		lsl	r2, r2, #10
  56 001e 1143     		orr	r1, r2
  57 0020 5961     		str	r1, [r3, #20]
  58 0022 5969     		ldr	r1, [r3, #20]
  59 0024 0A40     		and	r2, r1
  60 0026 0192     		str	r2, [sp, #4]
  61 0028 019A     		ldr	r2, [sp, #4]
  62              	.LBE3:
  63              	.LBB4:
 494:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  64              		.loc 1 494 0
  65 002a 5969     		ldr	r1, [r3, #20]
  66 002c 8022     		mov	r2, #128
  67 002e D202     		lsl	r2, r2, #11
  68 0030 1143     		orr	r1, r2
  69 0032 5961     		str	r1, [r3, #20]
  70 0034 5B69     		ldr	r3, [r3, #20]
  71 0036 1A40     		and	r2, r3
  72 0038 0292     		str	r2, [sp, #8]
  73 003a 029B     		ldr	r3, [sp, #8]
  74              	.LBE4:
 495:Src/main.c    **** 
 496:Src/main.c    ****   /*Configure GPIO pin Output Level */
 497:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
ARM GAS  /tmp/cc1sYoNU.s 			page 11


  75              		.loc 1 497 0
  76 003c 9027     		mov	r7, #144
  77 003e FF05     		lsl	r7, r7, #23
  78 0040 381C     		mov	r0, r7
  79 0042 F021     		mov	r1, #240
  80 0044 0022     		mov	r2, #0
  81 0046 FFF7FEFF 		bl	HAL_GPIO_WritePin
  82              	.LVL0:
 498:Src/main.c    **** 
 499:Src/main.c    ****   /*Configure GPIO pin Output Level */
 500:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
  83              		.loc 1 500 0
  84 004a 0E4E     		ldr	r6, .L2+4
  85 004c 301C     		mov	r0, r6
  86 004e 0121     		mov	r1, #1
  87 0050 0022     		mov	r2, #0
  88 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
  89              	.LVL1:
 501:Src/main.c    **** 
 502:Src/main.c    ****   /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
 503:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  90              		.loc 1 503 0
  91 0056 F023     		mov	r3, #240
  92 0058 0393     		str	r3, [sp, #12]
 504:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  93              		.loc 1 504 0
  94 005a 0125     		mov	r5, #1
  95 005c 0495     		str	r5, [sp, #16]
 505:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  96              		.loc 1 505 0
  97 005e 0024     		mov	r4, #0
  98 0060 0594     		str	r4, [sp, #20]
 506:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  99              		.loc 1 506 0
 100 0062 0694     		str	r4, [sp, #24]
 507:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 101              		.loc 1 507 0
 102 0064 381C     		mov	r0, r7
 103 0066 03A9     		add	r1, sp, #12
 104 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 105              	.LVL2:
 508:Src/main.c    **** 
 509:Src/main.c    ****   /*Configure GPIO pin : PB0 */
 510:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 106              		.loc 1 510 0
 107 006c 0395     		str	r5, [sp, #12]
 511:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 108              		.loc 1 511 0
 109 006e 0495     		str	r5, [sp, #16]
 512:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 110              		.loc 1 512 0
 111 0070 0594     		str	r4, [sp, #20]
 513:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 112              		.loc 1 513 0
 113 0072 0694     		str	r4, [sp, #24]
 514:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 114              		.loc 1 514 0
ARM GAS  /tmp/cc1sYoNU.s 			page 12


 115 0074 301C     		mov	r0, r6
 116 0076 03A9     		add	r1, sp, #12
 117 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 118              	.LVL3:
 515:Src/main.c    **** 
 516:Src/main.c    **** }
 119              		.loc 1 516 0
 120 007c 09B0     		add	sp, sp, #36
 121              		@ sp needed
 122 007e F0BD     		pop	{r4, r5, r6, r7, pc}
 123              	.L3:
 124              		.align	2
 125              	.L2:
 126 0080 00100240 		.word	1073876992
 127 0084 00040048 		.word	1207960576
 128              		.cfi_endproc
 129              	.LFE39:
 131              		.section	.text.USER_TIM2_Init,"ax",%progbits
 132              		.align	2
 133              		.code	16
 134              		.thumb_func
 136              	USER_TIM2_Init:
 137              	.LFB38:
 406:Src/main.c    **** static void USER_TIM2_Init(void) {
 138              		.loc 1 406 0
 139              		.cfi_startproc
 140 0000 30B5     		push	{r4, r5, lr}
 141              	.LCFI2:
 142              		.cfi_def_cfa_offset 12
 143              		.cfi_offset 4, -12
 144              		.cfi_offset 5, -8
 145              		.cfi_offset 14, -4
 146 0002 8BB0     		sub	sp, sp, #44
 147              	.LCFI3:
 148              		.cfi_def_cfa_offset 56
 149              	.LBB5:
 407:Src/main.c    **** 	__HAL_RCC_TIM2_CLK_ENABLE();
 150              		.loc 1 407 0
 151 0004 164B     		ldr	r3, .L5
 152 0006 D969     		ldr	r1, [r3, #28]
 153 0008 0122     		mov	r2, #1
 154 000a 1143     		orr	r1, r2
 155 000c D961     		str	r1, [r3, #28]
 156 000e DB69     		ldr	r3, [r3, #28]
 157 0010 1A40     		and	r2, r3
 158 0012 0092     		str	r2, [sp]
 159 0014 009B     		ldr	r3, [sp]
 160              	.LBE5:
 413:Src/main.c    **** 	htim2.Instance = TIM2;
 161              		.loc 1 413 0
 162 0016 134C     		ldr	r4, .L5+4
 163 0018 8023     		mov	r3, #128
 164 001a DB05     		lsl	r3, r3, #23
 165 001c 2360     		str	r3, [r4]
 414:Src/main.c    **** 	htim2.Init.Prescaler = 0;
 166              		.loc 1 414 0
 167 001e 0025     		mov	r5, #0
ARM GAS  /tmp/cc1sYoNU.s 			page 13


 168 0020 6560     		str	r5, [r4, #4]
 415:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 169              		.loc 1 415 0
 170 0022 A560     		str	r5, [r4, #8]
 416:Src/main.c    **** 	htim2.Init.Period = 60000;
 171              		.loc 1 416 0
 172 0024 104B     		ldr	r3, .L5+8
 173 0026 E360     		str	r3, [r4, #12]
 417:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 174              		.loc 1 417 0
 175 0028 8023     		mov	r3, #128
 176 002a 9B00     		lsl	r3, r3, #2
 177 002c 2361     		str	r3, [r4, #16]
 418:Src/main.c    **** 	HAL_TIM_PWM_Init(&htim2);
 178              		.loc 1 418 0
 179 002e 201C     		mov	r0, r4
 180 0030 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 181              	.LVL4:
 420:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 182              		.loc 1 420 0
 183 0034 0895     		str	r5, [sp, #32]
 421:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 184              		.loc 1 421 0
 185 0036 0995     		str	r5, [sp, #36]
 422:Src/main.c    **** 	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 186              		.loc 1 422 0
 187 0038 201C     		mov	r0, r4
 188 003a 08A9     		add	r1, sp, #32
 189 003c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 190              	.LVL5:
 424:Src/main.c    **** 	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 191              		.loc 1 424 0
 192 0040 7023     		mov	r3, #112
 193 0042 0193     		str	r3, [sp, #4]
 425:Src/main.c    **** 	sConfigOC.Pulse = 3000;
 194              		.loc 1 425 0
 195 0044 094B     		ldr	r3, .L5+12
 196 0046 0293     		str	r3, [sp, #8]
 426:Src/main.c    **** 	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 197              		.loc 1 426 0
 198 0048 0395     		str	r5, [sp, #12]
 427:Src/main.c    **** 	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 199              		.loc 1 427 0
 200 004a 0595     		str	r5, [sp, #20]
 428:Src/main.c    **** 	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 201              		.loc 1 428 0
 202 004c 201C     		mov	r0, r4
 203 004e 01A9     		add	r1, sp, #4
 204 0050 0022     		mov	r2, #0
 205 0052 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 206              	.LVL6:
 429:Src/main.c    **** 	HAL_TIM_MspPostInit(&htim2);
 207              		.loc 1 429 0
 208 0056 201C     		mov	r0, r4
 209 0058 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 210              	.LVL7:
 430:Src/main.c    **** }
ARM GAS  /tmp/cc1sYoNU.s 			page 14


 211              		.loc 1 430 0
 212 005c 0BB0     		add	sp, sp, #44
 213              		@ sp needed
 214 005e 30BD     		pop	{r4, r5, pc}
 215              	.L6:
 216              		.align	2
 217              	.L5:
 218 0060 00100240 		.word	1073876992
 219 0064 00000000 		.word	htim2
 220 0068 60EA0000 		.word	60000
 221 006c B80B0000 		.word	3000
 222              		.cfi_endproc
 223              	.LFE38:
 225              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 226              		.align	2
 227              		.global	HAL_TIM_PeriodElapsedCallback
 228              		.code	16
 229              		.thumb_func
 231              	HAL_TIM_PeriodElapsedCallback:
 232              	.LFB34:
 105:Src/main.c    **** {
 233              		.loc 1 105 0
 234              		.cfi_startproc
 235              	.LVL8:
 236 0000 08B5     		push	{r3, lr}
 237              	.LCFI4:
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 3, -8
 240              		.cfi_offset 14, -4
 107:Src/main.c    **** 	if(htim->Instance == TIM17)
 241              		.loc 1 107 0
 242 0002 0268     		ldr	r2, [r0]
 243 0004 024B     		ldr	r3, .L9
 244 0006 9A42     		cmp	r2, r3
 245 0008 01D1     		bne	.L7
 109:Src/main.c    **** 		ledIncrementState();
 246              		.loc 1 109 0
 247 000a FFF7FEFF 		bl	ledIncrementState
 248              	.LVL9:
 249              	.L7:
 112:Src/main.c    **** }
 250              		.loc 1 112 0
 251              		@ sp needed
 252 000e 08BD     		pop	{r3, pc}
 253              	.L10:
 254              		.align	2
 255              	.L9:
 256 0010 00480140 		.word	1073825792
 257              		.cfi_endproc
 258              	.LFE34:
 260              		.section	.text._Error_Handler,"ax",%progbits
 261              		.align	2
 262              		.global	_Error_Handler
 263              		.code	16
 264              		.thumb_func
 266              	_Error_Handler:
 267              	.LFB40:
ARM GAS  /tmp/cc1sYoNU.s 			page 15


 517:Src/main.c    **** 
 518:Src/main.c    **** /* USER CODE BEGIN 4 */
 519:Src/main.c    **** 
 520:Src/main.c    **** /* USER CODE END 4 */
 521:Src/main.c    **** 
 522:Src/main.c    **** /**
 523:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 524:Src/main.c    ****   * @param  file: The file name as string.
 525:Src/main.c    ****   * @param  line: The line in file as a number.
 526:Src/main.c    ****   * @retval None
 527:Src/main.c    ****   */
 528:Src/main.c    **** void _Error_Handler(char *file, int line)
 529:Src/main.c    **** {
 268              		.loc 1 529 0
 269              		.cfi_startproc
 270              	.LVL10:
 271              	.L12:
 272 0000 FEE7     		b	.L12
 273              		.cfi_endproc
 274              	.LFE40:
 276 0002 C046     		.section	.text.MX_TIM17_Init,"ax",%progbits
 277              		.align	2
 278              		.code	16
 279              		.thumb_func
 281              	MX_TIM17_Init:
 282              	.LFB37:
 390:Src/main.c    **** {
 283              		.loc 1 390 0
 284              		.cfi_startproc
 390:Src/main.c    **** {
 285              		.loc 1 390 0
 286 0000 08B5     		push	{r3, lr}
 287              	.LCFI5:
 288              		.cfi_def_cfa_offset 8
 289              		.cfi_offset 3, -8
 290              		.cfi_offset 14, -4
 392:Src/main.c    ****   htim17.Instance = TIM17;
 291              		.loc 1 392 0
 292 0002 0B48     		ldr	r0, .L15
 293 0004 0B4B     		ldr	r3, .L15+4
 294 0006 0360     		str	r3, [r0]
 393:Src/main.c    ****   htim17.Init.Prescaler = 999;
 295              		.loc 1 393 0
 296 0008 0B4B     		ldr	r3, .L15+8
 297 000a 4360     		str	r3, [r0, #4]
 394:Src/main.c    ****   htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 298              		.loc 1 394 0
 299 000c 0023     		mov	r3, #0
 300 000e 8360     		str	r3, [r0, #8]
 395:Src/main.c    ****   htim17.Init.Period = 47;
 301              		.loc 1 395 0
 302 0010 2F22     		mov	r2, #47
 303 0012 C260     		str	r2, [r0, #12]
 396:Src/main.c    ****   htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 304              		.loc 1 396 0
 305 0014 0361     		str	r3, [r0, #16]
 397:Src/main.c    ****   htim17.Init.RepetitionCounter = 0;
ARM GAS  /tmp/cc1sYoNU.s 			page 16


 306              		.loc 1 397 0
 307 0016 4361     		str	r3, [r0, #20]
 398:Src/main.c    ****   htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 308              		.loc 1 398 0
 309 0018 8361     		str	r3, [r0, #24]
 399:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 310              		.loc 1 399 0
 311 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 312              	.LVL11:
 313 001e 0028     		cmp	r0, #0
 314 0020 04D0     		beq	.L13
 401:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 315              		.loc 1 401 0
 316 0022 0648     		ldr	r0, .L15+12
 317 0024 9221     		mov	r1, #146
 318 0026 FF31     		add	r1, r1, #255
 319 0028 FFF7FEFF 		bl	_Error_Handler
 320              	.LVL12:
 321              	.L13:
 404:Src/main.c    **** }
 322              		.loc 1 404 0
 323              		@ sp needed
 324 002c 08BD     		pop	{r3, pc}
 325              	.L16:
 326 002e C046     		.align	2
 327              	.L15:
 328 0030 00000000 		.word	htim17
 329 0034 00480140 		.word	1073825792
 330 0038 E7030000 		.word	999
 331 003c 00000000 		.word	.LC2
 332              		.cfi_endproc
 333              	.LFE37:
 335              		.global	__aeabi_uidiv
 336              		.section	.text.SystemClock_Config,"ax",%progbits
 337              		.align	2
 338              		.global	SystemClock_Config
 339              		.code	16
 340              		.thumb_func
 342              	SystemClock_Config:
 343              	.LFB36:
 337:Src/main.c    **** {
 344              		.loc 1 337 0
 345              		.cfi_startproc
 346 0000 00B5     		push	{lr}
 347              	.LCFI6:
 348              		.cfi_def_cfa_offset 4
 349              		.cfi_offset 14, -4
 350 0002 99B0     		sub	sp, sp, #100
 351              	.LCFI7:
 352              		.cfi_def_cfa_offset 104
 345:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 353              		.loc 1 345 0
 354 0004 3023     		mov	r3, #48
 355 0006 0B93     		str	r3, [sp, #44]
 346:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 356              		.loc 1 346 0
 357 0008 0123     		mov	r3, #1
ARM GAS  /tmp/cc1sYoNU.s 			page 17


 358 000a 1393     		str	r3, [sp, #76]
 347:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 359              		.loc 1 347 0
 360 000c 1093     		str	r3, [sp, #64]
 348:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 361              		.loc 1 348 0
 362 000e 1023     		mov	r3, #16
 363 0010 1193     		str	r3, [sp, #68]
 349:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 364              		.loc 1 349 0
 365 0012 0023     		mov	r3, #0
 366 0014 1493     		str	r3, [sp, #80]
 350:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 367              		.loc 1 350 0
 368 0016 0BA8     		add	r0, sp, #44
 369 0018 FFF7FEFF 		bl	HAL_RCC_OscConfig
 370              	.LVL13:
 371 001c 0028     		cmp	r0, #0
 372 001e 04D0     		beq	.L18
 352:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 373              		.loc 1 352 0
 374 0020 1C48     		ldr	r0, .L21
 375 0022 B021     		mov	r1, #176
 376 0024 4900     		lsl	r1, r1, #1
 377 0026 FFF7FEFF 		bl	_Error_Handler
 378              	.LVL14:
 379              	.L18:
 357:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 380              		.loc 1 357 0
 381 002a 0723     		mov	r3, #7
 382 002c 0793     		str	r3, [sp, #28]
 359:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 383              		.loc 1 359 0
 384 002e 0323     		mov	r3, #3
 385 0030 0893     		str	r3, [sp, #32]
 360:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 386              		.loc 1 360 0
 387 0032 0023     		mov	r3, #0
 388 0034 0993     		str	r3, [sp, #36]
 361:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 389              		.loc 1 361 0
 390 0036 0A93     		str	r3, [sp, #40]
 363:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 391              		.loc 1 363 0
 392 0038 07A8     		add	r0, sp, #28
 393 003a 0121     		mov	r1, #1
 394 003c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 395              	.LVL15:
 396 0040 0028     		cmp	r0, #0
 397 0042 04D0     		beq	.L19
 365:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 398              		.loc 1 365 0
 399 0044 1348     		ldr	r0, .L21
 400 0046 6E21     		mov	r1, #110
 401 0048 FF31     		add	r1, r1, #255
 402 004a FFF7FEFF 		bl	_Error_Handler
 403              	.LVL16:
ARM GAS  /tmp/cc1sYoNU.s 			page 18


 404              	.L19:
 368:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 405              		.loc 1 368 0
 406 004e 8023     		mov	r3, #128
 407 0050 9B02     		lsl	r3, r3, #10
 408 0052 0093     		str	r3, [sp]
 369:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 409              		.loc 1 369 0
 410 0054 0023     		mov	r3, #0
 411 0056 0693     		str	r3, [sp, #24]
 371:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 412              		.loc 1 371 0
 413 0058 6846     		mov	r0, sp
 414 005a FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 415              	.LVL17:
 416 005e 0028     		cmp	r0, #0
 417 0060 04D0     		beq	.L20
 373:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 418              		.loc 1 373 0
 419 0062 0C48     		ldr	r0, .L21
 420 0064 7621     		mov	r1, #118
 421 0066 FF31     		add	r1, r1, #255
 422 0068 FFF7FEFF 		bl	_Error_Handler
 423              	.LVL18:
 424              	.L20:
 378:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 425              		.loc 1 378 0
 426 006c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 427              	.LVL19:
 428 0070 FA21     		mov	r1, #250
 429 0072 8900     		lsl	r1, r1, #2
 430 0074 FFF7FEFF 		bl	__aeabi_uidiv
 431              	.LVL20:
 432 0078 FFF7FEFF 		bl	HAL_SYSTICK_Config
 433              	.LVL21:
 382:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 434              		.loc 1 382 0
 435 007c 0420     		mov	r0, #4
 436 007e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 437              	.LVL22:
 385:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 438              		.loc 1 385 0
 439 0082 0120     		mov	r0, #1
 440 0084 4042     		neg	r0, r0
 441 0086 0021     		mov	r1, #0
 442 0088 0022     		mov	r2, #0
 443 008a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 444              	.LVL23:
 386:Src/main.c    **** }
 445              		.loc 1 386 0
 446 008e 19B0     		add	sp, sp, #100
 447              		@ sp needed
 448 0090 00BD     		pop	{pc}
 449              	.L22:
 450 0092 C046     		.align	2
 451              	.L21:
 452 0094 00000000 		.word	.LC2
ARM GAS  /tmp/cc1sYoNU.s 			page 19


 453              		.cfi_endproc
 454              	.LFE36:
 456              		.global	__aeabi_i2d
 457              		.global	__aeabi_ddiv
 458              		.global	__aeabi_dmul
 459              		.global	__aeabi_d2uiz
 460              		.section	.text.main,"ax",%progbits
 461              		.align	2
 462              		.global	main
 463              		.code	16
 464              		.thumb_func
 466              	main:
 467              	.LFB35:
 174:Src/main.c    **** {
 468              		.loc 1 174 0
 469              		.cfi_startproc
 470 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 471              	.LCFI8:
 472              		.cfi_def_cfa_offset 24
 473              		.cfi_offset 3, -24
 474              		.cfi_offset 4, -20
 475              		.cfi_offset 5, -16
 476              		.cfi_offset 6, -12
 477              		.cfi_offset 7, -8
 478              		.cfi_offset 14, -4
 182:Src/main.c    ****   HAL_Init();
 479              		.loc 1 182 0
 480 0002 FFF7FEFF 		bl	HAL_Init
 481              	.LVL24:
 189:Src/main.c    ****   SystemClock_Config();
 482              		.loc 1 189 0
 483 0006 FFF7FEFF 		bl	SystemClock_Config
 484              	.LVL25:
 196:Src/main.c    ****   MX_GPIO_Init();
 485              		.loc 1 196 0
 486 000a FFF7FEFF 		bl	MX_GPIO_Init
 487              	.LVL26:
 201:Src/main.c    ****   MX_TIM17_Init();
 488              		.loc 1 201 0
 489 000e FFF7FEFF 		bl	MX_TIM17_Init
 490              	.LVL27:
 202:Src/main.c    **** 	USER_TIM2_Init();
 491              		.loc 1 202 0
 492 0012 FFF7FEFF 		bl	USER_TIM2_Init
 493              	.LVL28:
 204:Src/main.c    **** 	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 494              		.loc 1 204 0
 495 0016 8848     		ldr	r0, .L43+24
 496 0018 0021     		mov	r1, #0
 497 001a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 498              	.LVL29:
 205:Src/main.c    **** 	TIM2->CR1 &= ~(1UL);
 499              		.loc 1 205 0
 500 001e 8023     		mov	r3, #128
 501 0020 DB05     		lsl	r3, r3, #23
 502 0022 1A68     		ldr	r2, [r3]
 503 0024 0121     		mov	r1, #1
ARM GAS  /tmp/cc1sYoNU.s 			page 20


 504 0026 8A43     		bic	r2, r1
 505 0028 1A60     		str	r2, [r3]
 210:Src/main.c    ****   MX_USB_MIDI_INIT();
 506              		.loc 1 210 0
 507 002a FFF7FEFF 		bl	MX_USB_MIDI_INIT
 508              	.LVL30:
 215:Src/main.c    ****   if(FUNC_ERROR == midiInit() ){
 509              		.loc 1 215 0
 510 002e FFF7FEFF 		bl	midiInit
 511              	.LVL31:
 512 0032 0028     		cmp	r0, #0
 513 0034 13D1     		bne	.L24
 217:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 514              		.loc 1 217 0 discriminator 1
 515 0036 814D     		ldr	r5, .L43+28
 218:Src/main.c    **** 		  HAL_Delay(500);
 516              		.loc 1 218 0 discriminator 1
 517 0038 FA24     		mov	r4, #250
 518 003a 6400     		lsl	r4, r4, #1
 519              	.L41:
 217:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 520              		.loc 1 217 0 discriminator 1
 521 003c 281C     		mov	r0, r5
 522 003e 0821     		mov	r1, #8
 523 0040 0122     		mov	r2, #1
 524 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 525              	.LVL32:
 218:Src/main.c    **** 		  HAL_Delay(500);
 526              		.loc 1 218 0 discriminator 1
 527 0046 201C     		mov	r0, r4
 528 0048 FFF7FEFF 		bl	HAL_Delay
 529              	.LVL33:
 219:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 530              		.loc 1 219 0 discriminator 1
 531 004c 281C     		mov	r0, r5
 532 004e 0821     		mov	r1, #8
 533 0050 0022     		mov	r2, #0
 534 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 535              	.LVL34:
 220:Src/main.c    **** 		  HAL_Delay(500);
 536              		.loc 1 220 0 discriminator 1
 537 0056 201C     		mov	r0, r4
 538 0058 FFF7FEFF 		bl	HAL_Delay
 539              	.LVL35:
 540 005c EEE7     		b	.L41
 541              	.L24:
 226:Src/main.c    **** 	  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 542              		.loc 1 226 0
 543 005e 784E     		ldr	r6, .L43+32
 544 0060 FE25     		mov	r5, #254
 545 0062 6D00     		lsl	r5, r5, #1
 230:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 546              		.loc 1 230 0
 547 0064 754C     		ldr	r4, .L43+28
 548              	.L42:
 226:Src/main.c    **** 	  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 549              		.loc 1 226 0
ARM GAS  /tmp/cc1sYoNU.s 			page 21


 550 0066 735D     		ldrb	r3, [r6, r5]
 551 0068 032B     		cmp	r3, #3
 552 006a 09D1     		bne	.L26
 227:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 553              		.loc 1 227 0
 554 006c 7348     		ldr	r0, .L43+28
 555 006e 0821     		mov	r1, #8
 556 0070 0122     		mov	r2, #1
 557 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 558              	.LVL36:
 235:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim17);
 559              		.loc 1 235 0
 560 0076 7348     		ldr	r0, .L43+36
 561 0078 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 562              	.LVL37:
 275:Src/main.c    **** 		curPeriode = (uint32_t)12000000 / (uint32_t)(curTone);
 563              		.loc 1 275 0
 564 007c 724E     		ldr	r6, .L43+40
 565 007e 05E0     		b	.L40
 566              	.L26:
 230:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 567              		.loc 1 230 0
 568 0080 201C     		mov	r0, r4
 569 0082 0821     		mov	r1, #8
 570 0084 0022     		mov	r2, #0
 571 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 572              	.LVL38:
 232:Src/main.c    ****   }
 573              		.loc 1 232 0
 574 008a ECE7     		b	.L42
 575              	.L40:
 254:Src/main.c    **** 	  if(USBD_STATE_CONFIGURED == hUsbDeviceFS.dev_state){
 576              		.loc 1 254 0
 577 008c FE23     		mov	r3, #254
 578 008e 5B00     		lsl	r3, r3, #1
 579 0090 6B4A     		ldr	r2, .L43+32
 580 0092 D35C     		ldrb	r3, [r2, r3]
 581 0094 032B     		cmp	r3, #3
 582 0096 11D0     		beq	.L28
 258:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, SET);
 583              		.loc 1 258 0
 584 0098 684C     		ldr	r4, .L43+28
 585 009a 201C     		mov	r0, r4
 586 009c 0821     		mov	r1, #8
 587 009e 0122     		mov	r2, #1
 588 00a0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 589              	.LVL39:
 259:Src/main.c    **** 		  HAL_Delay(200);
 590              		.loc 1 259 0
 591 00a4 C820     		mov	r0, #200
 592 00a6 FFF7FEFF 		bl	HAL_Delay
 593              	.LVL40:
 260:Src/main.c    **** 		  HAL_GPIO_WritePin(LED_POW_GPIO, LED_POW_PIN, RESET);
 594              		.loc 1 260 0
 595 00aa 201C     		mov	r0, r4
 596 00ac 0821     		mov	r1, #8
 597 00ae 0022     		mov	r2, #0
ARM GAS  /tmp/cc1sYoNU.s 			page 22


 598 00b0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 599              	.LVL41:
 261:Src/main.c    **** 		  HAL_Delay(200);
 600              		.loc 1 261 0
 601 00b4 C820     		mov	r0, #200
 602 00b6 FFF7FEFF 		bl	HAL_Delay
 603              	.LVL42:
 263:Src/main.c    ****   }
 604              		.loc 1 263 0
 605 00ba E7E7     		b	.L40
 606              	.L28:
 265:Src/main.c    **** 	curTone = 0;
 607              		.loc 1 265 0
 608 00bc 0022     		mov	r2, #0
 609 00be 634B     		ldr	r3, .L43+44
 610 00c0 1A80     		strh	r2, [r3]
 611              	.LVL43:
 612              	.LBB6:
 267:Src/main.c    **** 	for (int i = 0; i < 16; i++) {
 613              		.loc 1 267 0
 614 00c2 0023     		mov	r3, #0
 268:Src/main.c    **** 		if (freqs[i] > curTone) {
 615              		.loc 1 268 0
 616 00c4 624C     		ldr	r4, .L43+48
 617 00c6 6148     		ldr	r0, .L43+44
 269:Src/main.c    **** 			curTone = freqs[i];
 618              		.loc 1 269 0
 619 00c8 071C     		mov	r7, r0
 267:Src/main.c    **** 	for (int i = 0; i < 16; i++) {
 620              		.loc 1 267 0
 621 00ca 06E0     		b	.L30
 622              	.LVL44:
 623              	.L32:
 268:Src/main.c    **** 		if (freqs[i] > curTone) {
 624              		.loc 1 268 0
 625 00cc 5A00     		lsl	r2, r3, #1
 626 00ce 125B     		ldrh	r2, [r2, r4]
 627 00d0 0188     		ldrh	r1, [r0]
 628 00d2 8A42     		cmp	r2, r1
 629 00d4 00D9     		bls	.L31
 269:Src/main.c    **** 			curTone = freqs[i];
 630              		.loc 1 269 0
 631 00d6 3A80     		strh	r2, [r7]
 632              	.L31:
 267:Src/main.c    **** 	for (int i = 0; i < 16; i++) {
 633              		.loc 1 267 0
 634 00d8 0133     		add	r3, r3, #1
 635              	.LVL45:
 636              	.L30:
 267:Src/main.c    **** 	for (int i = 0; i < 16; i++) {
 637              		.loc 1 267 0 is_stmt 0 discriminator 1
 638 00da 0F2B     		cmp	r3, #15
 639 00dc F6DD     		ble	.L32
 640              	.LBE6:
 274:Src/main.c    **** 	if (curTone > 20 && curTone != lastTone) {
 641              		.loc 1 274 0 is_stmt 1
 642 00de 5B4B     		ldr	r3, .L43+44
ARM GAS  /tmp/cc1sYoNU.s 			page 23


 643              	.LVL46:
 644 00e0 1988     		ldrh	r1, [r3]
 645 00e2 1429     		cmp	r1, #20
 646 00e4 1BD9     		bls	.L33
 274:Src/main.c    **** 	if (curTone > 20 && curTone != lastTone) {
 647              		.loc 1 274 0 is_stmt 0 discriminator 1
 648 00e6 5B4B     		ldr	r3, .L43+52
 649 00e8 1B88     		ldrh	r3, [r3]
 650 00ea 9942     		cmp	r1, r3
 651 00ec 17D0     		beq	.L33
 275:Src/main.c    **** 		curPeriode = (uint32_t)12000000 / (uint32_t)(curTone);
 652              		.loc 1 275 0 is_stmt 1
 653 00ee 301C     		mov	r0, r6
 654 00f0 FFF7FEFF 		bl	__aeabi_uidiv
 655              	.LVL47:
 656 00f4 584A     		ldr	r2, .L43+56
 657 00f6 1060     		str	r0, [r2]
 276:Src/main.c    **** 		TIM2->CR1 = TIM2->CR1 | 1;
 658              		.loc 1 276 0
 659 00f8 8023     		mov	r3, #128
 660 00fa DB05     		lsl	r3, r3, #23
 661 00fc 1868     		ldr	r0, [r3]
 662 00fe 0121     		mov	r1, #1
 663 0100 0143     		orr	r1, r0
 664 0102 1960     		str	r1, [r3]
 277:Src/main.c    **** 		TIM2->CNT = 0;
 665              		.loc 1 277 0
 666 0104 0021     		mov	r1, #0
 667 0106 5962     		str	r1, [r3, #36]
 278:Src/main.c    **** 		TIM2->ARR = curPeriode;
 668              		.loc 1 278 0
 669 0108 1268     		ldr	r2, [r2]
 670 010a DA62     		str	r2, [r3, #44]
 279:Src/main.c    **** 		lastTone = curTone;
 671              		.loc 1 279 0
 672 010c 4F4B     		ldr	r3, .L43+44
 673 010e 1A88     		ldrh	r2, [r3]
 674 0110 504B     		ldr	r3, .L43+52
 675 0112 1A80     		strh	r2, [r3]
 280:Src/main.c    **** 		noteTimeout = HAL_GetTick();
 676              		.loc 1 280 0
 677 0114 FFF7FEFF 		bl	HAL_GetTick
 678              	.LVL48:
 679 0118 504B     		ldr	r3, .L43+60
 680 011a 1860     		str	r0, [r3]
 681 011c 19E0     		b	.L34
 682              	.L33:
 281:Src/main.c    **** 	} else if ((curTone < 20 && curTone != lastTone) || (HAL_GetTick() - noteTimeout) > 2000) {
 683              		.loc 1 281 0
 684 011e 1329     		cmp	r1, #19
 685 0120 03D8     		bhi	.L35
 281:Src/main.c    **** 	} else if ((curTone < 20 && curTone != lastTone) || (HAL_GetTick() - noteTimeout) > 2000) {
 686              		.loc 1 281 0 is_stmt 0 discriminator 1
 687 0122 4C4B     		ldr	r3, .L43+52
 688 0124 1B88     		ldrh	r3, [r3]
 689 0126 9942     		cmp	r1, r3
 690 0128 08D1     		bne	.L36
ARM GAS  /tmp/cc1sYoNU.s 			page 24


 691              	.L35:
 281:Src/main.c    **** 	} else if ((curTone < 20 && curTone != lastTone) || (HAL_GetTick() - noteTimeout) > 2000) {
 692              		.loc 1 281 0 discriminator 2
 693 012a FFF7FEFF 		bl	HAL_GetTick
 694              	.LVL49:
 695 012e 4B4B     		ldr	r3, .L43+60
 696 0130 1B68     		ldr	r3, [r3]
 697 0132 C01A     		sub	r0, r0, r3
 698 0134 FA23     		mov	r3, #250
 699 0136 DB00     		lsl	r3, r3, #3
 700 0138 9842     		cmp	r0, r3
 701 013a 0AD9     		bls	.L34
 702              	.L36:
 282:Src/main.c    **** 		TIM2->CNT = 0;
 703              		.loc 1 282 0 is_stmt 1
 704 013c 8023     		mov	r3, #128
 705 013e DB05     		lsl	r3, r3, #23
 706 0140 0022     		mov	r2, #0
 707 0142 5A62     		str	r2, [r3, #36]
 283:Src/main.c    **** 		TIM2->ARR = curPeriode;
 708              		.loc 1 283 0
 709 0144 444A     		ldr	r2, .L43+56
 710 0146 1268     		ldr	r2, [r2]
 711 0148 DA62     		str	r2, [r3, #44]
 284:Src/main.c    **** 		TIM2->CR1 &= ~(1UL);
 712              		.loc 1 284 0
 713 014a 1A68     		ldr	r2, [r3]
 714 014c 0121     		mov	r1, #1
 715 014e 8A43     		bic	r2, r1
 716 0150 1A60     		str	r2, [r3]
 717              	.L34:
 290:Src/main.c    **** 	if( FUNC_SUCCESS == midiGetFromUsbRx(0, &uart_tx_dat)){
 718              		.loc 1 290 0
 719 0152 0020     		mov	r0, #0
 720 0154 4249     		ldr	r1, .L43+64
 721 0156 FFF7FEFF 		bl	midiGetFromUsbRx
 722              	.LVL50:
 723 015a 0128     		cmp	r0, #1
 724 015c 96D1     		bne	.L40
 291:Src/main.c    **** 		if (uart_tx_dat >> 7 == 1) {
 725              		.loc 1 291 0
 726 015e 404B     		ldr	r3, .L43+64
 727 0160 1B78     		ldrb	r3, [r3]
 728 0162 DA09     		lsr	r2, r3, #7
 729 0164 012A     		cmp	r2, #1
 730 0166 08D1     		bne	.L37
 292:Src/main.c    **** 			midiBuffer[0] = uart_tx_dat;
 731              		.loc 1 292 0
 732 0168 3E4A     		ldr	r2, .L43+68
 733 016a 1370     		strb	r3, [r2]
 293:Src/main.c    **** 			midiBuffer[1] = 0;
 734              		.loc 1 293 0
 735 016c 0023     		mov	r3, #0
 736 016e 5370     		strb	r3, [r2, #1]
 294:Src/main.c    **** 			midiBuffer[2] = 0;
 737              		.loc 1 294 0
 738 0170 9370     		strb	r3, [r2, #2]
ARM GAS  /tmp/cc1sYoNU.s 			page 25


 295:Src/main.c    **** 			midiState = 1;
 739              		.loc 1 295 0
 740 0172 0122     		mov	r2, #1
 741 0174 3C4B     		ldr	r3, .L43+72
 742 0176 1A70     		strb	r2, [r3]
 743 0178 88E7     		b	.L40
 744              	.L37:
 296:Src/main.c    **** 		} else if (midiState == 1) {
 745              		.loc 1 296 0
 746 017a 3B4A     		ldr	r2, .L43+72
 747 017c 1278     		ldrb	r2, [r2]
 748 017e 012A     		cmp	r2, #1
 749 0180 05D1     		bne	.L38
 297:Src/main.c    **** 			midiBuffer[1] = uart_tx_dat;
 750              		.loc 1 297 0
 751 0182 384A     		ldr	r2, .L43+68
 752 0184 5370     		strb	r3, [r2, #1]
 298:Src/main.c    **** 			midiState = 2;
 753              		.loc 1 298 0
 754 0186 0222     		mov	r2, #2
 755 0188 374B     		ldr	r3, .L43+72
 756 018a 1A70     		strb	r2, [r3]
 757 018c 7EE7     		b	.L40
 758              	.L38:
 299:Src/main.c    **** 		} else if (midiState == 2) {
 759              		.loc 1 299 0
 760 018e 022A     		cmp	r2, #2
 761 0190 00D0     		beq	.LCB633
 762 0192 7BE7     		b	.L40	@long jump
 763              	.LCB633:
 300:Src/main.c    **** 			midiBuffer[2] = uart_tx_dat;
 764              		.loc 1 300 0
 765 0194 334A     		ldr	r2, .L43+68
 766 0196 9370     		strb	r3, [r2, #2]
 301:Src/main.c    **** 			midiState = 3;
 767              		.loc 1 301 0
 768 0198 0321     		mov	r1, #3
 769 019a 334B     		ldr	r3, .L43+72
 770 019c 1970     		strb	r1, [r3]
 303:Src/main.c    **** 			if ((midiBuffer[0] & 0xF0) == 0x90) { // Note on, 2 data bytes
 771              		.loc 1 303 0
 772 019e 1378     		ldrb	r3, [r2]
 773 01a0 0F22     		mov	r2, #15
 774 01a2 9343     		bic	r3, r2
 775 01a4 902B     		cmp	r3, #144
 776 01a6 1CD1     		bne	.L39
 777              	.LBB7:
 304:Src/main.c    **** 				char key = midiBuffer[1];
 778              		.loc 1 304 0
 779 01a8 2E4F     		ldr	r7, .L43+68
 780 01aa 7878     		ldrb	r0, [r7, #1]
 781              	.LVL51:
 307:Src/main.c    **** 				uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 782              		.loc 1 307 0
 783 01ac 4538     		sub	r0, r0, #69
 784 01ae FFF7FEFF 		bl	__aeabi_i2d
 785              	.LVL52:
ARM GAS  /tmp/cc1sYoNU.s 			page 26


 786 01b2 1C4B     		ldr	r3, .L43+4
 787 01b4 1A4A     		ldr	r2, .L43
 788 01b6 FFF7FEFF 		bl	__aeabi_ddiv
 789              	.LVL53:
 790 01ba 021C     		mov	r2, r0
 791 01bc 0B1C     		mov	r3, r1
 792 01be 1A48     		ldr	r0, .L43+8
 793 01c0 1A49     		ldr	r1, .L43+12
 794 01c2 FFF7FEFF 		bl	pow
 795              	.LVL54:
 796 01c6 1A4A     		ldr	r2, .L43+16
 797 01c8 1A4B     		ldr	r3, .L43+20
 798 01ca FFF7FEFF 		bl	__aeabi_dmul
 799              	.LVL55:
 800 01ce FFF7FEFF 		bl	__aeabi_d2uiz
 801              	.LVL56:
 308:Src/main.c    **** 				curChannel = midiBuffer[0] & 0xF;
 802              		.loc 1 308 0
 803 01d2 3B78     		ldrb	r3, [r7]
 804 01d4 0F22     		mov	r2, #15
 805 01d6 1340     		and	r3, r2
 806 01d8 244A     		ldr	r2, .L43+76
 807 01da 1380     		strh	r3, [r2]
 309:Src/main.c    **** 				freqs[curChannel] = freq;
 808              		.loc 1 309 0
 809 01dc 5B00     		lsl	r3, r3, #1
 810 01de 1C4A     		ldr	r2, .L43+48
 811 01e0 D052     		strh	r0, [r2, r3]
 812              	.LVL57:
 813              	.L39:
 814              	.LBE7:
 312:Src/main.c    **** 			} if ((midiBuffer[0] &0xF0) == 0x80) { // Note off, 2 data bytes
 815              		.loc 1 312 0
 816 01e2 204B     		ldr	r3, .L43+68
 817 01e4 1B78     		ldrb	r3, [r3]
 818 01e6 0F22     		mov	r2, #15
 819 01e8 9343     		bic	r3, r2
 820 01ea 802B     		cmp	r3, #128
 821 01ec 00D0     		beq	.LCB692
 822 01ee 4DE7     		b	.L40	@long jump
 823              	.LCB692:
 824              	.LBB8:
 313:Src/main.c    **** 				char key = midiBuffer[1];
 825              		.loc 1 313 0
 826 01f0 1C4F     		ldr	r7, .L43+68
 827 01f2 7878     		ldrb	r0, [r7, #1]
 828              	.LVL58:
 316:Src/main.c    **** 				uint16_t freq = pow(2,(key-0x45)/12.0)*440.0;
 829              		.loc 1 316 0
 830 01f4 4538     		sub	r0, r0, #69
 831 01f6 FFF7FEFF 		bl	__aeabi_i2d
 832              	.LVL59:
 833 01fa 0A4B     		ldr	r3, .L43+4
 834 01fc 084A     		ldr	r2, .L43
 835 01fe FFF7FEFF 		bl	__aeabi_ddiv
 836              	.LVL60:
 837 0202 021C     		mov	r2, r0
ARM GAS  /tmp/cc1sYoNU.s 			page 27


 838 0204 0B1C     		mov	r3, r1
 839 0206 0848     		ldr	r0, .L43+8
 840 0208 0849     		ldr	r1, .L43+12
 841 020a FFF7FEFF 		bl	pow
 842              	.LVL61:
 319:Src/main.c    **** 					freqs[midiBuffer[0] & 0xF] = 0;
 843              		.loc 1 319 0
 844 020e 3B78     		ldrb	r3, [r7]
 845 0210 0F22     		mov	r2, #15
 846 0212 1A40     		and	r2, r3
 847 0214 5200     		lsl	r2, r2, #1
 848 0216 0021     		mov	r1, #0
 849 0218 0D4B     		ldr	r3, .L43+48
 850 021a D152     		strh	r1, [r2, r3]
 851 021c 36E7     		b	.L40
 852              	.L44:
 853 021e C046     		.align	3
 854              	.L43:
 855 0220 00000000 		.word	0
 856 0224 00002840 		.word	1076363264
 857 0228 00000000 		.word	0
 858 022c 00000040 		.word	1073741824
 859 0230 00000000 		.word	0
 860 0234 00807B40 		.word	1081835520
 861 0238 00000000 		.word	htim2
 862 023c 00040048 		.word	1207960576
 863 0240 00000000 		.word	hUsbDeviceFS
 864 0244 00000000 		.word	htim17
 865 0248 001BB700 		.word	12000000
 866 024c 00000000 		.word	.LANCHOR0
 867 0250 00000000 		.word	.LANCHOR1
 868 0254 00000000 		.word	.LANCHOR2
 869 0258 00000000 		.word	.LANCHOR3
 870 025c 00000000 		.word	.LANCHOR4
 871 0260 00000000 		.word	uart_tx_dat
 872 0264 00000000 		.word	midiBuffer
 873 0268 00000000 		.word	.LANCHOR5
 874 026c 00000000 		.word	.LANCHOR6
 875              	.LBE8:
 876              		.cfi_endproc
 877              	.LFE35:
 879              		.global	pitchBend
 880              		.global	lastNoteT
 881              		.global	chordingPeriod
 882              		.global	lit
 883              		.global	freqs
 884              		.global	noteTimeout
 885              		.global	curPeriode
 886              		.global	lastTone
 887              		.global	curChannel
 888              		.global	curTone
 889              		.global	midiState
 890              		.comm	midiBuffer,4,4
 891              		.comm	uart_tx_dat,1,1
 892              		.comm	htim2,64,4
 893              		.comm	htim17,64,4
 894              		.section	.data.lit,"aw",%progbits
ARM GAS  /tmp/cc1sYoNU.s 			page 28


 897              	lit:
 898 0000 01       		.byte	1
 899              		.section	.bss.lastNoteT,"aw",%nobits
 900              		.align	2
 903              	lastNoteT:
 904 0000 00000000 		.space	4
 905              		.section	.bss.curTone,"aw",%nobits
 906              		.align	1
 907              		.set	.LANCHOR0,. + 0
 910              	curTone:
 911 0000 0000     		.space	2
 912              		.section	.data.chordingPeriod,"aw",%progbits
 913              		.align	2
 916              	chordingPeriod:
 917 0000 3C000000 		.word	60
 918              		.section	.bss.noteTimeout,"aw",%nobits
 919              		.align	2
 920              		.set	.LANCHOR4,. + 0
 923              	noteTimeout:
 924 0000 00000000 		.space	4
 925              		.section	.bss.freqs,"aw",%nobits
 926              		.align	2
 927              		.set	.LANCHOR1,. + 0
 930              	freqs:
 931 0000 00000000 		.space	32
 931      00000000 
 931      00000000 
 931      00000000 
 931      00000000 
 932              		.section	.bss.curPeriode,"aw",%nobits
 933              		.align	2
 934              		.set	.LANCHOR3,. + 0
 937              	curPeriode:
 938 0000 00000000 		.space	4
 939              		.section	.rodata.str1.4,"aMS",%progbits,1
 940              		.align	2
 941              	.LC2:
 942 0000 5372632F 		.ascii	"Src/main.c\000"
 942      6D61696E 
 942      2E6300
 943 000b 00       		.section	.bss.pitchBend,"aw",%nobits
 944              		.align	1
 947              	pitchBend:
 948 0000 0000     		.space	2
 949              		.section	.bss.lastTone,"aw",%nobits
 950              		.align	1
 951              		.set	.LANCHOR2,. + 0
 954              	lastTone:
 955 0000 0000     		.space	2
 956              		.section	.bss.curChannel,"aw",%nobits
 957              		.align	1
 958              		.set	.LANCHOR6,. + 0
 961              	curChannel:
 962 0000 0000     		.space	2
 963              		.section	.bss.midiState,"aw",%nobits
 964              		.set	.LANCHOR5,. + 0
 967              	midiState:
ARM GAS  /tmp/cc1sYoNU.s 			page 29


 968 0000 00       		.space	1
 969              		.text
 970              	.Letext0:
 971              		.file 2 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 972              		.file 3 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_defaul
 973              		.file 4 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 974              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 975              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 976              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 977              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 978              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 979              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 980              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 981              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 982              		.file 13 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 983              		.file 14 "Inc/curelib_inc/curemisc.h"
 984              		.file 15 "Inc/usb_device.h"
 985              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 986              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 987              		.file 18 "Inc/usbd_midi_if.h"
 988              		.file 19 "Inc/led_blink.h"
 989              		.file 20 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/math.h"
ARM GAS  /tmp/cc1sYoNU.s 			page 30


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc1sYoNU.s:18     .text.MX_GPIO_Init:00000000 $t
     /tmp/cc1sYoNU.s:22     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cc1sYoNU.s:126    .text.MX_GPIO_Init:00000080 $d
     /tmp/cc1sYoNU.s:132    .text.USER_TIM2_Init:00000000 $t
     /tmp/cc1sYoNU.s:136    .text.USER_TIM2_Init:00000000 USER_TIM2_Init
     /tmp/cc1sYoNU.s:218    .text.USER_TIM2_Init:00000060 $d
                            *COM*:00000040 htim2
     /tmp/cc1sYoNU.s:226    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/cc1sYoNU.s:231    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc1sYoNU.s:256    .text.HAL_TIM_PeriodElapsedCallback:00000010 $d
     /tmp/cc1sYoNU.s:261    .text._Error_Handler:00000000 $t
     /tmp/cc1sYoNU.s:266    .text._Error_Handler:00000000 _Error_Handler
     /tmp/cc1sYoNU.s:277    .text.MX_TIM17_Init:00000000 $t
     /tmp/cc1sYoNU.s:281    .text.MX_TIM17_Init:00000000 MX_TIM17_Init
     /tmp/cc1sYoNU.s:328    .text.MX_TIM17_Init:00000030 $d
                            *COM*:00000040 htim17
     /tmp/cc1sYoNU.s:337    .text.SystemClock_Config:00000000 $t
     /tmp/cc1sYoNU.s:342    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cc1sYoNU.s:452    .text.SystemClock_Config:00000094 $d
     /tmp/cc1sYoNU.s:461    .text.main:00000000 $t
     /tmp/cc1sYoNU.s:466    .text.main:00000000 main
     /tmp/cc1sYoNU.s:855    .text.main:00000220 $d
                            *COM*:00000001 uart_tx_dat
                            *COM*:00000004 midiBuffer
     /tmp/cc1sYoNU.s:947    .bss.pitchBend:00000000 pitchBend
     /tmp/cc1sYoNU.s:903    .bss.lastNoteT:00000000 lastNoteT
     /tmp/cc1sYoNU.s:916    .data.chordingPeriod:00000000 chordingPeriod
     /tmp/cc1sYoNU.s:897    .data.lit:00000000 lit
     /tmp/cc1sYoNU.s:930    .bss.freqs:00000000 freqs
     /tmp/cc1sYoNU.s:923    .bss.noteTimeout:00000000 noteTimeout
     /tmp/cc1sYoNU.s:937    .bss.curPeriode:00000000 curPeriode
     /tmp/cc1sYoNU.s:954    .bss.lastTone:00000000 lastTone
     /tmp/cc1sYoNU.s:961    .bss.curChannel:00000000 curChannel
     /tmp/cc1sYoNU.s:910    .bss.curTone:00000000 curTone
     /tmp/cc1sYoNU.s:967    .bss.midiState:00000000 midiState
     /tmp/cc1sYoNU.s:900    .bss.lastNoteT:00000000 $d
     /tmp/cc1sYoNU.s:906    .bss.curTone:00000000 $d
     /tmp/cc1sYoNU.s:913    .data.chordingPeriod:00000000 $d
     /tmp/cc1sYoNU.s:919    .bss.noteTimeout:00000000 $d
     /tmp/cc1sYoNU.s:926    .bss.freqs:00000000 $d
     /tmp/cc1sYoNU.s:933    .bss.curPeriode:00000000 $d
     /tmp/cc1sYoNU.s:940    .rodata.str1.4:00000000 $d
     /tmp/cc1sYoNU.s:944    .bss.pitchBend:00000000 $d
     /tmp/cc1sYoNU.s:950    .bss.lastTone:00000000 $d
     /tmp/cc1sYoNU.s:957    .bss.curChannel:00000000 $d
     /tmp/cc1sYoNU.s:968    .bss.midiState:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
ARM GAS  /tmp/cc1sYoNU.s 			page 31


ledIncrementState
HAL_TIM_Base_Init
__aeabi_uidiv
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
__aeabi_i2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2uiz
HAL_Init
HAL_TIM_PWM_Start
MX_USB_MIDI_INIT
midiInit
HAL_Delay
HAL_TIM_Base_Start_IT
HAL_GetTick
midiGetFromUsbRx
pow
hUsbDeviceFS
