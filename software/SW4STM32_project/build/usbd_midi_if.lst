ARM GAS  /tmp/cceQ4hSH.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"usbd_midi_if.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MIDI_DataTx,"ax",%progbits
  18              		.align	2
  19              		.code	16
  20              		.thumb_func
  22              	MIDI_DataTx:
  23              	.LFB43:
  24              		.file 1 "Src/usbd_midi_if.c"
   1:Src/usbd_midi_if.c **** /**
   2:Src/usbd_midi_if.c ****   ******************************************************************************
   3:Src/usbd_midi_if.c ****   * @file           : usbd_midi_if.c
   4:Src/usbd_midi_if.c ****   * @brief          :
   5:Src/usbd_midi_if.c ****   ******************************************************************************
   6:Src/usbd_midi_if.c **** 
   7:Src/usbd_midi_if.c ****     (CC at)2016 by D.F.Mac. @TripArts Music
   8:Src/usbd_midi_if.c **** 
   9:Src/usbd_midi_if.c ****   ******************************************************************************
  10:Src/usbd_midi_if.c **** 
  11:Src/usbd_midi_if.c ****     Modified by keshikan (www.keshikan.net) 2018
  12:Src/usbd_midi_if.c ****     The license is (CC BY 4.0), and takes over from original usbd_midi_if.h/c.
  13:Src/usbd_midi_if.c **** 
  14:Src/usbd_midi_if.c ****     See also original source code page.
  15:Src/usbd_midi_if.c ****     https://github.com/mimuz/mimuz-tuch/blob/master/STM32/
  16:Src/usbd_midi_if.c **** 
  17:Src/usbd_midi_if.c ****   ******************************************************************************
  18:Src/usbd_midi_if.c ****  */
  19:Src/usbd_midi_if.c **** 
  20:Src/usbd_midi_if.c **** /* Includes ------------------------------------------------------------------*/
  21:Src/usbd_midi_if.c **** #include "usbd_midi_if.h"
  22:Src/usbd_midi_if.c **** #include "stm32f0xx_hal.h"
  23:Src/usbd_midi_if.c **** 
  24:Src/usbd_midi_if.c **** 
  25:Src/usbd_midi_if.c **** // basic midi rx/tx functions
  26:Src/usbd_midi_if.c **** static uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length);
  27:Src/usbd_midi_if.c **** static uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length);
  28:Src/usbd_midi_if.c **** 
  29:Src/usbd_midi_if.c **** // for Cure Series
  30:Src/usbd_midi_if.c **** #define MIDI_BUFFER_SIZ (512)//FIFO buffer byte size for midi message buffer
  31:Src/usbd_midi_if.c **** 
  32:Src/usbd_midi_if.c **** RingBufferU8 rbuf_usb_rx[MIDI_OUT_JACK_NUM]; //for input from USB
  33:Src/usbd_midi_if.c **** RingBufferU8 rbuf_jack_rx[MIDI_IN_JACK_NUM];  //for input from MIDI-IN jack
  34:Src/usbd_midi_if.c **** 
ARM GAS  /tmp/cceQ4hSH.s 			page 2


  35:Src/usbd_midi_if.c **** //for receiving midi data from jack
  36:Src/usbd_midi_if.c **** MidiAnalysisStatus analyzed_status[MIDI_IN_JACK_NUM];
  37:Src/usbd_midi_if.c **** MIDIEvent midi_event[MIDI_IN_JACK_NUM];	//received midi data
  38:Src/usbd_midi_if.c **** 
  39:Src/usbd_midi_if.c **** uint8_t rx_midi_msg[MIDI_IN_JACK_NUM];
  40:Src/usbd_midi_if.c **** 
  41:Src/usbd_midi_if.c **** 
  42:Src/usbd_midi_if.c **** FUNC_STATUS midiInit()
  43:Src/usbd_midi_if.c **** {
  44:Src/usbd_midi_if.c **** 	uint32_t i,j;
  45:Src/usbd_midi_if.c **** 
  46:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_OUT_JACK_NUM; i++){
  47:Src/usbd_midi_if.c **** 		if(BUFFER_SUCCESS != cureRingBufferU8Init(&rbuf_usb_rx[i], MIDI_BUFFER_SIZ))
  48:Src/usbd_midi_if.c **** 		{
  49:Src/usbd_midi_if.c **** 			return FUNC_ERROR;
  50:Src/usbd_midi_if.c **** 		}
  51:Src/usbd_midi_if.c **** 	}
  52:Src/usbd_midi_if.c **** 
  53:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_IN_JACK_NUM; i++){
  54:Src/usbd_midi_if.c **** 		if(BUFFER_SUCCESS != cureRingBufferU8Init(&rbuf_jack_rx[i], MIDI_BUFFER_SIZ))
  55:Src/usbd_midi_if.c **** 		{
  56:Src/usbd_midi_if.c **** 			return FUNC_ERROR;
  57:Src/usbd_midi_if.c **** 		}
  58:Src/usbd_midi_if.c **** 	}
  59:Src/usbd_midi_if.c **** 
  60:Src/usbd_midi_if.c **** 	//Init RX
  61:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_IN_JACK_NUM; i++){
  62:Src/usbd_midi_if.c **** 
  63:Src/usbd_midi_if.c **** 		rx_midi_msg[i] = 0x00;
  64:Src/usbd_midi_if.c **** 		analyzed_status[i].data_idx = 0;
  65:Src/usbd_midi_if.c **** 		midi_event[i].length = 0;
  66:Src/usbd_midi_if.c **** 
  67:Src/usbd_midi_if.c **** 		for(j=0; j<MIDI_SENDDATA_MAX; j++){
  68:Src/usbd_midi_if.c **** 			midi_event[i].midi_byte[j] = 0x00;
  69:Src/usbd_midi_if.c **** 		}
  70:Src/usbd_midi_if.c **** 	}
  71:Src/usbd_midi_if.c **** 
  72:Src/usbd_midi_if.c **** 	return FUNC_SUCCESS;
  73:Src/usbd_midi_if.c **** }
  74:Src/usbd_midi_if.c **** 
  75:Src/usbd_midi_if.c **** FUNC_STATUS midiGetFromUsbRx(uint8_t cable_num, uint8_t* dat)
  76:Src/usbd_midi_if.c **** {
  77:Src/usbd_midi_if.c **** 	if(BUFFER_SUCCESS != cureRingBufferU8Dequeue(&rbuf_usb_rx[cable_num], dat))
  78:Src/usbd_midi_if.c **** 	{
  79:Src/usbd_midi_if.c **** 		return FUNC_ERROR;
  80:Src/usbd_midi_if.c **** 	}
  81:Src/usbd_midi_if.c **** 
  82:Src/usbd_midi_if.c **** 	return FUNC_SUCCESS;
  83:Src/usbd_midi_if.c **** }
  84:Src/usbd_midi_if.c **** 
  85:Src/usbd_midi_if.c **** FUNC_STATUS midiGetFromJackRx(uint8_t cable_num)
  86:Src/usbd_midi_if.c **** {
  87:Src/usbd_midi_if.c **** 	if(BUFFER_SUCCESS != cureRingBufferU8Dequeue(&rbuf_jack_rx[cable_num], &rx_midi_msg[cable_num]))
  88:Src/usbd_midi_if.c **** 	{
  89:Src/usbd_midi_if.c **** 		return FUNC_ERROR;
  90:Src/usbd_midi_if.c **** 	}
  91:Src/usbd_midi_if.c **** 
ARM GAS  /tmp/cceQ4hSH.s 			page 3


  92:Src/usbd_midi_if.c **** 	return FUNC_SUCCESS;
  93:Src/usbd_midi_if.c **** }
  94:Src/usbd_midi_if.c **** 
  95:Src/usbd_midi_if.c **** FUNC_STATUS midiSetFromJackRx(uint8_t cable_num, uint8_t* dat)
  96:Src/usbd_midi_if.c **** {
  97:Src/usbd_midi_if.c **** 	if(BUFFER_SUCCESS != cureRingBufferU8Enqueue(&rbuf_jack_rx[cable_num], dat))
  98:Src/usbd_midi_if.c **** 	{
  99:Src/usbd_midi_if.c **** 		return FUNC_ERROR;
 100:Src/usbd_midi_if.c **** 	}
 101:Src/usbd_midi_if.c **** 
 102:Src/usbd_midi_if.c **** 	return FUNC_SUCCESS;
 103:Src/usbd_midi_if.c **** }
 104:Src/usbd_midi_if.c **** 
 105:Src/usbd_midi_if.c **** 
 106:Src/usbd_midi_if.c **** bool isUsbRxBufEmpty(uint8_t cable_num)
 107:Src/usbd_midi_if.c **** {
 108:Src/usbd_midi_if.c **** 	if( 0 != _cureRingBufferU8GetUsedSize(&rbuf_usb_rx[cable_num]) ){
 109:Src/usbd_midi_if.c **** 		return false;
 110:Src/usbd_midi_if.c **** 	}
 111:Src/usbd_midi_if.c **** 
 112:Src/usbd_midi_if.c **** 	return true;
 113:Src/usbd_midi_if.c **** }
 114:Src/usbd_midi_if.c **** 
 115:Src/usbd_midi_if.c **** bool isJackRxBufEmpty(uint8_t cable_num)
 116:Src/usbd_midi_if.c **** {
 117:Src/usbd_midi_if.c **** 	if( 0 != _cureRingBufferU8GetUsedSize(&rbuf_jack_rx[cable_num]) ){
 118:Src/usbd_midi_if.c **** 		return false;
 119:Src/usbd_midi_if.c **** 	}
 120:Src/usbd_midi_if.c **** 
 121:Src/usbd_midi_if.c **** 	return true;
 122:Src/usbd_midi_if.c **** }
 123:Src/usbd_midi_if.c **** 
 124:Src/usbd_midi_if.c **** bool isRxBufEmpty()
 125:Src/usbd_midi_if.c **** {
 126:Src/usbd_midi_if.c **** 	uint32_t i;
 127:Src/usbd_midi_if.c **** 
 128:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_OUT_JACK_NUM; i++){
 129:Src/usbd_midi_if.c **** 		if(0 != _cureRingBufferU8GetUsedSize(&rbuf_usb_rx[i]))
 130:Src/usbd_midi_if.c **** 		{
 131:Src/usbd_midi_if.c **** 			return false;
 132:Src/usbd_midi_if.c **** 		}
 133:Src/usbd_midi_if.c **** 	}
 134:Src/usbd_midi_if.c **** 
 135:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_IN_JACK_NUM; i++){
 136:Src/usbd_midi_if.c **** 		if(0 != _cureRingBufferU8GetUsedSize(&rbuf_jack_rx[i]))
 137:Src/usbd_midi_if.c **** 		{
 138:Src/usbd_midi_if.c **** 			return false;
 139:Src/usbd_midi_if.c **** 		}
 140:Src/usbd_midi_if.c **** 	}
 141:Src/usbd_midi_if.c **** 	return true;
 142:Src/usbd_midi_if.c **** }
 143:Src/usbd_midi_if.c **** 
 144:Src/usbd_midi_if.c **** 
 145:Src/usbd_midi_if.c **** USBD_MIDI_ItfTypeDef USBD_Interface_fops_FS =
 146:Src/usbd_midi_if.c **** {
 147:Src/usbd_midi_if.c ****   MIDI_DataRx,
 148:Src/usbd_midi_if.c ****   MIDI_DataTx
ARM GAS  /tmp/cceQ4hSH.s 			page 4


 149:Src/usbd_midi_if.c **** };
 150:Src/usbd_midi_if.c **** 
 151:Src/usbd_midi_if.c **** 
 152:Src/usbd_midi_if.c **** static uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length){
 153:Src/usbd_midi_if.c ****   uint16_t cnt;
 154:Src/usbd_midi_if.c ****   uint16_t msgs = length / 4;
 155:Src/usbd_midi_if.c ****   uint16_t chk = length % 4;
 156:Src/usbd_midi_if.c ****   uint8_t u8b;
 157:Src/usbd_midi_if.c ****   uint8_t midi_size;
 158:Src/usbd_midi_if.c **** 
 159:Src/usbd_midi_if.c ****   if(0 != chk)
 160:Src/usbd_midi_if.c ****   {
 161:Src/usbd_midi_if.c **** 	  return 0;
 162:Src/usbd_midi_if.c ****   }
 163:Src/usbd_midi_if.c **** 
 164:Src/usbd_midi_if.c ****   for(uint32_t cnt_msgs = 0; cnt_msgs < msgs; cnt_msgs++){
 165:Src/usbd_midi_if.c **** 
 166:Src/usbd_midi_if.c **** 	  uint8_t cable_num = (msg[0 + 4*cnt_msgs] & 0xF0) >> 4;
 167:Src/usbd_midi_if.c **** 	  uint8_t code_idx_num = msg[0 + 4*cnt_msgs] & 0x0F;
 168:Src/usbd_midi_if.c **** 
 169:Src/usbd_midi_if.c **** 	  switch (code_idx_num) {
 170:Src/usbd_midi_if.c **** 
 171:Src/usbd_midi_if.c **** 	  	  //not defined
 172:Src/usbd_midi_if.c **** 		  case 0x0:
 173:Src/usbd_midi_if.c **** 		  case 0x1:
 174:Src/usbd_midi_if.c **** 			  midi_size = 0;
 175:Src/usbd_midi_if.c **** 			  break;
 176:Src/usbd_midi_if.c **** 
 177:Src/usbd_midi_if.c **** 		  //1byte message
 178:Src/usbd_midi_if.c **** 		  case 0x5:
 179:Src/usbd_midi_if.c **** 		  case 0xF:
 180:Src/usbd_midi_if.c **** 			  midi_size = 1;
 181:Src/usbd_midi_if.c **** 			  break;
 182:Src/usbd_midi_if.c **** 
 183:Src/usbd_midi_if.c **** 		  //2byte message
 184:Src/usbd_midi_if.c **** 		  case 0x2:
 185:Src/usbd_midi_if.c **** 		  case 0x6:
 186:Src/usbd_midi_if.c **** 		  case 0xC:
 187:Src/usbd_midi_if.c **** 		  case 0xD:
 188:Src/usbd_midi_if.c **** 			  midi_size = 2;
 189:Src/usbd_midi_if.c **** 			  break;
 190:Src/usbd_midi_if.c **** 
 191:Src/usbd_midi_if.c **** 		  //3byte message
 192:Src/usbd_midi_if.c **** 		  case 0x3:
 193:Src/usbd_midi_if.c **** 		  case 0x4:
 194:Src/usbd_midi_if.c **** 		  case 0x7:
 195:Src/usbd_midi_if.c **** 		  case 0x8:
 196:Src/usbd_midi_if.c **** 		  case 0x9:
 197:Src/usbd_midi_if.c **** 		  case 0xA:
 198:Src/usbd_midi_if.c **** 		  case 0xB:
 199:Src/usbd_midi_if.c **** 		  case 0xE:
 200:Src/usbd_midi_if.c **** 			  midi_size = 3;
 201:Src/usbd_midi_if.c **** 			  break;
 202:Src/usbd_midi_if.c **** 
 203:Src/usbd_midi_if.c **** 		  default:
 204:Src/usbd_midi_if.c **** 			  midi_size = 0;
 205:Src/usbd_midi_if.c **** 			  break;
ARM GAS  /tmp/cceQ4hSH.s 			page 5


 206:Src/usbd_midi_if.c **** 	  }
 207:Src/usbd_midi_if.c **** 
 208:Src/usbd_midi_if.c **** 	  for(cnt = 0;cnt < midi_size;cnt ++){
 209:Src/usbd_midi_if.c **** 		  u8b = *(msg + 4*cnt_msgs + cnt + 1);
 210:Src/usbd_midi_if.c **** 		  cureRingBufferU8Enqueue(&rbuf_usb_rx[cable_num], &u8b);
 211:Src/usbd_midi_if.c **** 	  }
 212:Src/usbd_midi_if.c ****   }
 213:Src/usbd_midi_if.c **** 
 214:Src/usbd_midi_if.c ****   return 0;
 215:Src/usbd_midi_if.c **** }
 216:Src/usbd_midi_if.c **** 
 217:Src/usbd_midi_if.c **** void sendMidiMessage(uint8_t *msg, uint16_t size){
 218:Src/usbd_midi_if.c ****   if(size == 4){
 219:Src/usbd_midi_if.c **** //	APP_Rx_Buffer[0] = msg[0];
 220:Src/usbd_midi_if.c **** //	APP_Rx_Buffer[1] = msg[1];
 221:Src/usbd_midi_if.c **** //	APP_Rx_Buffer[2] = msg[2];
 222:Src/usbd_midi_if.c **** //	APP_Rx_Buffer[3] = msg[3];
 223:Src/usbd_midi_if.c **** //    USBD_MIDI_SendData(&hUsbDeviceFS, APP_Rx_Buffer, size);
 224:Src/usbd_midi_if.c ****     MIDI_DataTx(msg, size);
 225:Src/usbd_midi_if.c ****   }
 226:Src/usbd_midi_if.c **** }
 227:Src/usbd_midi_if.c **** 
 228:Src/usbd_midi_if.c **** static uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length){
  25              		.loc 1 228 0
  26              		.cfi_startproc
  27              	.LVL0:
  28 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 20
  31              		.cfi_offset 4, -20
  32              		.cfi_offset 5, -16
  33              		.cfi_offset 6, -12
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 4746     		mov	r7, r8
  37 0004 80B4     		push	{r7}
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40              		.cfi_offset 8, -24
  41              	.LVL1:
 229:Src/usbd_midi_if.c ****   uint32_t i = 0;
  42              		.loc 1 229 0
  43 0006 0023     		mov	r3, #0
 230:Src/usbd_midi_if.c ****   while (i < length) {
 231:Src/usbd_midi_if.c ****     APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
  44              		.loc 1 231 0
  45 0008 0B4C     		ldr	r4, .L6
  46 000a 0C4F     		ldr	r7, .L6+4
 232:Src/usbd_midi_if.c ****     APP_Rx_ptr_in++;
 233:Src/usbd_midi_if.c ****     i++;
 234:Src/usbd_midi_if.c ****     if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
  47              		.loc 1 234 0
  48 000c 8026     		mov	r6, #128
  49 000e 7600     		lsl	r6, r6, #1
 235:Src/usbd_midi_if.c ****       APP_Rx_ptr_in = 0;
  50              		.loc 1 235 0
  51 0010 A046     		mov	r8, r4
ARM GAS  /tmp/cceQ4hSH.s 			page 6


  52 0012 9C46     		mov	ip, r3
 230:Src/usbd_midi_if.c ****   while (i < length) {
  53              		.loc 1 230 0
  54 0014 0AE0     		b	.L5
  55              	.LVL2:
  56              	.L4:
 231:Src/usbd_midi_if.c ****     APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
  57              		.loc 1 231 0
  58 0016 2268     		ldr	r2, [r4]
  59 0018 C55C     		ldrb	r5, [r0, r3]
  60 001a BD54     		strb	r5, [r7, r2]
 232:Src/usbd_midi_if.c ****     APP_Rx_ptr_in++;
  61              		.loc 1 232 0
  62 001c 0132     		add	r2, r2, #1
  63 001e 2260     		str	r2, [r4]
 233:Src/usbd_midi_if.c ****     i++;
  64              		.loc 1 233 0
  65 0020 0133     		add	r3, r3, #1
  66              	.LVL3:
 234:Src/usbd_midi_if.c ****     if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
  67              		.loc 1 234 0
  68 0022 B242     		cmp	r2, r6
  69 0024 02D1     		bne	.L5
  70              		.loc 1 235 0
  71 0026 6246     		mov	r2, ip
  72 0028 4546     		mov	r5, r8
  73 002a 2A60     		str	r2, [r5]
  74              	.LVL4:
  75              	.L5:
 230:Src/usbd_midi_if.c ****   while (i < length) {
  76              		.loc 1 230 0 discriminator 1
  77 002c 9942     		cmp	r1, r3
  78 002e F2D8     		bhi	.L4
 236:Src/usbd_midi_if.c ****     }
 237:Src/usbd_midi_if.c ****   }
 238:Src/usbd_midi_if.c ****   return USBD_OK;
 239:Src/usbd_midi_if.c **** }
  79              		.loc 1 239 0
  80 0030 0020     		mov	r0, #0
  81              	.LVL5:
  82              		@ sp needed
  83 0032 04BC     		pop	{r2}
  84 0034 9046     		mov	r8, r2
  85 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
  86              	.L7:
  87              		.align	2
  88              	.L6:
  89 0038 00000000 		.word	APP_Rx_ptr_in
  90 003c 00000000 		.word	APP_Rx_Buffer
  91              		.cfi_endproc
  92              	.LFE43:
  94              		.section	.text.MIDI_DataRx,"ax",%progbits
  95              		.align	2
  96              		.code	16
  97              		.thumb_func
  99              	MIDI_DataRx:
 100              	.LFB41:
ARM GAS  /tmp/cceQ4hSH.s 			page 7


 152:Src/usbd_midi_if.c **** static uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length){
 101              		.loc 1 152 0
 102              		.cfi_startproc
 103              	.LVL6:
 104 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 105              	.LCFI2:
 106              		.cfi_def_cfa_offset 20
 107              		.cfi_offset 4, -20
 108              		.cfi_offset 5, -16
 109              		.cfi_offset 6, -12
 110              		.cfi_offset 7, -8
 111              		.cfi_offset 14, -4
 112 0002 5F46     		mov	r7, fp
 113 0004 5646     		mov	r6, r10
 114 0006 4D46     		mov	r5, r9
 115 0008 4446     		mov	r4, r8
 116 000a F0B4     		push	{r4, r5, r6, r7}
 117              	.LCFI3:
 118              		.cfi_def_cfa_offset 36
 119              		.cfi_offset 8, -36
 120              		.cfi_offset 9, -32
 121              		.cfi_offset 10, -28
 122              		.cfi_offset 11, -24
 123 000c 83B0     		sub	sp, sp, #12
 124              	.LCFI4:
 125              		.cfi_def_cfa_offset 48
 126 000e 8046     		mov	r8, r0
 154:Src/usbd_midi_if.c ****   uint16_t msgs = length / 4;
 127              		.loc 1 154 0
 128 0010 8A08     		lsr	r2, r1, #2
 129 0012 9346     		mov	fp, r2
 130              	.LVL7:
 159:Src/usbd_midi_if.c ****   if(0 != chk)
 131              		.loc 1 159 0
 132 0014 8B07     		lsl	r3, r1, #30
 133 0016 31D1     		bne	.L9
 134 0018 0021     		mov	r1, #0
 135              	.LVL8:
 136 001a 8A46     		mov	r10, r1
 137 001c 2CE0     		b	.L10
 138              	.LVL9:
 139              	.L18:
 140              	.LBB2:
 141              	.LBB3:
 166:Src/usbd_midi_if.c **** 	  uint8_t cable_num = (msg[0 + 4*cnt_msgs] & 0xF0) >> 4;
 142              		.loc 1 166 0
 143 001e 5246     		mov	r2, r10
 144 0020 9600     		lsl	r6, r2, #2
 145 0022 4346     		mov	r3, r8
 146 0024 9A5D     		ldrb	r2, [r3, r6]
 147 0026 1309     		lsr	r3, r2, #4
 148              	.LVL10:
 167:Src/usbd_midi_if.c **** 	  uint8_t code_idx_num = msg[0 + 4*cnt_msgs] & 0x0F;
 149              		.loc 1 167 0
 150 0028 0F21     		mov	r1, #15
 151 002a 0A40     		and	r2, r1
 152              	.LVL11:
ARM GAS  /tmp/cceQ4hSH.s 			page 8


 169:Src/usbd_midi_if.c **** 	  switch (code_idx_num) {
 153              		.loc 1 169 0
 154 002c 0F2A     		cmp	r2, #15
 155 002e 03D8     		bhi	.L11
 156 0030 9200     		lsl	r2, r2, #2
 157              	.LVL12:
 158 0032 1649     		ldr	r1, .L20
 159              	.LVL13:
 160 0034 8A58     		ldr	r2, [r1, r2]
 161 0036 9746     		mov	pc, r2
 162              		.section	.rodata.MIDI_DataRx,"a",%progbits
 163              		.align	2
 164              	.L13:
 165 0000 38000000 		.word	.L11
 166 0004 38000000 		.word	.L11
 167 0008 3C000000 		.word	.L12
 168 000c 40000000 		.word	.L14
 169 0010 40000000 		.word	.L14
 170 0014 44000000 		.word	.L19
 171 0018 3C000000 		.word	.L12
 172 001c 40000000 		.word	.L14
 173 0020 40000000 		.word	.L14
 174 0024 40000000 		.word	.L14
 175 0028 40000000 		.word	.L14
 176 002c 40000000 		.word	.L14
 177 0030 3C000000 		.word	.L12
 178 0034 3C000000 		.word	.L12
 179 0038 40000000 		.word	.L14
 180 003c 44000000 		.word	.L19
 181              		.section	.text.MIDI_DataRx
 182              	.L11:
 174:Src/usbd_midi_if.c **** 			  midi_size = 0;
 183              		.loc 1 174 0
 184 0038 0027     		mov	r7, #0
 185 003a 04E0     		b	.L15
 186              	.L12:
 187              	.LVL14:
 188:Src/usbd_midi_if.c **** 			  midi_size = 2;
 188              		.loc 1 188 0
 189 003c 0227     		mov	r7, #2
 189:Src/usbd_midi_if.c **** 			  break;
 190              		.loc 1 189 0
 191 003e 02E0     		b	.L15
 192              	.LVL15:
 193              	.L14:
 200:Src/usbd_midi_if.c **** 			  midi_size = 3;
 194              		.loc 1 200 0
 195 0040 0327     		mov	r7, #3
 201:Src/usbd_midi_if.c **** 			  break;
 196              		.loc 1 201 0
 197 0042 00E0     		b	.L15
 198              	.LVL16:
 199              	.L19:
 180:Src/usbd_midi_if.c **** 			  midi_size = 1;
 200              		.loc 1 180 0
 201 0044 0127     		mov	r7, #1
 202              	.L15:
ARM GAS  /tmp/cceQ4hSH.s 			page 9


 203              	.LVL17:
 208:Src/usbd_midi_if.c **** 	  for(cnt = 0;cnt < midi_size;cnt ++){
 204              		.loc 1 208 0
 205 0046 0024     		mov	r4, #0
 209:Src/usbd_midi_if.c **** 		  u8b = *(msg + 4*cnt_msgs + cnt + 1);
 206              		.loc 1 209 0
 207 0048 6D46     		mov	r5, sp
 208 004a 0735     		add	r5, r5, #7
 210:Src/usbd_midi_if.c **** 		  cureRingBufferU8Enqueue(&rbuf_usb_rx[cable_num], &u8b);
 209              		.loc 1 210 0
 210 004c 5A00     		lsl	r2, r3, #1
 211 004e D318     		add	r3, r2, r3
 212              	.LVL18:
 213 0050 9B00     		lsl	r3, r3, #2
 214 0052 0F4A     		ldr	r2, .L20+4
 215 0054 D218     		add	r2, r2, r3
 216 0056 9146     		mov	r9, r2
 208:Src/usbd_midi_if.c **** 	  for(cnt = 0;cnt < midi_size;cnt ++){
 217              		.loc 1 208 0
 218 0058 0AE0     		b	.L16
 219              	.LVL19:
 220              	.L17:
 209:Src/usbd_midi_if.c **** 		  u8b = *(msg + 4*cnt_msgs + cnt + 1);
 221              		.loc 1 209 0 discriminator 2
 222 005a 3319     		add	r3, r6, r4
 223 005c 0133     		add	r3, r3, #1
 224 005e 4146     		mov	r1, r8
 225 0060 CB5C     		ldrb	r3, [r1, r3]
 226 0062 2B70     		strb	r3, [r5]
 210:Src/usbd_midi_if.c **** 		  cureRingBufferU8Enqueue(&rbuf_usb_rx[cable_num], &u8b);
 227              		.loc 1 210 0 discriminator 2
 228 0064 4846     		mov	r0, r9
 229 0066 291C     		mov	r1, r5
 230 0068 FFF7FEFF 		bl	cureRingBufferU8Enqueue
 231              	.LVL20:
 208:Src/usbd_midi_if.c **** 	  for(cnt = 0;cnt < midi_size;cnt ++){
 232              		.loc 1 208 0 discriminator 2
 233 006c 0134     		add	r4, r4, #1
 234              	.LVL21:
 235 006e A4B2     		uxth	r4, r4
 236              	.LVL22:
 237              	.L16:
 208:Src/usbd_midi_if.c **** 	  for(cnt = 0;cnt < midi_size;cnt ++){
 238              		.loc 1 208 0 is_stmt 0 discriminator 1
 239 0070 A742     		cmp	r7, r4
 240 0072 F2D8     		bhi	.L17
 241              	.LBE3:
 164:Src/usbd_midi_if.c ****   for(uint32_t cnt_msgs = 0; cnt_msgs < msgs; cnt_msgs++){
 242              		.loc 1 164 0 is_stmt 1
 243 0074 0122     		mov	r2, #1
 244 0076 9244     		add	r10, r10, r2
 245              	.LVL23:
 246              	.L10:
 164:Src/usbd_midi_if.c ****   for(uint32_t cnt_msgs = 0; cnt_msgs < msgs; cnt_msgs++){
 247              		.loc 1 164 0 is_stmt 0 discriminator 1
 248 0078 D345     		cmp	fp, r10
 249 007a D0D8     		bhi	.L18
ARM GAS  /tmp/cceQ4hSH.s 			page 10


 250              	.LVL24:
 251              	.L9:
 252              	.LBE2:
 215:Src/usbd_midi_if.c **** }
 253              		.loc 1 215 0 is_stmt 1
 254 007c 0020     		mov	r0, #0
 255 007e 03B0     		add	sp, sp, #12
 256              		@ sp needed
 257              	.LVL25:
 258              	.LVL26:
 259 0080 3CBC     		pop	{r2, r3, r4, r5}
 260 0082 9046     		mov	r8, r2
 261 0084 9946     		mov	r9, r3
 262 0086 A246     		mov	r10, r4
 263 0088 AB46     		mov	fp, r5
 264 008a F0BD     		pop	{r4, r5, r6, r7, pc}
 265              	.L21:
 266              		.align	2
 267              	.L20:
 268 008c 00000000 		.word	.L13
 269 0090 00000000 		.word	rbuf_usb_rx
 270              		.cfi_endproc
 271              	.LFE41:
 273              		.section	.text.midiInit,"ax",%progbits
 274              		.align	2
 275              		.global	midiInit
 276              		.code	16
 277              		.thumb_func
 279              	midiInit:
 280              	.LFB34:
  43:Src/usbd_midi_if.c **** {
 281              		.loc 1 43 0
 282              		.cfi_startproc
 283 0000 70B5     		push	{r4, r5, r6, lr}
 284              	.LCFI5:
 285              		.cfi_def_cfa_offset 16
 286              		.cfi_offset 4, -16
 287              		.cfi_offset 5, -12
 288              		.cfi_offset 6, -8
 289              		.cfi_offset 14, -4
 290              	.LVL27:
  46:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_OUT_JACK_NUM; i++){
 291              		.loc 1 46 0
 292 0002 0024     		mov	r4, #0
  47:Src/usbd_midi_if.c **** 		if(BUFFER_SUCCESS != cureRingBufferU8Init(&rbuf_usb_rx[i], MIDI_BUFFER_SIZ))
 293              		.loc 1 47 0
 294 0004 8021     		mov	r1, #128
 295 0006 8D00     		lsl	r5, r1, #2
  46:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_OUT_JACK_NUM; i++){
 296              		.loc 1 46 0
 297 0008 0AE0     		b	.L23
 298              	.LVL28:
 299              	.L25:
  47:Src/usbd_midi_if.c **** 		if(BUFFER_SUCCESS != cureRingBufferU8Init(&rbuf_usb_rx[i], MIDI_BUFFER_SIZ))
 300              		.loc 1 47 0
 301 000a 6000     		lsl	r0, r4, #1
 302 000c 0019     		add	r0, r0, r4
ARM GAS  /tmp/cceQ4hSH.s 			page 11


 303 000e 8000     		lsl	r0, r0, #2
 304 0010 1D4A     		ldr	r2, .L34
 305 0012 8018     		add	r0, r0, r2
 306 0014 291C     		mov	r1, r5
 307 0016 FFF7FEFF 		bl	cureRingBufferU8Init
 308              	.LVL29:
 309 001a 0128     		cmp	r0, #1
 310 001c 30D1     		bne	.L32
  46:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_OUT_JACK_NUM; i++){
 311              		.loc 1 46 0
 312 001e 0134     		add	r4, r4, #1
 313              	.LVL30:
 314              	.L23:
  46:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_OUT_JACK_NUM; i++){
 315              		.loc 1 46 0 is_stmt 0 discriminator 1
 316 0020 002C     		cmp	r4, #0
 317 0022 F2D0     		beq	.L25
 318 0024 0024     		mov	r4, #0
 319              	.LVL31:
  54:Src/usbd_midi_if.c **** 		if(BUFFER_SUCCESS != cureRingBufferU8Init(&rbuf_jack_rx[i], MIDI_BUFFER_SIZ))
 320              		.loc 1 54 0 is_stmt 1
 321 0026 194E     		ldr	r6, .L34+4
 322 0028 8025     		mov	r5, #128
 323 002a AD00     		lsl	r5, r5, #2
 324 002c 09E0     		b	.L26
 325              	.LVL32:
 326              	.L27:
 327 002e 6000     		lsl	r0, r4, #1
 328 0030 0019     		add	r0, r0, r4
 329 0032 8000     		lsl	r0, r0, #2
 330 0034 8019     		add	r0, r0, r6
 331 0036 291C     		mov	r1, r5
 332 0038 FFF7FEFF 		bl	cureRingBufferU8Init
 333              	.LVL33:
 334 003c 0128     		cmp	r0, #1
 335 003e 21D1     		bne	.L33
  53:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_IN_JACK_NUM; i++){
 336              		.loc 1 53 0
 337 0040 0134     		add	r4, r4, #1
 338              	.LVL34:
 339              	.L26:
  53:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_IN_JACK_NUM; i++){
 340              		.loc 1 53 0 is_stmt 0 discriminator 1
 341 0042 002C     		cmp	r4, #0
 342 0044 F3D0     		beq	.L27
 343 0046 0025     		mov	r5, #0
  63:Src/usbd_midi_if.c **** 		rx_midi_msg[i] = 0x00;
 344              		.loc 1 63 0 is_stmt 1
 345 0048 0021     		mov	r1, #0
  68:Src/usbd_midi_if.c **** 			midi_event[i].midi_byte[j] = 0x00;
 346              		.loc 1 68 0
 347 004a 1148     		ldr	r0, .L34+8
 348 004c 14E0     		b	.L28
 349              	.LVL35:
 350              	.L31:
  63:Src/usbd_midi_if.c **** 		rx_midi_msg[i] = 0x00;
 351              		.loc 1 63 0
ARM GAS  /tmp/cceQ4hSH.s 			page 12


 352 004e 114B     		ldr	r3, .L34+12
 353 0050 5955     		strb	r1, [r3, r5]
  64:Src/usbd_midi_if.c **** 		analyzed_status[i].data_idx = 0;
 354              		.loc 1 64 0
 355 0052 AB00     		lsl	r3, r5, #2
 356 0054 104A     		ldr	r2, .L34+16
 357 0056 D318     		add	r3, r2, r3
 358 0058 D970     		strb	r1, [r3, #3]
  65:Src/usbd_midi_if.c **** 		midi_event[i].length = 0;
 359              		.loc 1 65 0
 360 005a AB01     		lsl	r3, r5, #6
 361 005c 5B19     		add	r3, r3, r5
 362 005e 0C4A     		ldr	r2, .L34+8
 363 0060 9954     		strb	r1, [r3, r2]
 364              	.LVL36:
  67:Src/usbd_midi_if.c **** 		for(j=0; j<MIDI_SENDDATA_MAX; j++){
 365              		.loc 1 67 0
 366 0062 0B1C     		mov	r3, r1
  68:Src/usbd_midi_if.c **** 			midi_event[i].midi_byte[j] = 0x00;
 367              		.loc 1 68 0
 368 0064 AC01     		lsl	r4, r5, #6
 369 0066 6419     		add	r4, r4, r5
  67:Src/usbd_midi_if.c **** 		for(j=0; j<MIDI_SENDDATA_MAX; j++){
 370              		.loc 1 67 0
 371 0068 03E0     		b	.L29
 372              	.LVL37:
 373              	.L30:
  68:Src/usbd_midi_if.c **** 			midi_event[i].midi_byte[j] = 0x00;
 374              		.loc 1 68 0 discriminator 2
 375 006a E218     		add	r2, r4, r3
 376 006c 8218     		add	r2, r0, r2
 377 006e 5170     		strb	r1, [r2, #1]
  67:Src/usbd_midi_if.c **** 		for(j=0; j<MIDI_SENDDATA_MAX; j++){
 378              		.loc 1 67 0 discriminator 2
 379 0070 0133     		add	r3, r3, #1
 380              	.LVL38:
 381              	.L29:
  67:Src/usbd_midi_if.c **** 		for(j=0; j<MIDI_SENDDATA_MAX; j++){
 382              		.loc 1 67 0 is_stmt 0 discriminator 1
 383 0072 3F2B     		cmp	r3, #63
 384 0074 F9D9     		bls	.L30
  61:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_IN_JACK_NUM; i++){
 385              		.loc 1 61 0 is_stmt 1
 386 0076 0135     		add	r5, r5, #1
 387              	.LVL39:
 388              	.L28:
  61:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_IN_JACK_NUM; i++){
 389              		.loc 1 61 0 is_stmt 0 discriminator 1
 390 0078 002D     		cmp	r5, #0
 391 007a E8D0     		beq	.L31
  72:Src/usbd_midi_if.c **** 	return FUNC_SUCCESS;
 392              		.loc 1 72 0 is_stmt 1
 393 007c 0120     		mov	r0, #1
 394 007e 02E0     		b	.L24
 395              	.LVL40:
 396              	.L32:
  49:Src/usbd_midi_if.c **** 			return FUNC_ERROR;
ARM GAS  /tmp/cceQ4hSH.s 			page 13


 397              		.loc 1 49 0
 398 0080 0020     		mov	r0, #0
 399 0082 00E0     		b	.L24
 400              	.L33:
  56:Src/usbd_midi_if.c **** 			return FUNC_ERROR;
 401              		.loc 1 56 0
 402 0084 0020     		mov	r0, #0
 403              	.LVL41:
 404              	.L24:
  73:Src/usbd_midi_if.c **** }
 405              		.loc 1 73 0
 406              		@ sp needed
 407 0086 70BD     		pop	{r4, r5, r6, pc}
 408              	.L35:
 409              		.align	2
 410              	.L34:
 411 0088 00000000 		.word	rbuf_usb_rx
 412 008c 00000000 		.word	rbuf_jack_rx
 413 0090 00000000 		.word	midi_event
 414 0094 00000000 		.word	rx_midi_msg
 415 0098 00000000 		.word	analyzed_status
 416              		.cfi_endproc
 417              	.LFE34:
 419              		.section	.text.midiGetFromUsbRx,"ax",%progbits
 420              		.align	2
 421              		.global	midiGetFromUsbRx
 422              		.code	16
 423              		.thumb_func
 425              	midiGetFromUsbRx:
 426              	.LFB35:
  76:Src/usbd_midi_if.c **** {
 427              		.loc 1 76 0
 428              		.cfi_startproc
 429              	.LVL42:
 430 0000 08B5     		push	{r3, lr}
 431              	.LCFI6:
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 3, -8
 434              		.cfi_offset 14, -4
  77:Src/usbd_midi_if.c **** 	if(BUFFER_SUCCESS != cureRingBufferU8Dequeue(&rbuf_usb_rx[cable_num], dat))
 435              		.loc 1 77 0
 436 0002 4300     		lsl	r3, r0, #1
 437 0004 1818     		add	r0, r3, r0
 438              	.LVL43:
 439 0006 8000     		lsl	r0, r0, #2
 440 0008 044B     		ldr	r3, .L39
 441 000a C018     		add	r0, r0, r3
 442 000c FFF7FEFF 		bl	cureRingBufferU8Dequeue
 443              	.LVL44:
 444 0010 0128     		cmp	r0, #1
 445 0012 01D0     		beq	.L38
  79:Src/usbd_midi_if.c **** 		return FUNC_ERROR;
 446              		.loc 1 79 0
 447 0014 0020     		mov	r0, #0
 448 0016 00E0     		b	.L37
 449              	.L38:
  82:Src/usbd_midi_if.c **** 	return FUNC_SUCCESS;
ARM GAS  /tmp/cceQ4hSH.s 			page 14


 450              		.loc 1 82 0
 451 0018 0120     		mov	r0, #1
 452              	.L37:
  83:Src/usbd_midi_if.c **** }
 453              		.loc 1 83 0
 454              		@ sp needed
 455 001a 08BD     		pop	{r3, pc}
 456              	.L40:
 457              		.align	2
 458              	.L39:
 459 001c 00000000 		.word	rbuf_usb_rx
 460              		.cfi_endproc
 461              	.LFE35:
 463              		.section	.text.midiGetFromJackRx,"ax",%progbits
 464              		.align	2
 465              		.global	midiGetFromJackRx
 466              		.code	16
 467              		.thumb_func
 469              	midiGetFromJackRx:
 470              	.LFB36:
  86:Src/usbd_midi_if.c **** {
 471              		.loc 1 86 0
 472              		.cfi_startproc
 473              	.LVL45:
 474 0000 08B5     		push	{r3, lr}
 475              	.LCFI7:
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 3, -8
 478              		.cfi_offset 14, -4
 479 0002 031C     		mov	r3, r0
  87:Src/usbd_midi_if.c **** 	if(BUFFER_SUCCESS != cureRingBufferU8Dequeue(&rbuf_jack_rx[cable_num], &rx_midi_msg[cable_num]))
 480              		.loc 1 87 0
 481 0004 4200     		lsl	r2, r0, #1
 482 0006 1218     		add	r2, r2, r0
 483 0008 9200     		lsl	r2, r2, #2
 484 000a 0648     		ldr	r0, .L44
 485              	.LVL46:
 486 000c 1018     		add	r0, r2, r0
 487 000e 0649     		ldr	r1, .L44+4
 488 0010 5918     		add	r1, r3, r1
 489 0012 FFF7FEFF 		bl	cureRingBufferU8Dequeue
 490              	.LVL47:
 491 0016 0128     		cmp	r0, #1
 492 0018 01D0     		beq	.L43
  89:Src/usbd_midi_if.c **** 		return FUNC_ERROR;
 493              		.loc 1 89 0
 494 001a 0020     		mov	r0, #0
 495 001c 00E0     		b	.L42
 496              	.L43:
  92:Src/usbd_midi_if.c **** 	return FUNC_SUCCESS;
 497              		.loc 1 92 0
 498 001e 0120     		mov	r0, #1
 499              	.L42:
  93:Src/usbd_midi_if.c **** }
 500              		.loc 1 93 0
 501              		@ sp needed
 502 0020 08BD     		pop	{r3, pc}
ARM GAS  /tmp/cceQ4hSH.s 			page 15


 503              	.L45:
 504 0022 C046     		.align	2
 505              	.L44:
 506 0024 00000000 		.word	rbuf_jack_rx
 507 0028 00000000 		.word	rx_midi_msg
 508              		.cfi_endproc
 509              	.LFE36:
 511              		.section	.text.midiSetFromJackRx,"ax",%progbits
 512              		.align	2
 513              		.global	midiSetFromJackRx
 514              		.code	16
 515              		.thumb_func
 517              	midiSetFromJackRx:
 518              	.LFB37:
  96:Src/usbd_midi_if.c **** {
 519              		.loc 1 96 0
 520              		.cfi_startproc
 521              	.LVL48:
 522 0000 08B5     		push	{r3, lr}
 523              	.LCFI8:
 524              		.cfi_def_cfa_offset 8
 525              		.cfi_offset 3, -8
 526              		.cfi_offset 14, -4
  97:Src/usbd_midi_if.c **** 	if(BUFFER_SUCCESS != cureRingBufferU8Enqueue(&rbuf_jack_rx[cable_num], dat))
 527              		.loc 1 97 0
 528 0002 4300     		lsl	r3, r0, #1
 529 0004 1818     		add	r0, r3, r0
 530              	.LVL49:
 531 0006 8000     		lsl	r0, r0, #2
 532 0008 044B     		ldr	r3, .L49
 533 000a C018     		add	r0, r0, r3
 534 000c FFF7FEFF 		bl	cureRingBufferU8Enqueue
 535              	.LVL50:
 536 0010 0128     		cmp	r0, #1
 537 0012 01D0     		beq	.L48
  99:Src/usbd_midi_if.c **** 		return FUNC_ERROR;
 538              		.loc 1 99 0
 539 0014 0020     		mov	r0, #0
 540 0016 00E0     		b	.L47
 541              	.L48:
 102:Src/usbd_midi_if.c **** 	return FUNC_SUCCESS;
 542              		.loc 1 102 0
 543 0018 0120     		mov	r0, #1
 544              	.L47:
 103:Src/usbd_midi_if.c **** }
 545              		.loc 1 103 0
 546              		@ sp needed
 547 001a 08BD     		pop	{r3, pc}
 548              	.L50:
 549              		.align	2
 550              	.L49:
 551 001c 00000000 		.word	rbuf_jack_rx
 552              		.cfi_endproc
 553              	.LFE37:
 555              		.section	.text.isUsbRxBufEmpty,"ax",%progbits
 556              		.align	2
 557              		.global	isUsbRxBufEmpty
ARM GAS  /tmp/cceQ4hSH.s 			page 16


 558              		.code	16
 559              		.thumb_func
 561              	isUsbRxBufEmpty:
 562              	.LFB38:
 107:Src/usbd_midi_if.c **** {
 563              		.loc 1 107 0
 564              		.cfi_startproc
 565              	.LVL51:
 566 0000 08B5     		push	{r3, lr}
 567              	.LCFI9:
 568              		.cfi_def_cfa_offset 8
 569              		.cfi_offset 3, -8
 570              		.cfi_offset 14, -4
 108:Src/usbd_midi_if.c **** 	if( 0 != _cureRingBufferU8GetUsedSize(&rbuf_usb_rx[cable_num]) ){
 571              		.loc 1 108 0
 572 0002 4300     		lsl	r3, r0, #1
 573 0004 1818     		add	r0, r3, r0
 574              	.LVL52:
 575 0006 8000     		lsl	r0, r0, #2
 576 0008 044B     		ldr	r3, .L54
 577 000a C018     		add	r0, r0, r3
 578 000c FFF7FEFF 		bl	_cureRingBufferU8GetUsedSize
 579              	.LVL53:
 580 0010 0028     		cmp	r0, #0
 581 0012 01D0     		beq	.L53
 109:Src/usbd_midi_if.c **** 		return false;
 582              		.loc 1 109 0
 583 0014 0020     		mov	r0, #0
 584 0016 00E0     		b	.L52
 585              	.L53:
 112:Src/usbd_midi_if.c **** 	return true;
 586              		.loc 1 112 0
 587 0018 0120     		mov	r0, #1
 588              	.L52:
 113:Src/usbd_midi_if.c **** }
 589              		.loc 1 113 0
 590              		@ sp needed
 591 001a 08BD     		pop	{r3, pc}
 592              	.L55:
 593              		.align	2
 594              	.L54:
 595 001c 00000000 		.word	rbuf_usb_rx
 596              		.cfi_endproc
 597              	.LFE38:
 599              		.section	.text.isJackRxBufEmpty,"ax",%progbits
 600              		.align	2
 601              		.global	isJackRxBufEmpty
 602              		.code	16
 603              		.thumb_func
 605              	isJackRxBufEmpty:
 606              	.LFB39:
 116:Src/usbd_midi_if.c **** {
 607              		.loc 1 116 0
 608              		.cfi_startproc
 609              	.LVL54:
 610 0000 08B5     		push	{r3, lr}
 611              	.LCFI10:
ARM GAS  /tmp/cceQ4hSH.s 			page 17


 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 3, -8
 614              		.cfi_offset 14, -4
 117:Src/usbd_midi_if.c **** 	if( 0 != _cureRingBufferU8GetUsedSize(&rbuf_jack_rx[cable_num]) ){
 615              		.loc 1 117 0
 616 0002 4300     		lsl	r3, r0, #1
 617 0004 1818     		add	r0, r3, r0
 618              	.LVL55:
 619 0006 8000     		lsl	r0, r0, #2
 620 0008 044B     		ldr	r3, .L59
 621 000a C018     		add	r0, r0, r3
 622 000c FFF7FEFF 		bl	_cureRingBufferU8GetUsedSize
 623              	.LVL56:
 624 0010 0028     		cmp	r0, #0
 625 0012 01D0     		beq	.L58
 118:Src/usbd_midi_if.c **** 		return false;
 626              		.loc 1 118 0
 627 0014 0020     		mov	r0, #0
 628 0016 00E0     		b	.L57
 629              	.L58:
 121:Src/usbd_midi_if.c **** 	return true;
 630              		.loc 1 121 0
 631 0018 0120     		mov	r0, #1
 632              	.L57:
 122:Src/usbd_midi_if.c **** }
 633              		.loc 1 122 0
 634              		@ sp needed
 635 001a 08BD     		pop	{r3, pc}
 636              	.L60:
 637              		.align	2
 638              	.L59:
 639 001c 00000000 		.word	rbuf_jack_rx
 640              		.cfi_endproc
 641              	.LFE39:
 643              		.section	.text.isRxBufEmpty,"ax",%progbits
 644              		.align	2
 645              		.global	isRxBufEmpty
 646              		.code	16
 647              		.thumb_func
 649              	isRxBufEmpty:
 650              	.LFB40:
 125:Src/usbd_midi_if.c **** {
 651              		.loc 1 125 0
 652              		.cfi_startproc
 653 0000 38B5     		push	{r3, r4, r5, lr}
 654              	.LCFI11:
 655              		.cfi_def_cfa_offset 16
 656              		.cfi_offset 3, -16
 657              		.cfi_offset 4, -12
 658              		.cfi_offset 5, -8
 659              		.cfi_offset 14, -4
 660              	.LVL57:
 128:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_OUT_JACK_NUM; i++){
 661              		.loc 1 128 0
 662 0002 0024     		mov	r4, #0
 663 0004 09E0     		b	.L62
 664              	.LVL58:
ARM GAS  /tmp/cceQ4hSH.s 			page 18


 665              	.L64:
 129:Src/usbd_midi_if.c **** 		if(0 != _cureRingBufferU8GetUsedSize(&rbuf_usb_rx[i]))
 666              		.loc 1 129 0
 667 0006 6000     		lsl	r0, r4, #1
 668 0008 0019     		add	r0, r0, r4
 669 000a 8000     		lsl	r0, r0, #2
 670 000c 0E4B     		ldr	r3, .L69
 671 000e C018     		add	r0, r0, r3
 672 0010 FFF7FEFF 		bl	_cureRingBufferU8GetUsedSize
 673              	.LVL59:
 674 0014 0028     		cmp	r0, #0
 675 0016 12D1     		bne	.L67
 128:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_OUT_JACK_NUM; i++){
 676              		.loc 1 128 0
 677 0018 0134     		add	r4, r4, #1
 678              	.LVL60:
 679              	.L62:
 128:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_OUT_JACK_NUM; i++){
 680              		.loc 1 128 0 is_stmt 0 discriminator 1
 681 001a 002C     		cmp	r4, #0
 682 001c F3D0     		beq	.L64
 683 001e 0024     		mov	r4, #0
 684              	.LVL61:
 136:Src/usbd_midi_if.c **** 		if(0 != _cureRingBufferU8GetUsedSize(&rbuf_jack_rx[i]))
 685              		.loc 1 136 0 is_stmt 1
 686 0020 0A4D     		ldr	r5, .L69+4
 687 0022 08E0     		b	.L65
 688              	.LVL62:
 689              	.L66:
 690 0024 6000     		lsl	r0, r4, #1
 691 0026 0019     		add	r0, r0, r4
 692 0028 8000     		lsl	r0, r0, #2
 693 002a 4019     		add	r0, r0, r5
 694 002c FFF7FEFF 		bl	_cureRingBufferU8GetUsedSize
 695              	.LVL63:
 696 0030 0028     		cmp	r0, #0
 697 0032 06D1     		bne	.L68
 135:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_IN_JACK_NUM; i++){
 698              		.loc 1 135 0
 699 0034 0134     		add	r4, r4, #1
 700              	.LVL64:
 701              	.L65:
 135:Src/usbd_midi_if.c **** 	for(i=0; i<MIDI_IN_JACK_NUM; i++){
 702              		.loc 1 135 0 is_stmt 0 discriminator 1
 703 0036 002C     		cmp	r4, #0
 704 0038 F4D0     		beq	.L66
 141:Src/usbd_midi_if.c **** 	return true;
 705              		.loc 1 141 0 is_stmt 1
 706 003a 0120     		mov	r0, #1
 707 003c 02E0     		b	.L63
 708              	.L67:
 131:Src/usbd_midi_if.c **** 			return false;
 709              		.loc 1 131 0
 710 003e 0020     		mov	r0, #0
 711 0040 00E0     		b	.L63
 712              	.L68:
 138:Src/usbd_midi_if.c **** 			return false;
ARM GAS  /tmp/cceQ4hSH.s 			page 19


 713              		.loc 1 138 0
 714 0042 0020     		mov	r0, #0
 715              	.L63:
 142:Src/usbd_midi_if.c **** }
 716              		.loc 1 142 0
 717              		@ sp needed
 718              	.LVL65:
 719 0044 38BD     		pop	{r3, r4, r5, pc}
 720              	.L70:
 721 0046 C046     		.align	2
 722              	.L69:
 723 0048 00000000 		.word	rbuf_usb_rx
 724 004c 00000000 		.word	rbuf_jack_rx
 725              		.cfi_endproc
 726              	.LFE40:
 728              		.section	.text.sendMidiMessage,"ax",%progbits
 729              		.align	2
 730              		.global	sendMidiMessage
 731              		.code	16
 732              		.thumb_func
 734              	sendMidiMessage:
 735              	.LFB42:
 217:Src/usbd_midi_if.c **** void sendMidiMessage(uint8_t *msg, uint16_t size){
 736              		.loc 1 217 0
 737              		.cfi_startproc
 738              	.LVL66:
 739 0000 08B5     		push	{r3, lr}
 740              	.LCFI12:
 741              		.cfi_def_cfa_offset 8
 742              		.cfi_offset 3, -8
 743              		.cfi_offset 14, -4
 218:Src/usbd_midi_if.c ****   if(size == 4){
 744              		.loc 1 218 0
 745 0002 0429     		cmp	r1, #4
 746 0004 01D1     		bne	.L71
 224:Src/usbd_midi_if.c ****     MIDI_DataTx(msg, size);
 747              		.loc 1 224 0
 748 0006 FFF7FEFF 		bl	MIDI_DataTx
 749              	.LVL67:
 750              	.L71:
 226:Src/usbd_midi_if.c **** }
 751              		.loc 1 226 0
 752              		@ sp needed
 753 000a 08BD     		pop	{r3, pc}
 754              		.cfi_endproc
 755              	.LFE42:
 757              		.section	.text.midiEventIsGenerated,"ax",%progbits
 758              		.align	2
 759              		.global	midiEventIsGenerated
 760              		.code	16
 761              		.thumb_func
 763              	midiEventIsGenerated:
 764              	.LFB44:
 240:Src/usbd_midi_if.c **** 
 241:Src/usbd_midi_if.c **** bool midiEventIsGenerated(uint8_t cable_num)
 242:Src/usbd_midi_if.c **** {
 765              		.loc 1 242 0
ARM GAS  /tmp/cceQ4hSH.s 			page 20


 766              		.cfi_startproc
 767              	.LVL68:
 768 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 769              	.LCFI13:
 770              		.cfi_def_cfa_offset 20
 771              		.cfi_offset 4, -20
 772              		.cfi_offset 5, -16
 773              		.cfi_offset 6, -12
 774              		.cfi_offset 7, -8
 775              		.cfi_offset 14, -4
 243:Src/usbd_midi_if.c **** 	uint8_t upper_half_byte= (rx_midi_msg[cable_num]) & 0xF0;
 776              		.loc 1 243 0
 777 0002 8B4B     		ldr	r3, .L100
 778 0004 1A5C     		ldrb	r2, [r3, r0]
 779 0006 0F23     		mov	r3, #15
 780 0008 111C     		mov	r1, r2
 781 000a 9943     		bic	r1, r3
 782 000c 0B1C     		mov	r3, r1
 783              	.LVL69:
 244:Src/usbd_midi_if.c **** 
 245:Src/usbd_midi_if.c **** 	if( upper_half_byte & 0x80 ){//0x80-0xFF:status byte
 784              		.loc 1 245 0
 785 000e 49B2     		sxtb	r1, r1
 786              	.LVL70:
 787 0010 0029     		cmp	r1, #0
 788 0012 00DB     		blt	.LCB787
 789 0014 8FE0     		b	.L74	@long jump
 790              	.LCB787:
 246:Src/usbd_midi_if.c **** 
 247:Src/usbd_midi_if.c **** 		switch(upper_half_byte){
 791              		.loc 1 247 0
 792 0016 B02B     		cmp	r3, #176
 793 0018 67D0     		beq	.L76
 794 001a 06D8     		bhi	.L77
 795 001c 902B     		cmp	r3, #144
 796 001e 64D0     		beq	.L76
 797 0020 A02B     		cmp	r3, #160
 798 0022 62D0     		beq	.L76
 799 0024 802B     		cmp	r3, #128
 800 0026 7ED1     		bne	.L75
 801 0028 5FE0     		b	.L76
 802              	.L77:
 803 002a D02B     		cmp	r3, #208
 804 002c 6CD0     		beq	.L78
 805 002e 02D8     		bhi	.L79
 806 0030 C02B     		cmp	r3, #192
 807 0032 69D0     		beq	.L78
 808 0034 77E0     		b	.L75
 809              	.L79:
 810 0036 E02B     		cmp	r3, #224
 811 0038 57D0     		beq	.L76
 812 003a F02B     		cmp	r3, #240
 813 003c 73D1     		bne	.L75
 248:Src/usbd_midi_if.c **** 
 249:Src/usbd_midi_if.c **** 			case 0xF0://0xF0-0xFF:system message
 250:Src/usbd_midi_if.c **** 				switch(rx_midi_msg[cable_num]){
 814              		.loc 1 250 0
ARM GAS  /tmp/cceQ4hSH.s 			page 21


 815 003e 131C     		mov	r3, r2
 816              	.LVL71:
 817 0040 1033     		add	r3, r3, #16
 818 0042 D9B2     		uxtb	r1, r3
 819 0044 0F29     		cmp	r1, #15
 820 0046 4AD8     		bhi	.L81
 821 0048 8B00     		lsl	r3, r1, #2
 822 004a 7A49     		ldr	r1, .L100+4
 823 004c CB58     		ldr	r3, [r1, r3]
 824 004e 9F46     		mov	pc, r3
 825              		.section	.rodata.midiEventIsGenerated,"a",%progbits
 826              		.align	2
 827              	.L83:
 828 0000 50000000 		.word	.L82
 829 0004 A8000000 		.word	.L84
 830 0008 8E000000 		.word	.L85
 831 000c A8000000 		.word	.L84
 832 0010 C2000000 		.word	.L86
 833 0014 C2000000 		.word	.L86
 834 0018 C2000000 		.word	.L86
 835 001c 6C000000 		.word	.L87
 836 0020 C2000000 		.word	.L86
 837 0024 C2000000 		.word	.L86
 838 0028 C2000000 		.word	.L86
 839 002c C2000000 		.word	.L86
 840 0030 C2000000 		.word	.L86
 841 0034 C2000000 		.word	.L86
 842 0038 C2000000 		.word	.L86
 843 003c C2000000 		.word	.L86
 844              		.section	.text.midiEventIsGenerated
 845              	.L82:
 251:Src/usbd_midi_if.c **** 
 252:Src/usbd_midi_if.c **** 					case 0xF0://SysEx Start
 253:Src/usbd_midi_if.c **** 						analyzed_status[cable_num].data_idx = 0;
 846              		.loc 1 253 0
 847 0050 794B     		ldr	r3, .L100+8
 848 0052 8100     		lsl	r1, r0, #2
 849 0054 5C18     		add	r4, r3, r1
 254:Src/usbd_midi_if.c **** 						midi_event[cable_num].midi_byte[ analyzed_status[cable_num].data_idx++ ] = rx_midi_msg[cable_
 850              		.loc 1 254 0
 851 0056 0125     		mov	r5, #1
 852 0058 E570     		strb	r5, [r4, #3]
 853 005a 8601     		lsl	r6, r0, #6
 854 005c 3618     		add	r6, r6, r0
 855 005e 774F     		ldr	r7, .L100+12
 856 0060 BE19     		add	r6, r7, r6
 857 0062 7270     		strb	r2, [r6, #1]
 255:Src/usbd_midi_if.c **** 						analyzed_status[cable_num].type = MSG_SYSEX;
 858              		.loc 1 255 0
 859 0064 6570     		strb	r5, [r4, #1]
 256:Src/usbd_midi_if.c **** 						analyzed_status[cable_num].stat = WAIT_SYSTEM_DATA;
 860              		.loc 1 256 0
 861 0066 0322     		mov	r2, #3
 862              	.LVL72:
 863 0068 CA54     		strb	r2, [r1, r3]
 257:Src/usbd_midi_if.c **** 						break;
 864              		.loc 1 257 0
ARM GAS  /tmp/cceQ4hSH.s 			page 22


 865 006a 38E0     		b	.L81
 866              	.LVL73:
 867              	.L87:
 258:Src/usbd_midi_if.c **** 
 259:Src/usbd_midi_if.c **** 					case 0xF7://SysEx End
 260:Src/usbd_midi_if.c **** 						midi_event[cable_num].midi_byte[ analyzed_status[cable_num].data_idx++ ] = rx_midi_msg[cable_
 868              		.loc 1 260 0
 869 006c 724B     		ldr	r3, .L100+8
 870 006e 8100     		lsl	r1, r0, #2
 871 0070 5C18     		add	r4, r3, r1
 872 0072 E778     		ldrb	r7, [r4, #3]
 873 0074 7E1C     		add	r6, r7, #1
 874 0076 F6B2     		uxtb	r6, r6
 875 0078 E670     		strb	r6, [r4, #3]
 876 007a 704C     		ldr	r4, .L100+12
 877 007c 8501     		lsl	r5, r0, #6
 878 007e 2D18     		add	r5, r5, r0
 879 0080 EF19     		add	r7, r5, r7
 880 0082 E719     		add	r7, r4, r7
 881 0084 7A70     		strb	r2, [r7, #1]
 261:Src/usbd_midi_if.c **** 						midi_event[cable_num].length = analyzed_status[cable_num].data_idx;
 882              		.loc 1 261 0
 883 0086 2E55     		strb	r6, [r5, r4]
 262:Src/usbd_midi_if.c **** 						analyzed_status[cable_num].stat = END_ANALYSIS;
 884              		.loc 1 262 0
 885 0088 0422     		mov	r2, #4
 886              	.LVL74:
 887 008a CA54     		strb	r2, [r1, r3]
 263:Src/usbd_midi_if.c **** 						break;
 888              		.loc 1 263 0
 889 008c 27E0     		b	.L81
 890              	.LVL75:
 891              	.L85:
 264:Src/usbd_midi_if.c **** 
 265:Src/usbd_midi_if.c **** 					case 0xF2://Song Position
 266:Src/usbd_midi_if.c **** 						midi_event[cable_num].midi_byte[0] = rx_midi_msg[cable_num];
 892              		.loc 1 266 0
 893 008e 8301     		lsl	r3, r0, #6
 894 0090 1B18     		add	r3, r3, r0
 895 0092 6A49     		ldr	r1, .L100+12
 896 0094 CB18     		add	r3, r1, r3
 897 0096 5A70     		strb	r2, [r3, #1]
 267:Src/usbd_midi_if.c **** 						analyzed_status[cable_num].type = MSG_THREE_BYTE;
 898              		.loc 1 267 0
 899 0098 674B     		ldr	r3, .L100+8
 900 009a 8200     		lsl	r2, r0, #2
 901              	.LVL76:
 902 009c 9918     		add	r1, r3, r2
 903 009e 0424     		mov	r4, #4
 904 00a0 4C70     		strb	r4, [r1, #1]
 268:Src/usbd_midi_if.c **** 						analyzed_status[cable_num].stat = WAIT_DATA1;
 905              		.loc 1 268 0
 906 00a2 0121     		mov	r1, #1
 907 00a4 D154     		strb	r1, [r2, r3]
 269:Src/usbd_midi_if.c **** 						break;
 908              		.loc 1 269 0
 909 00a6 1AE0     		b	.L81
ARM GAS  /tmp/cceQ4hSH.s 			page 23


 910              	.LVL77:
 911              	.L84:
 270:Src/usbd_midi_if.c **** 
 271:Src/usbd_midi_if.c **** 					case 0xF1://Time Code
 272:Src/usbd_midi_if.c **** 					case 0xF3://Song Select
 273:Src/usbd_midi_if.c **** 						midi_event[cable_num].midi_byte[0] = rx_midi_msg[cable_num];
 912              		.loc 1 273 0
 913 00a8 8301     		lsl	r3, r0, #6
 914 00aa 1B18     		add	r3, r3, r0
 915 00ac 6349     		ldr	r1, .L100+12
 916 00ae CB18     		add	r3, r1, r3
 917 00b0 5A70     		strb	r2, [r3, #1]
 274:Src/usbd_midi_if.c **** 						analyzed_status[cable_num].type = MSG_TWO_BYTE;
 918              		.loc 1 274 0
 919 00b2 614B     		ldr	r3, .L100+8
 920 00b4 8200     		lsl	r2, r0, #2
 921              	.LVL78:
 922 00b6 9918     		add	r1, r3, r2
 923 00b8 0324     		mov	r4, #3
 924 00ba 4C70     		strb	r4, [r1, #1]
 275:Src/usbd_midi_if.c **** 						analyzed_status[cable_num].stat = WAIT_DATA1;
 925              		.loc 1 275 0
 926 00bc 0121     		mov	r1, #1
 927 00be D154     		strb	r1, [r2, r3]
 276:Src/usbd_midi_if.c **** 						break;
 928              		.loc 1 276 0
 929 00c0 0DE0     		b	.L81
 930              	.LVL79:
 931              	.L86:
 277:Src/usbd_midi_if.c **** 
 278:Src/usbd_midi_if.c **** 					case 0xF4://Undefined
 279:Src/usbd_midi_if.c **** 					case 0xF5://Undefined
 280:Src/usbd_midi_if.c **** 					case 0xF6://Tune request
 281:Src/usbd_midi_if.c **** 					case 0xF8://Timing clock
 282:Src/usbd_midi_if.c **** 					case 0xF9://Undefined
 283:Src/usbd_midi_if.c **** 					case 0xFA://Start
 284:Src/usbd_midi_if.c **** 					case 0xFB://Continue
 285:Src/usbd_midi_if.c **** 					case 0xFC://Stop
 286:Src/usbd_midi_if.c **** 					case 0xFD://Undefined
 287:Src/usbd_midi_if.c **** 					case 0xFE://Active Sensing
 288:Src/usbd_midi_if.c **** 					case 0xFF://Reset
 289:Src/usbd_midi_if.c **** 						midi_event[cable_num].midi_byte[0] = rx_midi_msg[cable_num];
 932              		.loc 1 289 0
 933 00c2 5E4B     		ldr	r3, .L100+12
 934 00c4 8101     		lsl	r1, r0, #6
 935 00c6 0918     		add	r1, r1, r0
 936 00c8 5C18     		add	r4, r3, r1
 937 00ca 6270     		strb	r2, [r4, #1]
 290:Src/usbd_midi_if.c **** 						midi_event[cable_num].length = 1;
 938              		.loc 1 290 0
 939 00cc 0122     		mov	r2, #1
 940              	.LVL80:
 941 00ce CA54     		strb	r2, [r1, r3]
 291:Src/usbd_midi_if.c **** 						analyzed_status[cable_num].type = MSG_ONE_BYTE;
 942              		.loc 1 291 0
 943 00d0 594B     		ldr	r3, .L100+8
 944 00d2 8200     		lsl	r2, r0, #2
ARM GAS  /tmp/cceQ4hSH.s 			page 24


 945 00d4 9918     		add	r1, r3, r2
 946 00d6 0224     		mov	r4, #2
 947 00d8 4C70     		strb	r4, [r1, #1]
 292:Src/usbd_midi_if.c **** 						analyzed_status[cable_num].stat = END_ANALYSIS;
 948              		.loc 1 292 0
 949 00da 0421     		mov	r1, #4
 950 00dc D154     		strb	r1, [r2, r3]
 951              	.L81:
 293:Src/usbd_midi_if.c **** 						break;
 294:Src/usbd_midi_if.c **** 				}
 295:Src/usbd_midi_if.c **** 				analyzed_status[cable_num].is_system_common = true;
 952              		.loc 1 295 0
 953 00de 8300     		lsl	r3, r0, #2
 954 00e0 554A     		ldr	r2, .L100+8
 955 00e2 D318     		add	r3, r2, r3
 956 00e4 0122     		mov	r2, #1
 957 00e6 9A70     		strb	r2, [r3, #2]
 296:Src/usbd_midi_if.c **** 				break;
 958              		.loc 1 296 0
 959 00e8 98E0     		b	.L88
 960              	.LVL81:
 961              	.L76:
 297:Src/usbd_midi_if.c **** 
 298:Src/usbd_midi_if.c **** 			case 0x80://Note Off
 299:Src/usbd_midi_if.c **** 			case 0x90://Note On
 300:Src/usbd_midi_if.c **** 			case 0xA0://Polyphonic key-pressure
 301:Src/usbd_midi_if.c **** 			case 0xB0://ControlChange
 302:Src/usbd_midi_if.c **** 			case 0xE0://PitchBend
 303:Src/usbd_midi_if.c **** 				midi_event[cable_num].midi_byte[0] = rx_midi_msg[cable_num];
 962              		.loc 1 303 0
 963 00ea 8301     		lsl	r3, r0, #6
 964              	.LVL82:
 965 00ec 1B18     		add	r3, r3, r0
 966 00ee 5349     		ldr	r1, .L100+12
 967 00f0 CB18     		add	r3, r1, r3
 968 00f2 5A70     		strb	r2, [r3, #1]
 304:Src/usbd_midi_if.c **** 				analyzed_status[cable_num].type = MSG_THREE_BYTE;
 969              		.loc 1 304 0
 970 00f4 504A     		ldr	r2, .L100+8
 971              	.LVL83:
 972 00f6 8100     		lsl	r1, r0, #2
 973 00f8 5318     		add	r3, r2, r1
 974 00fa 0424     		mov	r4, #4
 975 00fc 5C70     		strb	r4, [r3, #1]
 305:Src/usbd_midi_if.c **** 				analyzed_status[cable_num].stat = WAIT_DATA1;
 976              		.loc 1 305 0
 977 00fe 0124     		mov	r4, #1
 978 0100 8C54     		strb	r4, [r1, r2]
 306:Src/usbd_midi_if.c **** 				analyzed_status[cable_num].is_system_common = false;
 979              		.loc 1 306 0
 980 0102 0022     		mov	r2, #0
 981 0104 9A70     		strb	r2, [r3, #2]
 307:Src/usbd_midi_if.c **** 				break;
 982              		.loc 1 307 0
 983 0106 89E0     		b	.L88
 984              	.LVL84:
 985              	.L78:
ARM GAS  /tmp/cceQ4hSH.s 			page 25


 308:Src/usbd_midi_if.c **** 
 309:Src/usbd_midi_if.c **** 			case 0xC0://Program Change
 310:Src/usbd_midi_if.c **** 			case 0xD0://Channel pressure
 311:Src/usbd_midi_if.c **** 				midi_event[cable_num].midi_byte[0] = rx_midi_msg[cable_num];
 986              		.loc 1 311 0
 987 0108 8301     		lsl	r3, r0, #6
 988              	.LVL85:
 989 010a 1B18     		add	r3, r3, r0
 990 010c 4B49     		ldr	r1, .L100+12
 991 010e CB18     		add	r3, r1, r3
 992 0110 5A70     		strb	r2, [r3, #1]
 312:Src/usbd_midi_if.c **** 				analyzed_status[cable_num].type = MSG_TWO_BYTE;
 993              		.loc 1 312 0
 994 0112 494A     		ldr	r2, .L100+8
 995              	.LVL86:
 996 0114 8100     		lsl	r1, r0, #2
 997 0116 5318     		add	r3, r2, r1
 998 0118 0324     		mov	r4, #3
 999 011a 5C70     		strb	r4, [r3, #1]
 313:Src/usbd_midi_if.c **** 				analyzed_status[cable_num].stat = WAIT_DATA1;
 1000              		.loc 1 313 0
 1001 011c 0124     		mov	r4, #1
 1002 011e 8C54     		strb	r4, [r1, r2]
 314:Src/usbd_midi_if.c **** 				analyzed_status[cable_num].is_system_common = false;
 1003              		.loc 1 314 0
 1004 0120 0022     		mov	r2, #0
 1005 0122 9A70     		strb	r2, [r3, #2]
 315:Src/usbd_midi_if.c **** 				break;
 1006              		.loc 1 315 0
 1007 0124 7AE0     		b	.L88
 1008              	.LVL87:
 1009              	.L75:
 316:Src/usbd_midi_if.c **** 
 317:Src/usbd_midi_if.c **** 			default:
 318:Src/usbd_midi_if.c **** 				analyzed_status[cable_num].type = MSG_NOTHING;
 1010              		.loc 1 318 0
 1011 0126 4449     		ldr	r1, .L100+8
 1012 0128 8400     		lsl	r4, r0, #2
 1013 012a 0A19     		add	r2, r1, r4
 1014 012c 0023     		mov	r3, #0
 1015              	.LVL88:
 1016 012e 5370     		strb	r3, [r2, #1]
 319:Src/usbd_midi_if.c **** 				analyzed_status[cable_num].stat = START_ANALYSIS;
 1017              		.loc 1 319 0
 1018 0130 6354     		strb	r3, [r4, r1]
 320:Src/usbd_midi_if.c **** 				analyzed_status[cable_num].is_system_common = false;
 1019              		.loc 1 320 0
 1020 0132 9370     		strb	r3, [r2, #2]
 321:Src/usbd_midi_if.c **** 				break;
 1021              		.loc 1 321 0
 1022 0134 72E0     		b	.L88
 1023              	.LVL89:
 1024              	.L74:
 322:Src/usbd_midi_if.c **** 		}
 323:Src/usbd_midi_if.c **** 
 324:Src/usbd_midi_if.c **** 	}else{//0x00-0x7F:data byte
 325:Src/usbd_midi_if.c **** 
ARM GAS  /tmp/cceQ4hSH.s 			page 26


 326:Src/usbd_midi_if.c **** 		switch(analyzed_status[cable_num].stat){
 1025              		.loc 1 326 0
 1026 0136 8300     		lsl	r3, r0, #2
 1027              	.LVL90:
 1028 0138 3F49     		ldr	r1, .L100+8
 1029 013a 5B5C     		ldrb	r3, [r3, r1]
 1030 013c 022B     		cmp	r3, #2
 1031 013e 28D0     		beq	.L89
 1032 0140 02D8     		bhi	.L90
 1033 0142 012B     		cmp	r3, #1
 1034 0144 05D0     		beq	.L91
 1035 0146 69E0     		b	.L88
 1036              	.L90:
 1037 0148 032B     		cmp	r3, #3
 1038 014a 39D0     		beq	.L92
 1039 014c 042B     		cmp	r3, #4
 1040 014e 4BD0     		beq	.L93
 1041 0150 64E0     		b	.L88
 1042              	.L91:
 327:Src/usbd_midi_if.c **** 
 328:Src/usbd_midi_if.c **** 			case WAIT_DATA1:
 329:Src/usbd_midi_if.c **** 				midi_event[cable_num].midi_byte[1] = rx_midi_msg[cable_num];
 1043              		.loc 1 329 0
 1044 0152 8301     		lsl	r3, r0, #6
 1045 0154 1B18     		add	r3, r3, r0
 1046 0156 3949     		ldr	r1, .L100+12
 1047 0158 CB18     		add	r3, r1, r3
 1048 015a 9A70     		strb	r2, [r3, #2]
 330:Src/usbd_midi_if.c **** 
 331:Src/usbd_midi_if.c **** 				if(MSG_THREE_BYTE == analyzed_status[cable_num].type ){
 1049              		.loc 1 331 0
 1050 015c 8300     		lsl	r3, r0, #2
 1051 015e 364A     		ldr	r2, .L100+8
 1052              	.LVL91:
 1053 0160 D318     		add	r3, r2, r3
 1054 0162 5B78     		ldrb	r3, [r3, #1]
 1055 0164 042B     		cmp	r3, #4
 1056 0166 03D1     		bne	.L94
 332:Src/usbd_midi_if.c **** 					analyzed_status[cable_num].stat = WAIT_DATA2;
 1057              		.loc 1 332 0
 1058 0168 8300     		lsl	r3, r0, #2
 1059 016a 0221     		mov	r1, #2
 1060 016c 9954     		strb	r1, [r3, r2]
 1061 016e 55E0     		b	.L88
 1062              	.L94:
 333:Src/usbd_midi_if.c **** 				}else if( MSG_TWO_BYTE == analyzed_status[cable_num].type ){
 1063              		.loc 1 333 0
 1064 0170 032B     		cmp	r3, #3
 1065 0172 09D1     		bne	.L95
 334:Src/usbd_midi_if.c **** 					midi_event[cable_num].length = 2;
 1066              		.loc 1 334 0
 1067 0174 8201     		lsl	r2, r0, #6
 1068 0176 1218     		add	r2, r2, r0
 1069 0178 0221     		mov	r1, #2
 1070 017a 304B     		ldr	r3, .L100+12
 1071 017c D154     		strb	r1, [r2, r3]
 335:Src/usbd_midi_if.c **** 					analyzed_status[cable_num].stat = END_ANALYSIS;
ARM GAS  /tmp/cceQ4hSH.s 			page 27


 1072              		.loc 1 335 0
 1073 017e 8300     		lsl	r3, r0, #2
 1074 0180 0421     		mov	r1, #4
 1075 0182 2D4A     		ldr	r2, .L100+8
 1076 0184 9954     		strb	r1, [r3, r2]
 1077 0186 49E0     		b	.L88
 1078              	.L95:
 336:Src/usbd_midi_if.c **** 				}else{
 337:Src/usbd_midi_if.c **** 					analyzed_status[cable_num].stat = START_ANALYSIS;
 1079              		.loc 1 337 0
 1080 0188 8300     		lsl	r3, r0, #2
 1081 018a 0021     		mov	r1, #0
 1082 018c 2A4A     		ldr	r2, .L100+8
 1083 018e 9954     		strb	r1, [r3, r2]
 1084 0190 44E0     		b	.L88
 1085              	.LVL92:
 1086              	.L89:
 338:Src/usbd_midi_if.c **** 				}
 339:Src/usbd_midi_if.c **** 				break;
 340:Src/usbd_midi_if.c **** 
 341:Src/usbd_midi_if.c **** 			case WAIT_DATA2:
 342:Src/usbd_midi_if.c **** 				if(MSG_THREE_BYTE == analyzed_status[cable_num].type ){
 1087              		.loc 1 342 0
 1088 0192 8300     		lsl	r3, r0, #2
 1089 0194 2849     		ldr	r1, .L100+8
 1090 0196 CB18     		add	r3, r1, r3
 1091 0198 5B78     		ldrb	r3, [r3, #1]
 1092 019a 042B     		cmp	r3, #4
 1093 019c 0BD1     		bne	.L96
 343:Src/usbd_midi_if.c **** 					midi_event[cable_num].midi_byte[2] = rx_midi_msg[cable_num];
 1094              		.loc 1 343 0
 1095 019e 274B     		ldr	r3, .L100+12
 1096 01a0 8101     		lsl	r1, r0, #6
 1097 01a2 0918     		add	r1, r1, r0
 1098 01a4 5C18     		add	r4, r3, r1
 1099 01a6 E270     		strb	r2, [r4, #3]
 344:Src/usbd_midi_if.c **** 					midi_event[cable_num].length = 3;
 1100              		.loc 1 344 0
 1101 01a8 0322     		mov	r2, #3
 1102              	.LVL93:
 1103 01aa CA54     		strb	r2, [r1, r3]
 345:Src/usbd_midi_if.c **** 					analyzed_status[cable_num].stat = END_ANALYSIS;
 1104              		.loc 1 345 0
 1105 01ac 8300     		lsl	r3, r0, #2
 1106 01ae 0421     		mov	r1, #4
 1107 01b0 214A     		ldr	r2, .L100+8
 1108 01b2 9954     		strb	r1, [r3, r2]
 1109 01b4 32E0     		b	.L88
 1110              	.LVL94:
 1111              	.L96:
 346:Src/usbd_midi_if.c **** 				}else{
 347:Src/usbd_midi_if.c **** 					analyzed_status[cable_num].stat = START_ANALYSIS;
 1112              		.loc 1 347 0
 1113 01b6 8300     		lsl	r3, r0, #2
 1114 01b8 0021     		mov	r1, #0
 1115 01ba 1F4A     		ldr	r2, .L100+8
 1116              	.LVL95:
ARM GAS  /tmp/cceQ4hSH.s 			page 28


 1117 01bc 9954     		strb	r1, [r3, r2]
 1118 01be 2DE0     		b	.L88
 1119              	.LVL96:
 1120              	.L92:
 348:Src/usbd_midi_if.c **** 				}
 349:Src/usbd_midi_if.c **** 				break;
 350:Src/usbd_midi_if.c **** 
 351:Src/usbd_midi_if.c **** 			case WAIT_SYSTEM_DATA:
 352:Src/usbd_midi_if.c **** 				midi_event[cable_num].midi_byte[ analyzed_status[cable_num].data_idx++ ] = rx_midi_msg[cable_nu
 1121              		.loc 1 352 0
 1122 01c0 8400     		lsl	r4, r0, #2
 1123 01c2 1D4B     		ldr	r3, .L100+8
 1124 01c4 1C19     		add	r4, r3, r4
 1125 01c6 E178     		ldrb	r1, [r4, #3]
 1126 01c8 4B1C     		add	r3, r1, #1
 1127 01ca DBB2     		uxtb	r3, r3
 1128 01cc E370     		strb	r3, [r4, #3]
 1129 01ce 8401     		lsl	r4, r0, #6
 1130 01d0 2418     		add	r4, r4, r0
 1131 01d2 6118     		add	r1, r4, r1
 1132 01d4 194C     		ldr	r4, .L100+12
 1133 01d6 6118     		add	r1, r4, r1
 1134 01d8 4A70     		strb	r2, [r1, #1]
 353:Src/usbd_midi_if.c **** 
 354:Src/usbd_midi_if.c **** 				if(analyzed_status[cable_num].data_idx > (MIDI_SENDDATA_MAX - 1) ){
 1135              		.loc 1 354 0
 1136 01da 3F2B     		cmp	r3, #63
 1137 01dc 1ED9     		bls	.L88
 355:Src/usbd_midi_if.c **** 					analyzed_status[cable_num].stat = END_ANALYSIS;
 1138              		.loc 1 355 0
 1139 01de 8300     		lsl	r3, r0, #2
 1140 01e0 0421     		mov	r1, #4
 1141 01e2 154A     		ldr	r2, .L100+8
 1142              	.LVL97:
 1143 01e4 9954     		strb	r1, [r3, r2]
 1144 01e6 19E0     		b	.L88
 1145              	.LVL98:
 1146              	.L93:
 356:Src/usbd_midi_if.c **** 				}
 357:Src/usbd_midi_if.c **** 				break;
 358:Src/usbd_midi_if.c **** 
 359:Src/usbd_midi_if.c **** 			case END_ANALYSIS://running status:When status byte is omitted.
 360:Src/usbd_midi_if.c **** 				midi_event[cable_num].midi_byte[1] = rx_midi_msg[cable_num];
 1147              		.loc 1 360 0
 1148 01e8 8301     		lsl	r3, r0, #6
 1149 01ea 1B18     		add	r3, r3, r0
 1150 01ec 1349     		ldr	r1, .L100+12
 1151 01ee CB18     		add	r3, r1, r3
 1152 01f0 9A70     		strb	r2, [r3, #2]
 361:Src/usbd_midi_if.c **** 				if(MSG_THREE_BYTE == analyzed_status[cable_num].type){
 1153              		.loc 1 361 0
 1154 01f2 8300     		lsl	r3, r0, #2
 1155 01f4 104A     		ldr	r2, .L100+8
 1156              	.LVL99:
 1157 01f6 D318     		add	r3, r2, r3
 1158 01f8 5B78     		ldrb	r3, [r3, #1]
 1159 01fa 042B     		cmp	r3, #4
ARM GAS  /tmp/cceQ4hSH.s 			page 29


 1160 01fc 03D1     		bne	.L97
 362:Src/usbd_midi_if.c **** 					analyzed_status[cable_num].stat = WAIT_DATA2;
 1161              		.loc 1 362 0
 1162 01fe 8300     		lsl	r3, r0, #2
 1163 0200 0221     		mov	r1, #2
 1164 0202 9954     		strb	r1, [r3, r2]
 1165 0204 0AE0     		b	.L88
 1166              	.L97:
 363:Src/usbd_midi_if.c **** 				}else if(MSG_TWO_BYTE == analyzed_status[cable_num].type){
 1167              		.loc 1 363 0
 1168 0206 032B     		cmp	r3, #3
 1169 0208 08D1     		bne	.L88
 364:Src/usbd_midi_if.c **** 					midi_event[cable_num].length = 2;
 1170              		.loc 1 364 0
 1171 020a 8201     		lsl	r2, r0, #6
 1172 020c 1218     		add	r2, r2, r0
 1173 020e 0221     		mov	r1, #2
 1174 0210 0A4B     		ldr	r3, .L100+12
 1175 0212 D154     		strb	r1, [r2, r3]
 365:Src/usbd_midi_if.c **** 					analyzed_status[cable_num].stat = END_ANALYSIS;
 1176              		.loc 1 365 0
 1177 0214 8300     		lsl	r3, r0, #2
 1178 0216 0421     		mov	r1, #4
 1179 0218 074A     		ldr	r2, .L100+8
 1180 021a 9954     		strb	r1, [r3, r2]
 1181              	.L88:
 366:Src/usbd_midi_if.c **** 				}
 367:Src/usbd_midi_if.c **** 				break;
 368:Src/usbd_midi_if.c **** 
 369:Src/usbd_midi_if.c **** 			case START_ANALYSIS:
 370:Src/usbd_midi_if.c **** 				break;
 371:Src/usbd_midi_if.c **** 
 372:Src/usbd_midi_if.c **** 			default:
 373:Src/usbd_midi_if.c **** 				break;
 374:Src/usbd_midi_if.c **** 		}
 375:Src/usbd_midi_if.c **** 	}
 376:Src/usbd_midi_if.c **** 
 377:Src/usbd_midi_if.c **** 	if(END_ANALYSIS == analyzed_status[cable_num].stat){
 1182              		.loc 1 377 0
 1183 021c 8000     		lsl	r0, r0, #2
 1184              	.LVL100:
 1185 021e 064B     		ldr	r3, .L100+8
 1186 0220 C35C     		ldrb	r3, [r0, r3]
 1187 0222 042B     		cmp	r3, #4
 1188 0224 01D1     		bne	.L99
 378:Src/usbd_midi_if.c **** 		return true;
 1189              		.loc 1 378 0
 1190 0226 0120     		mov	r0, #1
 1191 0228 00E0     		b	.L98
 1192              	.L99:
 379:Src/usbd_midi_if.c **** 	}else{
 380:Src/usbd_midi_if.c **** 		return false;
 1193              		.loc 1 380 0
 1194 022a 0020     		mov	r0, #0
 1195              	.L98:
 381:Src/usbd_midi_if.c **** 	}
 382:Src/usbd_midi_if.c **** 
ARM GAS  /tmp/cceQ4hSH.s 			page 30


 383:Src/usbd_midi_if.c **** }
 1196              		.loc 1 383 0
 1197              		@ sp needed
 1198 022c F0BD     		pop	{r4, r5, r6, r7, pc}
 1199              	.L101:
 1200 022e C046     		.align	2
 1201              	.L100:
 1202 0230 00000000 		.word	rx_midi_msg
 1203 0234 00000000 		.word	.L83
 1204 0238 00000000 		.word	analyzed_status
 1205 023c 00000000 		.word	midi_event
 1206              		.cfi_endproc
 1207              	.LFE44:
 1209              		.section	.text.midiGenerateUsbPacket,"ax",%progbits
 1210              		.align	2
 1211              		.global	midiGenerateUsbPacket
 1212              		.code	16
 1213              		.thumb_func
 1215              	midiGenerateUsbPacket:
 1216              	.LFB45:
 384:Src/usbd_midi_if.c **** 
 385:Src/usbd_midi_if.c **** 
 386:Src/usbd_midi_if.c **** void midiGenerateUsbPacket(uint8_t cable_num)
 387:Src/usbd_midi_if.c **** {
 1217              		.loc 1 387 0
 1218              		.cfi_startproc
 1219              	.LVL101:
 1220 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1221              	.LCFI14:
 1222              		.cfi_def_cfa_offset 20
 1223              		.cfi_offset 4, -20
 1224              		.cfi_offset 5, -16
 1225              		.cfi_offset 6, -12
 1226              		.cfi_offset 7, -8
 1227              		.cfi_offset 14, -4
 1228 0002 5746     		mov	r7, r10
 1229 0004 4E46     		mov	r6, r9
 1230 0006 4546     		mov	r5, r8
 1231 0008 E0B4     		push	{r5, r6, r7}
 1232              	.LCFI15:
 1233              		.cfi_def_cfa_offset 32
 1234              		.cfi_offset 8, -32
 1235              		.cfi_offset 9, -28
 1236              		.cfi_offset 10, -24
 1237 000a 82B0     		sub	sp, sp, #8
 1238              	.LCFI16:
 1239              		.cfi_def_cfa_offset 40
 1240 000c 8246     		mov	r10, r0
 388:Src/usbd_midi_if.c **** 	uint8_t msg_buf[4] = {0x00,0x00,0x00,0x00};
 1241              		.loc 1 388 0
 1242 000e 01AB     		add	r3, sp, #4
 1243 0010 0022     		mov	r2, #0
 1244 0012 1A70     		strb	r2, [r3]
 1245 0014 5A70     		strb	r2, [r3, #1]
 1246 0016 9A70     		strb	r2, [r3, #2]
 1247 0018 DA70     		strb	r2, [r3, #3]
 1248              	.LVL102:
ARM GAS  /tmp/cceQ4hSH.s 			page 31


 389:Src/usbd_midi_if.c **** 	uint32_t cnt_remain=0, cnt_length;
 390:Src/usbd_midi_if.c **** 
 391:Src/usbd_midi_if.c **** 	switch(analyzed_status[cable_num].type){
 1249              		.loc 1 391 0
 1250 001a 061C     		mov	r6, r0
 1251 001c 8300     		lsl	r3, r0, #2
 1252 001e 524A     		ldr	r2, .L123
 1253 0020 D318     		add	r3, r2, r3
 1254 0022 5B78     		ldrb	r3, [r3, #1]
 1255 0024 022B     		cmp	r3, #2
 1256 0026 07D0     		beq	.L104
 1257 0028 03D8     		bhi	.L105
 1258 002a 012B     		cmp	r3, #1
 1259 002c 00D1     		bne	.LCB1231
 1260 002e 88E0     		b	.L120	@long jump
 1261              	.LCB1231:
 1262 0030 92E0     		b	.L103
 1263              	.L105:
 1264 0032 042B     		cmp	r3, #4
 1265 0034 0ED9     		bls	.L122
 1266 0036 8FE0     		b	.L103
 1267              	.L104:
 392:Src/usbd_midi_if.c **** 
 393:Src/usbd_midi_if.c **** 		case MSG_ONE_BYTE:
 394:Src/usbd_midi_if.c **** 			//byte 0: cable number + code index number
 395:Src/usbd_midi_if.c **** 			msg_buf[0] = (cable_num << 4) + ((midi_event[cable_num].midi_byte[0] & 0xF0) >> 4);
 1268              		.loc 1 395 0
 1269 0038 8301     		lsl	r3, r0, #6
 1270 003a 5344     		add	r3, r3, r10
 1271 003c 4B4A     		ldr	r2, .L123+4
 1272 003e D318     		add	r3, r2, r3
 1273 0040 5A78     		ldrb	r2, [r3, #1]
 1274 0042 1209     		lsr	r2, r2, #4
 1275 0044 01A8     		add	r0, sp, #4
 1276              	.LVL103:
 1277 0046 3301     		lsl	r3, r6, #4
 1278 0048 D318     		add	r3, r2, r3
 1279 004a 0370     		strb	r3, [r0]
 396:Src/usbd_midi_if.c **** 
 397:Src/usbd_midi_if.c **** 			sendMidiMessage(msg_buf,4);
 1280              		.loc 1 397 0
 1281 004c 0421     		mov	r1, #4
 1282 004e FFF7FEFF 		bl	sendMidiMessage
 1283              	.LVL104:
 398:Src/usbd_midi_if.c **** 			break;
 1284              		.loc 1 398 0
 1285 0052 81E0     		b	.L103
 1286              	.LVL105:
 1287              	.L122:
 399:Src/usbd_midi_if.c **** 
 400:Src/usbd_midi_if.c **** 		case MSG_TWO_BYTE:
 401:Src/usbd_midi_if.c **** 		case MSG_THREE_BYTE:
 402:Src/usbd_midi_if.c **** 			//byte 0: cable number + code index number
 403:Src/usbd_midi_if.c **** 			if(analyzed_status[cable_num].is_system_common){
 1288              		.loc 1 403 0
 1289 0054 8300     		lsl	r3, r0, #2
 1290 0056 444A     		ldr	r2, .L123
ARM GAS  /tmp/cceQ4hSH.s 			page 32


 1291 0058 D318     		add	r3, r2, r3
 1292 005a 9B78     		ldrb	r3, [r3, #2]
 1293 005c 002B     		cmp	r3, #0
 1294 005e 0CD0     		beq	.L108
 404:Src/usbd_midi_if.c **** 				msg_buf[0] = (cable_num << 4) + midi_event[cable_num].length;
 1295              		.loc 1 404 0
 1296 0060 8201     		lsl	r2, r0, #6
 1297 0062 5244     		add	r2, r2, r10
 1298 0064 414B     		ldr	r3, .L123+4
 1299 0066 D25C     		ldrb	r2, [r2, r3]
 1300 0068 0301     		lsl	r3, r0, #4
 1301 006a D218     		add	r2, r2, r3
 1302 006c 01AB     		add	r3, sp, #4
 1303 006e 1A70     		strb	r2, [r3]
 1304              	.L110:
 387:Src/usbd_midi_if.c **** {
 1305              		.loc 1 387 0 discriminator 1
 1306 0070 0023     		mov	r3, #0
 1307              	.LBB4:
 405:Src/usbd_midi_if.c **** 			}else{
 406:Src/usbd_midi_if.c **** 				msg_buf[0] = (cable_num << 4) + ((midi_event[cable_num].midi_byte[0] & 0xF0) >> 4);
 407:Src/usbd_midi_if.c **** 			}
 408:Src/usbd_midi_if.c **** 
 409:Src/usbd_midi_if.c **** 			//byte 1-3
 410:Src/usbd_midi_if.c **** 			for(uint32_t i=0; i<midi_event[cable_num].length; i++){
 1308              		.loc 1 410 0 discriminator 1
 1309 0072 3E4D     		ldr	r5, .L123+4
 1310 0074 B101     		lsl	r1, r6, #6
 411:Src/usbd_midi_if.c **** 				msg_buf[i+1] = midi_event[cable_num].midi_byte[i];
 1311              		.loc 1 411 0 discriminator 1
 1312 0076 281C     		mov	r0, r5
 1313              	.LVL106:
 1314 0078 12E0     		b	.L109
 1315              	.LVL107:
 1316              	.L108:
 1317              	.LBE4:
 406:Src/usbd_midi_if.c **** 				msg_buf[0] = (cable_num << 4) + ((midi_event[cable_num].midi_byte[0] & 0xF0) >> 4);
 1318              		.loc 1 406 0
 1319 007a 8301     		lsl	r3, r0, #6
 1320 007c 5344     		add	r3, r3, r10
 1321 007e 3B4A     		ldr	r2, .L123+4
 1322 0080 D318     		add	r3, r2, r3
 1323 0082 5A78     		ldrb	r2, [r3, #1]
 1324 0084 1209     		lsr	r2, r2, #4
 1325 0086 0301     		lsl	r3, r0, #4
 1326 0088 D218     		add	r2, r2, r3
 1327 008a 01AB     		add	r3, sp, #4
 1328 008c 1A70     		strb	r2, [r3]
 1329 008e EFE7     		b	.L110
 1330              	.LVL108:
 1331              	.L111:
 1332              	.LBB5:
 1333              		.loc 1 411 0 discriminator 2
 1334 0090 5A1C     		add	r2, r3, #1
 1335 0092 8C19     		add	r4, r1, r6
 1336 0094 E318     		add	r3, r4, r3
 1337              	.LVL109:
ARM GAS  /tmp/cceQ4hSH.s 			page 33


 1338 0096 C318     		add	r3, r0, r3
 1339 0098 5C78     		ldrb	r4, [r3, #1]
 1340 009a 01AB     		add	r3, sp, #4
 1341 009c 9C54     		strb	r4, [r3, r2]
 1342              	.LVL110:
 410:Src/usbd_midi_if.c **** 			for(uint32_t i=0; i<midi_event[cable_num].length; i++){
 1343              		.loc 1 410 0 discriminator 2
 1344 009e 131C     		mov	r3, r2
 1345              	.LVL111:
 1346              	.L109:
 410:Src/usbd_midi_if.c **** 			for(uint32_t i=0; i<midi_event[cable_num].length; i++){
 1347              		.loc 1 410 0 is_stmt 0 discriminator 1
 1348 00a0 8A19     		add	r2, r1, r6
 1349 00a2 525D     		ldrb	r2, [r2, r5]
 1350 00a4 9A42     		cmp	r2, r3
 1351 00a6 F3D8     		bhi	.L111
 1352              	.LBE5:
 412:Src/usbd_midi_if.c **** 			}
 413:Src/usbd_midi_if.c **** 
 414:Src/usbd_midi_if.c **** 			sendMidiMessage(msg_buf,4);
 1353              		.loc 1 414 0 is_stmt 1
 1354 00a8 01A8     		add	r0, sp, #4
 1355 00aa 0421     		mov	r1, #4
 1356 00ac FFF7FEFF 		bl	sendMidiMessage
 1357              	.LVL112:
 415:Src/usbd_midi_if.c **** 			break;
 1358              		.loc 1 415 0
 1359 00b0 52E0     		b	.L103
 1360              	.LVL113:
 1361              	.L119:
 416:Src/usbd_midi_if.c **** 
 417:Src/usbd_midi_if.c **** 		case MSG_SYSEX:
 418:Src/usbd_midi_if.c **** 			for(cnt_length = 0; cnt_length < midi_event[cable_num].length; cnt_length++){
 419:Src/usbd_midi_if.c **** 				if( 0xF7 !=midi_event[cable_num].midi_byte[cnt_length] ){
 1362              		.loc 1 419 0
 1363 00b2 BB19     		add	r3, r7, r6
 1364 00b4 5B19     		add	r3, r3, r5
 1365 00b6 4B44     		add	r3, r3, r9
 1366 00b8 5B78     		ldrb	r3, [r3, #1]
 1367 00ba F72B     		cmp	r3, #247
 1368 00bc 0FD0     		beq	.L112
 420:Src/usbd_midi_if.c **** 					if(2 == cnt_remain){
 1369              		.loc 1 420 0
 1370 00be 022C     		cmp	r4, #2
 1371 00c0 09D1     		bne	.L113
 421:Src/usbd_midi_if.c **** 						msg_buf[3] = midi_event[cable_num].midi_byte[cnt_length];
 1372              		.loc 1 421 0
 1373 00c2 01A8     		add	r0, sp, #4
 1374 00c4 C370     		strb	r3, [r0, #3]
 422:Src/usbd_midi_if.c **** 						msg_buf[0] = (cable_num << 4) + 0x4;	//SysEx starts or continues
 1375              		.loc 1 422 0
 1376 00c6 5246     		mov	r2, r10
 1377 00c8 1301     		lsl	r3, r2, #4
 1378 00ca 0433     		add	r3, r3, #4
 1379 00cc 0370     		strb	r3, [r0]
 423:Src/usbd_midi_if.c **** 						sendMidiMessage(msg_buf,4);
 1380              		.loc 1 423 0
ARM GAS  /tmp/cceQ4hSH.s 			page 34


 1381 00ce 0421     		mov	r1, #4
 1382 00d0 FFF7FEFF 		bl	sendMidiMessage
 1383              	.LVL114:
 1384 00d4 2FE0     		b	.L114
 1385              	.L113:
 424:Src/usbd_midi_if.c **** 					}else{
 425:Src/usbd_midi_if.c **** 						msg_buf[1 + cnt_remain] = midi_event[cable_num].midi_byte[cnt_length];
 1386              		.loc 1 425 0
 1387 00d6 621C     		add	r2, r4, #1
 1388 00d8 01A9     		add	r1, sp, #4
 1389 00da 8B54     		strb	r3, [r1, r2]
 1390 00dc 2BE0     		b	.L114
 1391              	.L112:
 426:Src/usbd_midi_if.c **** 					}
 427:Src/usbd_midi_if.c **** 
 428:Src/usbd_midi_if.c **** 
 429:Src/usbd_midi_if.c **** 				}else{
 430:Src/usbd_midi_if.c **** 
 431:Src/usbd_midi_if.c **** 					switch (cnt_remain) {
 1392              		.loc 1 431 0
 1393 00de 012C     		cmp	r4, #1
 1394 00e0 12D0     		beq	.L115
 1395 00e2 002C     		cmp	r4, #0
 1396 00e4 02D0     		beq	.L116
 1397 00e6 022C     		cmp	r4, #2
 1398 00e8 1BD0     		beq	.L117
 1399 00ea 24E0     		b	.L114
 1400              	.L116:
 432:Src/usbd_midi_if.c **** 						case 0:
 433:Src/usbd_midi_if.c **** 							msg_buf[0] = (cable_num << 4) + 0x5;	//SysEx ends with following single byte
 1401              		.loc 1 433 0
 1402 00ec 01A8     		add	r0, sp, #4
 1403 00ee 5146     		mov	r1, r10
 1404 00f0 0B01     		lsl	r3, r1, #4
 1405 00f2 0533     		add	r3, r3, #5
 1406 00f4 0370     		strb	r3, [r0]
 434:Src/usbd_midi_if.c **** 							msg_buf[1] = 0xF7;
 1407              		.loc 1 434 0
 1408 00f6 F723     		mov	r3, #247
 1409 00f8 4370     		strb	r3, [r0, #1]
 435:Src/usbd_midi_if.c **** 							msg_buf[2] = msg_buf[3] = 0x00;
 1410              		.loc 1 435 0
 1411 00fa 0023     		mov	r3, #0
 1412 00fc C370     		strb	r3, [r0, #3]
 1413 00fe 8370     		strb	r3, [r0, #2]
 436:Src/usbd_midi_if.c **** 							sendMidiMessage(msg_buf,4);
 1414              		.loc 1 436 0
 1415 0100 0421     		mov	r1, #4
 1416 0102 FFF7FEFF 		bl	sendMidiMessage
 1417              	.LVL115:
 437:Src/usbd_midi_if.c **** 							break;
 1418              		.loc 1 437 0
 1419 0106 16E0     		b	.L114
 1420              	.L115:
 438:Src/usbd_midi_if.c **** 
 439:Src/usbd_midi_if.c **** 						case 1:
 440:Src/usbd_midi_if.c **** 							msg_buf[0] = (cable_num << 4) + 0x6;	//SysEx ends with following two bytes.
ARM GAS  /tmp/cceQ4hSH.s 			page 35


 1421              		.loc 1 440 0
 1422 0108 01A8     		add	r0, sp, #4
 1423 010a 5246     		mov	r2, r10
 1424 010c 1301     		lsl	r3, r2, #4
 1425 010e 0633     		add	r3, r3, #6
 1426 0110 0370     		strb	r3, [r0]
 441:Src/usbd_midi_if.c **** 							msg_buf[2] = 0xF7;
 1427              		.loc 1 441 0
 1428 0112 F723     		mov	r3, #247
 1429 0114 8370     		strb	r3, [r0, #2]
 442:Src/usbd_midi_if.c **** 							msg_buf[3] = 0x00;
 1430              		.loc 1 442 0
 1431 0116 0023     		mov	r3, #0
 1432 0118 C370     		strb	r3, [r0, #3]
 443:Src/usbd_midi_if.c **** 							sendMidiMessage(msg_buf,4);
 1433              		.loc 1 443 0
 1434 011a 0421     		mov	r1, #4
 1435 011c FFF7FEFF 		bl	sendMidiMessage
 1436              	.LVL116:
 444:Src/usbd_midi_if.c **** 							break;
 1437              		.loc 1 444 0
 1438 0120 09E0     		b	.L114
 1439              	.L117:
 445:Src/usbd_midi_if.c **** 
 446:Src/usbd_midi_if.c **** 						case 2:
 447:Src/usbd_midi_if.c **** 							msg_buf[0] = (cable_num << 4) + 0x7;	//SysEx ends with following three bytes.
 1440              		.loc 1 447 0
 1441 0122 01A8     		add	r0, sp, #4
 1442 0124 5146     		mov	r1, r10
 1443 0126 0B01     		lsl	r3, r1, #4
 1444 0128 0733     		add	r3, r3, #7
 1445 012a 0370     		strb	r3, [r0]
 448:Src/usbd_midi_if.c **** 							msg_buf[3] = 0xF7;
 1446              		.loc 1 448 0
 1447 012c F723     		mov	r3, #247
 1448 012e C370     		strb	r3, [r0, #3]
 449:Src/usbd_midi_if.c **** 							sendMidiMessage(msg_buf,4);
 1449              		.loc 1 449 0
 1450 0130 0421     		mov	r1, #4
 1451 0132 FFF7FEFF 		bl	sendMidiMessage
 1452              	.LVL117:
 1453              	.L114:
 450:Src/usbd_midi_if.c **** 							break;
 451:Src/usbd_midi_if.c **** 						default:
 452:Src/usbd_midi_if.c **** 							break;
 453:Src/usbd_midi_if.c **** 					}
 454:Src/usbd_midi_if.c **** 				}
 455:Src/usbd_midi_if.c **** 
 456:Src/usbd_midi_if.c **** 				cnt_remain++;
 1454              		.loc 1 456 0
 1455 0136 0134     		add	r4, r4, #1
 1456              	.LVL118:
 457:Src/usbd_midi_if.c **** 				if(cnt_remain >=3){
 1457              		.loc 1 457 0
 1458 0138 022C     		cmp	r4, #2
 1459 013a 00D9     		bls	.L118
 458:Src/usbd_midi_if.c **** 					cnt_remain = 0;
ARM GAS  /tmp/cceQ4hSH.s 			page 36


 1460              		.loc 1 458 0
 1461 013c 0024     		mov	r4, #0
 1462              	.LVL119:
 1463              	.L118:
 418:Src/usbd_midi_if.c **** 			for(cnt_length = 0; cnt_length < midi_event[cable_num].length; cnt_length++){
 1464              		.loc 1 418 0
 1465 013e 0135     		add	r5, r5, #1
 1466              	.LVL120:
 1467 0140 05E0     		b	.L106
 1468              	.LVL121:
 1469              	.L120:
 391:Src/usbd_midi_if.c **** 	switch(analyzed_status[cable_num].type){
 1470              		.loc 1 391 0
 1471 0142 0025     		mov	r5, #0
 1472 0144 0024     		mov	r4, #0
 418:Src/usbd_midi_if.c **** 			for(cnt_length = 0; cnt_length < midi_event[cable_num].length; cnt_length++){
 1473              		.loc 1 418 0
 1474 0146 094A     		ldr	r2, .L123+4
 1475 0148 9046     		mov	r8, r2
 1476 014a 8701     		lsl	r7, r0, #6
 419:Src/usbd_midi_if.c **** 				if( 0xF7 !=midi_event[cable_num].midi_byte[cnt_length] ){
 1477              		.loc 1 419 0
 1478 014c 9146     		mov	r9, r2
 1479              	.LVL122:
 1480              	.L106:
 418:Src/usbd_midi_if.c **** 			for(cnt_length = 0; cnt_length < midi_event[cable_num].length; cnt_length++){
 1481              		.loc 1 418 0 discriminator 1
 1482 014e BB19     		add	r3, r7, r6
 1483 0150 4146     		mov	r1, r8
 1484 0152 5B5C     		ldrb	r3, [r3, r1]
 1485 0154 AB42     		cmp	r3, r5
 1486 0156 ACD8     		bhi	.L119
 1487              	.LVL123:
 1488              	.L103:
 459:Src/usbd_midi_if.c **** 				}
 460:Src/usbd_midi_if.c **** 			}
 461:Src/usbd_midi_if.c **** 			break;
 462:Src/usbd_midi_if.c **** 
 463:Src/usbd_midi_if.c **** 		default:
 464:Src/usbd_midi_if.c **** 			break;
 465:Src/usbd_midi_if.c **** 	}
 466:Src/usbd_midi_if.c **** 	USBD_MIDI_SendPacket();
 1489              		.loc 1 466 0
 1490 0158 FFF7FEFF 		bl	USBD_MIDI_SendPacket
 1491              	.LVL124:
 467:Src/usbd_midi_if.c **** }
 1492              		.loc 1 467 0
 1493 015c 02B0     		add	sp, sp, #8
 1494              		@ sp needed
 1495 015e 1CBC     		pop	{r2, r3, r4}
 1496 0160 9046     		mov	r8, r2
 1497 0162 9946     		mov	r9, r3
 1498 0164 A246     		mov	r10, r4
 1499 0166 F0BD     		pop	{r4, r5, r6, r7, pc}
 1500              	.L124:
 1501              		.align	2
 1502              	.L123:
ARM GAS  /tmp/cceQ4hSH.s 			page 37


 1503 0168 00000000 		.word	analyzed_status
 1504 016c 00000000 		.word	midi_event
 1505              		.cfi_endproc
 1506              	.LFE45:
 1508              		.section	.text.midiProcess,"ax",%progbits
 1509              		.align	2
 1510              		.global	midiProcess
 1511              		.code	16
 1512              		.thumb_func
 1514              	midiProcess:
 1515              	.LFB46:
 468:Src/usbd_midi_if.c **** 
 469:Src/usbd_midi_if.c **** void midiProcess(){
 1516              		.loc 1 469 0
 1517              		.cfi_startproc
 1518 0000 38B5     		push	{r3, r4, r5, lr}
 1519              	.LCFI17:
 1520              		.cfi_def_cfa_offset 16
 1521              		.cfi_offset 3, -16
 1522              		.cfi_offset 4, -12
 1523              		.cfi_offset 5, -8
 1524              		.cfi_offset 14, -4
 1525              	.LVL125:
 1526              	.LBB6:
 470:Src/usbd_midi_if.c **** 
 471:Src/usbd_midi_if.c **** 	for(uint32_t cable_num=0; cable_num<MIDI_IN_JACK_NUM; cable_num++){
 1527              		.loc 1 471 0
 1528 0002 0025     		mov	r5, #0
 1529 0004 0FE0     		b	.L126
 1530              	.LVL126:
 1531              	.L128:
 472:Src/usbd_midi_if.c **** 		while( FUNC_SUCCESS == midiGetFromJackRx(cable_num) ){
 473:Src/usbd_midi_if.c **** 			if( midiEventIsGenerated(cable_num) ){// Generate MIDI event from UART buffer.
 1532              		.loc 1 473 0
 1533 0006 201C     		mov	r0, r4
 1534 0008 FFF7FEFF 		bl	midiEventIsGenerated
 1535              	.LVL127:
 1536 000c 0028     		cmp	r0, #0
 1537 000e 04D0     		beq	.L131
 474:Src/usbd_midi_if.c **** 				//Analyze MIDI Message.
 475:Src/usbd_midi_if.c **** 				midiGenerateUsbPacket(cable_num);
 1538              		.loc 1 475 0
 1539 0010 201C     		mov	r0, r4
 1540 0012 FFF7FEFF 		bl	midiGenerateUsbPacket
 1541              	.LVL128:
 1542 0016 00E0     		b	.L131
 1543              	.L130:
 472:Src/usbd_midi_if.c **** 		while( FUNC_SUCCESS == midiGetFromJackRx(cable_num) ){
 1544              		.loc 1 472 0 discriminator 1
 1545 0018 ECB2     		uxtb	r4, r5
 1546              	.L131:
 1547 001a 201C     		mov	r0, r4
 1548 001c FFF7FEFF 		bl	midiGetFromJackRx
 1549              	.LVL129:
 1550 0020 0128     		cmp	r0, #1
 1551 0022 F0D0     		beq	.L128
 471:Src/usbd_midi_if.c **** 	for(uint32_t cable_num=0; cable_num<MIDI_IN_JACK_NUM; cable_num++){
ARM GAS  /tmp/cceQ4hSH.s 			page 38


 1552              		.loc 1 471 0
 1553 0024 0135     		add	r5, r5, #1
 1554              	.LVL130:
 1555              	.L126:
 471:Src/usbd_midi_if.c **** 	for(uint32_t cable_num=0; cable_num<MIDI_IN_JACK_NUM; cable_num++){
 1556              		.loc 1 471 0 is_stmt 0 discriminator 1
 1557 0026 002D     		cmp	r5, #0
 1558 0028 F6D0     		beq	.L130
 1559              	.LBE6:
 476:Src/usbd_midi_if.c **** 			}
 477:Src/usbd_midi_if.c **** 		}
 478:Src/usbd_midi_if.c **** 	}
 479:Src/usbd_midi_if.c **** }
 1560              		.loc 1 479 0 is_stmt 1
 1561              		@ sp needed
 1562              	.LVL131:
 1563 002a 38BD     		pop	{r3, r4, r5, pc}
 1564              		.cfi_endproc
 1565              	.LFE46:
 1567              		.global	USBD_Interface_fops_FS
 1568              		.comm	rx_midi_msg,1,4
 1569              		.comm	midi_event,65,4
 1570              		.comm	analyzed_status,4,4
 1571              		.comm	rbuf_jack_rx,12,4
 1572              		.comm	rbuf_usb_rx,12,4
 1573              		.section	.data.USBD_Interface_fops_FS,"aw",%progbits
 1574              		.align	2
 1577              	USBD_Interface_fops_FS:
 1578 0000 00000000 		.word	MIDI_DataRx
 1579 0004 00000000 		.word	MIDI_DataTx
 1580              		.text
 1581              	.Letext0:
 1582              		.file 2 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_defaul
 1583              		.file 3 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 1584              		.file 4 "Middlewares/USBMIDI/Inc/usbd_midi.h"
 1585              		.file 5 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 1586              		.file 6 "Inc/curelib_inc/curemisc.h"
 1587              		.file 7 "Inc/curelib_inc/curebuffer.h"
 1588              		.file 8 "Inc/usbd_midi_if.h"
ARM GAS  /tmp/cceQ4hSH.s 			page 39


DEFINED SYMBOLS
                            *ABS*:00000000 usbd_midi_if.c
     /tmp/cceQ4hSH.s:18     .text.MIDI_DataTx:00000000 $t
     /tmp/cceQ4hSH.s:22     .text.MIDI_DataTx:00000000 MIDI_DataTx
     /tmp/cceQ4hSH.s:89     .text.MIDI_DataTx:00000038 $d
     /tmp/cceQ4hSH.s:95     .text.MIDI_DataRx:00000000 $t
     /tmp/cceQ4hSH.s:99     .text.MIDI_DataRx:00000000 MIDI_DataRx
     /tmp/cceQ4hSH.s:163    .rodata.MIDI_DataRx:00000000 $d
     /tmp/cceQ4hSH.s:268    .text.MIDI_DataRx:0000008c $d
                            *COM*:0000000c rbuf_usb_rx
     /tmp/cceQ4hSH.s:274    .text.midiInit:00000000 $t
     /tmp/cceQ4hSH.s:279    .text.midiInit:00000000 midiInit
     /tmp/cceQ4hSH.s:411    .text.midiInit:00000088 $d
                            *COM*:0000000c rbuf_jack_rx
                            *COM*:00000041 midi_event
                            *COM*:00000001 rx_midi_msg
                            *COM*:00000004 analyzed_status
     /tmp/cceQ4hSH.s:420    .text.midiGetFromUsbRx:00000000 $t
     /tmp/cceQ4hSH.s:425    .text.midiGetFromUsbRx:00000000 midiGetFromUsbRx
     /tmp/cceQ4hSH.s:459    .text.midiGetFromUsbRx:0000001c $d
     /tmp/cceQ4hSH.s:464    .text.midiGetFromJackRx:00000000 $t
     /tmp/cceQ4hSH.s:469    .text.midiGetFromJackRx:00000000 midiGetFromJackRx
     /tmp/cceQ4hSH.s:506    .text.midiGetFromJackRx:00000024 $d
     /tmp/cceQ4hSH.s:512    .text.midiSetFromJackRx:00000000 $t
     /tmp/cceQ4hSH.s:517    .text.midiSetFromJackRx:00000000 midiSetFromJackRx
     /tmp/cceQ4hSH.s:551    .text.midiSetFromJackRx:0000001c $d
     /tmp/cceQ4hSH.s:556    .text.isUsbRxBufEmpty:00000000 $t
     /tmp/cceQ4hSH.s:561    .text.isUsbRxBufEmpty:00000000 isUsbRxBufEmpty
     /tmp/cceQ4hSH.s:595    .text.isUsbRxBufEmpty:0000001c $d
     /tmp/cceQ4hSH.s:600    .text.isJackRxBufEmpty:00000000 $t
     /tmp/cceQ4hSH.s:605    .text.isJackRxBufEmpty:00000000 isJackRxBufEmpty
     /tmp/cceQ4hSH.s:639    .text.isJackRxBufEmpty:0000001c $d
     /tmp/cceQ4hSH.s:644    .text.isRxBufEmpty:00000000 $t
     /tmp/cceQ4hSH.s:649    .text.isRxBufEmpty:00000000 isRxBufEmpty
     /tmp/cceQ4hSH.s:723    .text.isRxBufEmpty:00000048 $d
     /tmp/cceQ4hSH.s:729    .text.sendMidiMessage:00000000 $t
     /tmp/cceQ4hSH.s:734    .text.sendMidiMessage:00000000 sendMidiMessage
     /tmp/cceQ4hSH.s:758    .text.midiEventIsGenerated:00000000 $t
     /tmp/cceQ4hSH.s:763    .text.midiEventIsGenerated:00000000 midiEventIsGenerated
     /tmp/cceQ4hSH.s:826    .rodata.midiEventIsGenerated:00000000 $d
     /tmp/cceQ4hSH.s:1202   .text.midiEventIsGenerated:00000230 $d
     /tmp/cceQ4hSH.s:1210   .text.midiGenerateUsbPacket:00000000 $t
     /tmp/cceQ4hSH.s:1215   .text.midiGenerateUsbPacket:00000000 midiGenerateUsbPacket
     /tmp/cceQ4hSH.s:1503   .text.midiGenerateUsbPacket:00000168 $d
     /tmp/cceQ4hSH.s:1509   .text.midiProcess:00000000 $t
     /tmp/cceQ4hSH.s:1514   .text.midiProcess:00000000 midiProcess
     /tmp/cceQ4hSH.s:1577   .data.USBD_Interface_fops_FS:00000000 USBD_Interface_fops_FS
     /tmp/cceQ4hSH.s:1574   .data.USBD_Interface_fops_FS:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
APP_Rx_ptr_in
APP_Rx_Buffer
cureRingBufferU8Enqueue
cureRingBufferU8Init
cureRingBufferU8Dequeue
_cureRingBufferU8GetUsedSize
ARM GAS  /tmp/cceQ4hSH.s 			page 40


USBD_MIDI_SendPacket
